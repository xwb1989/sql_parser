// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	over              *Over
	intervalType      IntervalTypes
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const OF = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const EXTRACT = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const KEY_BLOCK_SIZE = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const BEGIN = 57479
const START = 57480
const TRANSACTION = 57481
const COMMIT = 57482
const ROLLBACK = 57483
const BIT = 57484
const TINYINT = 57485
const SMALLINT = 57486
const MEDIUMINT = 57487
const INT = 57488
const INTEGER = 57489
const BIGINT = 57490
const INTNUM = 57491
const REAL = 57492
const DOUBLE = 57493
const FLOAT_TYPE = 57494
const DECIMAL = 57495
const NUMERIC = 57496
const TIME = 57497
const TIMESTAMP = 57498
const DATETIME = 57499
const YEAR = 57500
const CHAR = 57501
const VARCHAR = 57502
const BOOL = 57503
const CHARACTER = 57504
const VARBINARY = 57505
const NCHAR = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const DATABASES = 57531
const TABLES = 57532
const VITESS_KEYSPACES = 57533
const VITESS_SHARDS = 57534
const VITESS_TABLETS = 57535
const VSCHEMA_TABLES = 57536
const EXTENDED = 57537
const FULL = 57538
const PROCESSLIST = 57539
const NAMES = 57540
const CHARSET = 57541
const GLOBAL = 57542
const SESSION = 57543
const ISOLATION = 57544
const LEVEL = 57545
const READ = 57546
const WRITE = 57547
const ONLY = 57548
const REPEATABLE = 57549
const COMMITTED = 57550
const UNCOMMITTED = 57551
const SERIALIZABLE = 57552
const CURRENT_TIMESTAMP = 57553
const DATABASE = 57554
const CURRENT_DATE = 57555
const CURRENT_TIME = 57556
const LOCALTIME = 57557
const LOCALTIMESTAMP = 57558
const UTC_DATE = 57559
const UTC_TIME = 57560
const UTC_TIMESTAMP = 57561
const DAY = 57562
const DAY_HOUR = 57563
const DAY_MICROSECOND = 57564
const DAY_MINUTE = 57565
const DAY_SECOND = 57566
const HOUR = 57567
const HOUR_MICROSECOND = 57568
const HOUR_MINUTE = 57569
const HOUR_SECOND = 57570
const MICROSECOND = 57571
const MINUTE = 57572
const MINUTE_MICROSECOND = 57573
const MINUTE_SECOND = 57574
const MONTH = 57575
const QUARTER = 57576
const SECOND = 57577
const SECOND_MICROSECOND = 57578
const YEAR_MONTH = 57579
const WEEK = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const OVER = 57588
const WINDOW = 57589
const GROUPING = 57590
const GROUPS = 57591
const AVG = 57592
const BIT_AND = 57593
const BIT_OR = 57594
const BIT_XOR = 57595
const COUNT = 57596
const JSON_ARRAYAGG = 57597
const JSON_OBJECTAGG = 57598
const MAX = 57599
const MIN = 57600
const STDDEV_POP = 57601
const STDDEV = 57602
const STD = 57603
const STDDEV_SAMP = 57604
const SUM = 57605
const VAR_POP = 57606
const VARIANCE = 57607
const VAR_SAMP = 57608
const CUME_DIST = 57609
const DENSE_RANK = 57610
const FIRST_VALUE = 57611
const LAG = 57612
const LAST_VALUE = 57613
const LEAD = 57614
const NTH_VALUE = 57615
const NTILE = 57616
const ROW_NUMBER = 57617
const PERCENT_RANK = 57618
const RANK = 57619
const MATCH = 57620
const AGAINST = 57621
const BOOLEAN = 57622
const LANGUAGE = 57623
const WITH = 57624
const QUERY = 57625
const EXPANSION = 57626
const UNUSED = 57627

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"OF",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"EXTRACT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"DAY",
	"DAY_HOUR",
	"DAY_MICROSECOND",
	"DAY_MINUTE",
	"DAY_SECOND",
	"HOUR",
	"HOUR_MICROSECOND",
	"HOUR_MINUTE",
	"HOUR_SECOND",
	"MICROSECOND",
	"MINUTE",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"MONTH",
	"QUARTER",
	"SECOND",
	"SECOND_MICROSECOND",
	"YEAR_MONTH",
	"WEEK",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	152, 272,
	153, 272,
	-2, 262,
	-1, 294,
	111, 643,
	-2, 639,
	-1, 295,
	111, 644,
	-2, 640,
	-1, 395,
	82, 819,
	-2, 67,
	-1, 396,
	82, 780,
	-2, 68,
	-1, 401,
	82, 764,
	-2, 605,
	-1, 403,
	82, 801,
	-2, 607,
	-1, 742,
	53, 50,
	55, 50,
	-2, 52,
	-1, 882,
	111, 646,
	-2, 642,
	-1, 1142,
	5, 563,
	17, 563,
	19, 563,
	31, 563,
	-2, 413,
}

const yyPrivate = 57344

const yyLast = 13788

var yyAct = [...]int{
	327, 22, 1079, 1572, 241, 1496, 1545, 813, 1427, 299,
	994, 326, 1523, 601, 1361, 660, 1013, 1388, 1035, 1358,
	1031, 1362, 1200, 22, 1259, 736, 239, 231, 659, 3,
	1469, 738, 1073, 1059, 1034, 56, 995, 848, 400, 1217,
	277, 907, 1309, 917, 1134, 914, 868, 1262, 1045, 1250,
	752, 58, 1205, 955, 884, 273, 570, 1204, 564, 1069,
	514, 751, 991, 725, 386, 394, 297, 611, 1116, 238,
	859, 232, 233, 234, 235, 382, 282, 391, 603, 389,
	53, 381, 1606, 1594, 1604, 1580, 1602, 23, 274, 380,
	1080, 1593, 1327, 1166, 1451, 23, 23, 518, 1532, 1383,
	1384, 1343, 1027, 1028, 1382, 286, 1554, 626, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 1195,
	676, 637, 1225, 1196, 1513, 1224, 1026, 301, 1226, 554,
	1241, 1053, 953, 1052, 1579, 48, 48, 201, 197, 198,
	199, 1096, 842, 48, 48, 753, 1481, 754, 59, 843,
	1394, 1395, 1396, 1501, 1060, 1095, 1310, 1440, 1399, 1438,
	1397, 230, 550, 551, 1573, 1603, 539, 1601, 1283, 992,
	528, 521, 57, 61, 62, 63, 64, 65, 1530, 195,
	1524, 1014, 1016, 1100, 821, 194, 1312, 195, 1047, 812,
	527, 385, 1094, 1526, 945, 934, 935, 936, 937, 947,
	938, 939, 940, 952, 948, 941, 942, 949, 950, 951,
	943, 944, 946, 524, 545, 545, 545, 545, 1314, 545,
	1318, 1047, 1313, 1216, 1311, 1215, 545, 1214, 516, 1316,
	541, 1047, 543, 209, 295, 196, 649, 650, 1315, 1425,
	560, 1091, 1088, 1089, 1295, 1087, 200, 1150, 1128, 1111,
	515, 1317, 1319, 857, 617, 534, 1015, 540, 542, 627,
	1235, 1525, 637, 1403, 854, 78, 1032, 608, 637, 206,
	1098, 1101, 206, 610, 22, 1060, 1330, 1531, 1529, 609,
	608, 1564, 1046, 610, 572, 561, 206, 630, 631, 632,
	633, 634, 627, 615, 646, 637, 610, 648, 206, 206,
	78, 1455, 562, 1106, 206, 1093, 78, 1413, 1287, 1203,
	1280, 755, 956, 1555, 1404, 1046, 1282, 1049, 816, 1398,
	1044, 1042, 1050, 1239, 1043, 1046, 658, 1092, 661, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 538, 675,
	677, 677, 677, 677, 677, 677, 677, 677, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	51, 51, 1578, 1097, 1107, 557, 1286, 737, 51, 51,
	530, 531, 532, 956, 605, 1158, 1567, 1270, 23, 24,
	49, 26, 27, 292, 891, 1125, 1126, 1127, 280, 1584,
	1281, 48, 1279, 1487, 740, 1486, 1254, 42, 889, 890,
	888, 887, 28, 563, 647, 1253, 1268, 193, 1099, 206,
	908, 206, 909, 48, 1242, 1585, 1565, 206, 609, 608,
	860, 861, 37, 1508, 206, 1332, 48, 520, 78, 78,
	78, 78, 1484, 78, 1421, 610, 1251, 1588, 281, 281,
	78, 678, 679, 680, 681, 682, 683, 684, 743, 1562,
	749, 626, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 1391, 1146, 637, 1145, 1390, 609, 608,
	379, 1269, 1516, 1570, 55, 1236, 1274, 1271, 1264, 1265,
	1272, 1267, 1266, 609, 608, 610, 30, 31, 33, 32,
	35, 1516, 281, 1273, 385, 1516, 1517, 1135, 545, 1276,
	610, 522, 523, 614, 1478, 1477, 545, 36, 43, 44,
	1379, 281, 45, 46, 34, 1110, 281, 545, 545, 545,
	545, 545, 545, 545, 545, 281, 38, 39, 1227, 40,
	41, 545, 545, 874, 876, 877, 1410, 1409, 875, 1082,
	648, 628, 629, 630, 631, 632, 633, 634, 627, 1406,
	1407, 637, 910, 830, 701, 702, 703, 704, 705, 689,
	690, 691, 706, 707, 692, 693, 694, 700, 708, 695,
	696, 697, 698, 699, 711, 710, 709, 712, 713, 715,
	714, 716, 850, 828, 635, 636, 628, 629, 630, 631,
	632, 633, 634, 627, 206, 827, 637, 615, 826, 281,
	1536, 206, 206, 206, 817, 1447, 281, 78, 846, 1406,
	1405, 1535, 885, 78, 845, 609, 608, 1140, 281, 746,
	852, 815, 863, 862, 1299, 1202, 721, 281, 50, 22,
	919, 281, 610, 1147, 810, 1400, 882, 762, 761, 1491,
	536, 529, 661, 626, 625, 635, 636, 628, 629, 630,
	631, 632, 633, 634, 627, 515, 1202, 637, 926, 929,
	878, 747, 1201, 745, 1493, 957, 880, 847, 1140, 57,
	921, 51, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 609, 608, 637, 651, 652, 653, 654,
	655, 656, 657, 57, 1202, 1359, 911, 912, 1201, 721,
	610, 720, 386, 386, 386, 386, 386, 386, 1140, 919,
	996, 1020, 960, 745, 1463, 965, 1575, 967, 737, 1342,
	1017, 1412, 1408, 1228, 1152, 386, 721, 1149, 886, 1025,
	931, 1140, 78, 1140, 748, 858, 558, 1201, 206, 206,
	78, 1011, 206, 1054, 559, 206, 921, 856, 1018, 206,
	1021, 78, 78, 78, 78, 78, 78, 78, 78, 974,
	975, 21, 1074, 1373, 979, 78, 78, 982, 1151, 1231,
	206, 1148, 987, 206, 1070, 78, 48, 1010, 998, 999,
	1000, 1065, 1002, 997, 855, 1019, 1064, 1001, 67, 1061,
	1062, 1063, 1024, 814, 1023, 1077, 545, 1393, 545, 1206,
	1207, 609, 608, 1039, 1359, 1255, 545, 1210, 824, 1270,
	555, 869, 1213, 1212, 1007, 1005, 272, 78, 610, 1008,
	1006, 206, 1075, 1113, 546, 1004, 1003, 614, 1600, 385,
	385, 385, 385, 385, 385, 604, 1592, 1009, 1268, 731,
	732, 283, 284, 572, 1294, 385, 1071, 1072, 565, 1598,
	602, 1123, 385, 1122, 316, 315, 318, 319, 320, 321,
	566, 1246, 1129, 317, 760, 322, 537, 727, 730, 731,
	732, 728, 78, 729, 733, 1238, 882, 1569, 206, 1568,
	885, 1511, 1055, 1056, 1057, 1058, 1232, 1461, 1492, 1112,
	397, 860, 861, 1084, 823, 1117, 1291, 735, 1066, 1067,
	1068, 604, 1118, 1269, 1108, 275, 276, 1121, 1274, 1271,
	1264, 1265, 1272, 1267, 1266, 1120, 278, 1510, 1498, 279,
	57, 1497, 1428, 1130, 1202, 1273, 1155, 606, 1557, 1482,
	853, 1263, 236, 206, 55, 60, 206, 206, 206, 206,
	206, 206, 744, 52, 1, 1081, 1258, 1090, 1571, 206,
	1522, 851, 206, 1387, 1041, 1033, 206, 513, 66, 206,
	206, 1563, 1040, 78, 727, 730, 731, 732, 728, 1528,
	729, 733, 1198, 1199, 1206, 1207, 78, 1480, 1048, 1240,
	1051, 1392, 1566, 1237, 767, 765, 766, 764, 1157, 769,
	768, 763, 217, 392, 734, 756, 886, 1076, 607, 68,
	1197, 386, 1278, 883, 1277, 1086, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 1285, 1219, 1448, 1221, 841, 1220, 206, 1105, 553,
	78, 219, 78, 1229, 1211, 645, 206, 1208, 1119, 206,
	78, 1223, 398, 932, 933, 1165, 1167, 569, 918, 920,
	1541, 1156, 1173, 1174, 1175, 1176, 1222, 673, 954, 545,
	1245, 300, 1247, 1248, 1249, 1544, 958, 873, 314, 1243,
	1244, 313, 1233, 1234, 568, 312, 309, 311, 963, 964,
	310, 864, 1194, 619, 545, 970, 971, 972, 973, 298,
	290, 384, 717, 723, 1261, 1252, 726, 626, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 204,
	724, 637, 229, 722, 1209, 383, 1275, 237, 47, 1297,
	1450, 1553, 25, 54, 285, 1012, 240, 1298, 385, 19,
	18, 17, 20, 16, 15, 1290, 289, 14, 204, 204,
	29, 13, 12, 11, 204, 10, 9, 1334, 1328, 8,
	7, 6, 5, 4, 271, 1302, 1303, 2, 0, 0,
	0, 0, 0, 0, 1308, 0, 0, 0, 1320, 882,
	1321, 0, 0, 0, 0, 0, 0, 1364, 0, 22,
	0, 0, 0, 0, 0, 996, 1360, 0, 1363, 0,
	0, 996, 0, 0, 1368, 1375, 1376, 1377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1365, 0, 0,
	0, 0, 0, 1380, 0, 0, 1366, 397, 1369, 1367,
	0, 0, 0, 1381, 0, 0, 0, 0, 0, 1386,
	0, 0, 78, 0, 0, 206, 0, 1109, 0, 0,
	0, 0, 0, 1385, 1401, 1402, 0, 0, 0, 78,
	1335, 1336, 1337, 1338, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	1414, 204, 648, 1131, 1132, 1133, 0, 204, 0, 0,
	386, 0, 0, 1416, 204, 0, 1419, 0, 0, 0,
	0, 0, 78, 78, 0, 78, 0, 0, 0, 1137,
	1426, 0, 0, 1138, 0, 1429, 0, 0, 1449, 0,
	1142, 1143, 1144, 0, 0, 0, 0, 0, 78, 1153,
	0, 206, 206, 0, 0, 78, 78, 1436, 1454, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 544, 0,
	0, 0, 0, 78, 0, 0, 1160, 0, 1161, 1162,
	1163, 1164, 0, 0, 1168, 1169, 1170, 1171, 1172, 0,
	1462, 0, 288, 0, 0, 1179, 1180, 1181, 0, 1183,
	1184, 0, 1186, 1187, 1188, 1189, 0, 1191, 1192, 1193,
	0, 78, 0, 0, 1229, 740, 1471, 1472, 1473, 1468,
	1474, 0, 545, 0, 0, 0, 0, 0, 0, 1424,
	0, 1476, 0, 0, 0, 0, 0, 385, 0, 0,
	0, 0, 1490, 78, 78, 1495, 0, 1489, 0, 1483,
	0, 1485, 1433, 1434, 0, 1435, 916, 0, 1437, 0,
	1439, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 881, 78, 1364, 78, 78, 1515, 1500, 0,
	0, 0, 0, 0, 204, 1363, 0, 0, 0, 0,
	0, 204, 240, 204, 0, 1512, 0, 0, 0, 0,
	206, 1521, 76, 1538, 386, 1514, 1527, 0, 78, 0,
	0, 1540, 1543, 1547, 1533, 0, 1534, 0, 1548, 0,
	0, 78, 206, 0, 1364, 0, 22, 0, 78, 1539,
	0, 1479, 1537, 0, 0, 1363, 1556, 399, 1558, 0,
	78, 0, 0, 519, 206, 1561, 0, 0, 0, 1305,
	1306, 0, 0, 0, 1559, 0, 0, 0, 1307, 0,
	0, 0, 1322, 1323, 1576, 1325, 1326, 1445, 0, 0,
	0, 0, 1574, 0, 0, 0, 0, 996, 1582, 0,
	1581, 0, 0, 547, 548, 549, 0, 552, 1586, 0,
	1547, 0, 1591, 1590, 556, 0, 1340, 1341, 0, 1596,
	0, 1346, 1597, 397, 1349, 0, 1599, 0, 0, 1354,
	0, 0, 0, 0, 1605, 0, 1036, 0, 78, 0,
	78, 78, 78, 206, 78, 0, 0, 0, 204, 204,
	78, 385, 204, 0, 0, 204, 1378, 0, 0, 829,
	0, 626, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 0, 0, 637, 78, 78, 78, 0,
	204, 1444, 281, 240, 0, 0, 0, 0, 0, 0,
	78, 567, 571, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 618, 399, 399, 399, 399, 0,
	399, 0, 0, 0, 0, 0, 0, 399, 0, 626,
	625, 635, 636, 628, 629, 630, 631, 632, 633, 634,
	627, 204, 881, 637, 0, 0, 0, 0, 1431, 0,
	662, 1430, 829, 78, 0, 0, 0, 0, 1432, 0,
	674, 0, 0, 0, 0, 0, 78, 0, 206, 1441,
	1442, 1443, 0, 0, 1446, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 289, 0, 0, 0, 0, 240, 289,
	289, 0, 0, 928, 928, 289, 0, 0, 0, 0,
	928, 0, 0, 1464, 1465, 1466, 1467, 0, 0, 0,
	289, 289, 289, 289, 0, 0, 289, 289, 289, 289,
	289, 0, 0, 0, 0, 0, 0, 289, 289, 289,
	0, 289, 289, 0, 289, 289, 289, 289, 78, 289,
	289, 289, 0, 204, 0, 928, 204, 204, 204, 204,
	204, 204, 0, 0, 0, 0, 0, 281, 0, 240,
	0, 0, 204, 0, 0, 0, 240, 0, 0, 204,
	204, 0, 0, 0, 0, 0, 0, 0, 1502, 1503,
	0, 1504, 1505, 1506, 399, 0, 0, 0, 0, 1507,
	757, 0, 0, 1509, 626, 625, 635, 636, 628, 629,
	630, 631, 632, 633, 634, 627, 811, 0, 637, 1036,
	1518, 1519, 1520, 0, 820, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 831, 832, 833, 834, 835,
	836, 837, 838, 0, 0, 0, 0, 204, 0, 839,
	840, 1549, 1550, 1551, 1552, 1304, 204, 0, 0, 204,
	1344, 1345, 0, 1347, 1348, 1260, 1350, 1351, 1352, 1353,
	0, 1355, 1356, 1357, 0, 626, 625, 635, 636, 628,
	629, 630, 631, 632, 633, 634, 627, 0, 0, 637,
	0, 0, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1577, 289, 0, 0, 0, 0, 1583, 0,
	0, 0, 0, 1301, 0, 0, 387, 0, 0, 399,
	1587, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	1595, 871, 872, 0, 0, 1324, 0, 0, 399, 399,
	399, 399, 399, 399, 399, 399, 0, 0, 1136, 1607,
	289, 203, 399, 399, 0, 0, 1609, 1610, 0, 0,
	0, 0, 849, 0, 0, 0, 289, 0, 626, 625,
	635, 636, 628, 629, 630, 631, 632, 633, 634, 627,
	0, 390, 637, 0, 662, 0, 517, 0, 0, 924,
	925, 626, 625, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 0, 865, 637, 0, 0, 0, 289,
	289, 0, 0, 1036, 289, 1036, 0, 289, 0, 399,
	1456, 1457, 289, 0, 0, 0, 1458, 0, 0, 1459,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 923, 0, 0, 204, 0, 930, 0, 913,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	927, 927, 959, 0, 961, 962, 0, 927, 1030, 966,
	1301, 968, 969, 0, 0, 0, 0, 0, 0, 976,
	977, 978, 225, 980, 981, 0, 983, 984, 985, 986,
	0, 988, 989, 990, 0, 0, 0, 0, 0, 0,
	0, 525, 0, 526, 1083, 0, 1085, 0, 0, 533,
	0, 0, 927, 0, 1104, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 210, 0, 0, 0, 0, 0, 212,
	399, 0, 0, 0, 204, 0, 218, 214, 0, 0,
	0, 0, 0, 399, 289, 0, 0, 0, 0, 0,
	1036, 0, 0, 0, 0, 289, 0, 0, 1114, 1115,
	0, 571, 0, 216, 0, 829, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1260, 1036, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 399, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	928, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 213, 1141, 221, 222, 223, 224, 228, 0, 0,
	0, 0, 227, 226, 0, 1124, 0, 0, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 719, 0, 0, 0,
	0, 0, 1139, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 1154, 621,
	0, 624, 0, 0, 0, 289, 0, 638, 639, 640,
	641, 642, 643, 644, 204, 622, 623, 620, 626, 625,
	635, 636, 628, 629, 630, 631, 632, 633, 634, 627,
	0, 0, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 1177, 1178, 0, 0, 0, 1182, 0, 0, 1185,
	0, 0, 0, 0, 1190, 0, 0, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 240, 0, 0, 0, 0, 0, 1218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 0,
	818, 819, 0, 0, 822, 0, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 1329, 1256,
	399, 1331, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 0, 0,
	0, 0, 1292, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 1370, 1371, 0, 204, 1372,
	399, 0, 0, 1374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 927, 0, 0,
	849, 1218, 0, 927, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 0, 399, 1389, 0, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 1022, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1423, 1417, 0,
	0, 0, 0, 0, 0, 1420, 0, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 784, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 0, 1470, 1470, 1470,
	0, 1475, 0, 0, 0, 0, 772, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 399, 399, 399, 785, 0, 0, 0,
	1542, 1546, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 0, 662, 0, 0, 0, 798, 799, 800,
	801, 802, 803, 804, 0, 805, 806, 807, 808, 809,
	786, 787, 788, 789, 770, 771, 0, 0, 773, 0,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	790, 791, 792, 793, 794, 795, 796, 797, 0, 0,
	1389, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 1546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 482, 0, 450, 500, 428, 442, 511, 443,
	444, 475, 415, 460, 127, 440, 0, 431, 406, 437,
	407, 429, 452, 95, 455, 427, 484, 463, 109, 0,
	506, 111, 470, 0, 144, 120, 0, 0, 454, 489,
	458, 480, 449, 476, 421, 469, 501, 441, 473, 502,
	0, 0, 0, 77, 0, 1037, 1038, 0, 0, 0,
	0, 0, 88, 0, 0, 472, 497, 439, 474, 405,
	471, 0, 410, 416, 510, 495, 434, 435, 1230, 0,
	0, 0, 0, 0, 0, 453, 459, 477, 447, 0,
	0, 0, 1411, 0, 0, 0, 0, 432, 0, 468,
	0, 0, 0, 417, 411, 0, 451, 0, 0, 0,
	420, 0, 433, 478, 1418, 404, 481, 493, 448, 207,
	496, 446, 445, 499, 133, 0, 0, 147, 100, 99,
	108, 485, 430, 438, 91, 436, 139, 129, 159, 466,
	130, 138, 112, 151, 134, 158, 208, 166, 149, 165,
	80, 148, 157, 89, 141, 82, 155, 146, 118, 104,
	105, 81, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 85, 164, 84, 86, 163, 125, 150, 156,
	119, 116, 83, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 408, 0, 145,
	161, 174, 426, 494, 167, 168, 169, 170, 0, 0,
	0, 124, 87, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 424, 425, 422, 423, 461, 462,
	503, 504, 505, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 0, 479, 418, 0, 490, 491, 0, 483, 0,
	0, 0, 0, 409, 412, 413, 414, 419, 0, 0,
	465, 467, 488, 487, 486, 0, 492, 508, 507, 509,
	0, 0, 0, 456, 0, 457, 0, 0, 0, 0,
	0, 464, 79, 0, 110, 512, 135, 97, 162, 498,
	482, 0, 450, 500, 428, 442, 511, 443, 444, 475,
	415, 460, 127, 440, 0, 431, 406, 437, 407, 429,
	452, 95, 455, 427, 484, 463, 109, 0, 506, 111,
	470, 0, 144, 120, 0, 0, 454, 489, 458, 480,
	449, 476, 421, 469, 501, 441, 473, 502, 0, 0,
	0, 77, 0, 1037, 1038, 0, 0, 0, 0, 0,
	88, 0, 0, 472, 497, 439, 474, 405, 471, 0,
	410, 416, 510, 495, 434, 435, 0, 0, 0, 0,
	0, 0, 0, 453, 459, 477, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 0, 468, 0, 0,
	0, 417, 411, 0, 451, 0, 0, 0, 420, 0,
	433, 478, 0, 404, 481, 493, 448, 207, 496, 446,
	445, 499, 133, 0, 0, 147, 100, 99, 108, 485,
	430, 438, 91, 436, 139, 129, 159, 466, 130, 138,
	112, 151, 134, 158, 208, 166, 149, 165, 80, 148,
	157, 89, 141, 82, 155, 146, 118, 104, 105, 81,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	85, 164, 84, 86, 163, 125, 150, 156, 119, 116,
	83, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 408, 0, 145, 161, 174,
	426, 494, 167, 168, 169, 170, 0, 0, 0, 124,
	87, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 424, 425, 422, 423, 461, 462, 503, 504,
	505, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 0,
	479, 418, 0, 490, 491, 0, 483, 0, 0, 0,
	0, 409, 412, 413, 414, 419, 0, 0, 465, 467,
	488, 487, 486, 0, 492, 508, 507, 509, 0, 0,
	0, 456, 0, 457, 0, 0, 0, 0, 0, 464,
	79, 0, 110, 512, 135, 97, 162, 498, 482, 0,
	450, 500, 428, 442, 511, 443, 444, 475, 415, 460,
	127, 440, 0, 431, 406, 437, 407, 429, 452, 95,
	455, 427, 484, 463, 109, 0, 506, 111, 470, 0,
	144, 120, 0, 0, 454, 489, 458, 480, 449, 476,
	421, 469, 501, 441, 473, 502, 48, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 472, 497, 439, 474, 405, 471, 0, 410, 416,
	510, 495, 434, 435, 0, 0, 0, 0, 0, 0,
	0, 453, 459, 477, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 468, 0, 0, 0, 417,
	411, 0, 451, 0, 0, 0, 420, 0, 433, 478,
	0, 404, 481, 493, 448, 207, 496, 446, 445, 499,
	133, 0, 0, 147, 100, 99, 108, 485, 430, 438,
	91, 436, 139, 129, 159, 466, 130, 138, 112, 151,
	134, 158, 208, 166, 149, 165, 80, 148, 157, 89,
	141, 82, 155, 146, 118, 104, 105, 81, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 85, 164,
	84, 86, 163, 125, 150, 156, 119, 116, 83, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 408, 0, 145, 161, 174, 426, 494,
	167, 168, 169, 170, 0, 0, 0, 124, 87, 103,
	142, 106, 113, 136, 172, 128, 140, 90, 160, 143,
	424, 425, 422, 423, 461, 462, 503, 504, 505, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 0, 479, 418,
	0, 490, 491, 0, 483, 0, 0, 0, 0, 409,
	412, 413, 414, 419, 0, 0, 465, 467, 488, 487,
	486, 0, 492, 508, 507, 509, 0, 0, 0, 456,
	0, 457, 0, 0, 0, 0, 0, 464, 79, 0,
	110, 512, 135, 97, 162, 498, 482, 0, 450, 500,
	428, 442, 511, 443, 444, 475, 415, 460, 127, 440,
	0, 431, 406, 437, 407, 429, 452, 95, 455, 427,
	484, 463, 109, 0, 506, 111, 470, 0, 144, 120,
	0, 0, 454, 489, 458, 480, 449, 476, 421, 469,
	501, 441, 473, 502, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 472,
	497, 439, 474, 405, 471, 0, 410, 416, 510, 495,
	434, 435, 0, 0, 0, 0, 0, 0, 0, 453,
	459, 477, 447, 0, 0, 0, 0, 0, 0, 1300,
	0, 432, 0, 468, 0, 0, 0, 417, 411, 0,
	451, 0, 0, 0, 420, 0, 433, 478, 0, 404,
	481, 493, 448, 207, 496, 446, 445, 499, 133, 0,
	0, 147, 100, 99, 108, 485, 430, 438, 91, 436,
	139, 129, 159, 466, 130, 138, 112, 151, 134, 158,
	208, 166, 149, 165, 80, 148, 157, 89, 141, 82,
	155, 146, 118, 104, 105, 81, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 85, 164, 84, 86,
	163, 125, 150, 156, 119, 116, 83, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 408, 0, 145, 161, 174, 426, 494, 167, 168,
	169, 170, 0, 0, 0, 124, 87, 103, 142, 106,
	113, 136, 172, 128, 140, 90, 160, 143, 424, 425,
	422, 423, 461, 462, 503, 504, 505, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 0, 479, 418, 0, 490,
	491, 0, 483, 0, 0, 0, 0, 409, 412, 413,
	414, 419, 0, 0, 465, 467, 488, 487, 486, 0,
	492, 508, 507, 509, 0, 0, 0, 456, 0, 457,
	0, 0, 0, 0, 0, 464, 79, 0, 110, 512,
	135, 97, 162, 498, 482, 0, 450, 500, 428, 442,
	511, 443, 444, 475, 415, 460, 127, 440, 0, 431,
	406, 437, 407, 429, 452, 95, 455, 427, 484, 463,
	109, 0, 506, 111, 470, 0, 144, 120, 0, 0,
	454, 489, 458, 480, 449, 476, 421, 469, 501, 441,
	473, 502, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 472, 497, 439,
	474, 405, 471, 0, 410, 416, 510, 495, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 453, 459, 477,
	447, 0, 0, 0, 0, 0, 0, 879, 0, 432,
	0, 468, 0, 0, 0, 417, 411, 0, 451, 0,
	0, 0, 420, 0, 433, 478, 0, 404, 481, 493,
	448, 207, 496, 446, 445, 499, 133, 0, 0, 147,
	100, 99, 108, 485, 430, 438, 91, 436, 139, 129,
	159, 466, 130, 138, 112, 151, 134, 158, 208, 166,
	149, 165, 80, 148, 157, 89, 141, 82, 155, 146,
	118, 104, 105, 81, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 85, 164, 84, 86, 163, 125,
	150, 156, 119, 116, 83, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 408,
	0, 145, 161, 174, 426, 494, 167, 168, 169, 170,
	0, 0, 0, 124, 87, 103, 142, 106, 113, 136,
	172, 128, 140, 90, 160, 143, 424, 425, 422, 423,
	461, 462, 503, 504, 505, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 0, 479, 418, 0, 490, 491, 0,
	483, 0, 0, 0, 0, 409, 412, 413, 414, 419,
	0, 0, 465, 467, 488, 487, 486, 0, 492, 508,
	507, 509, 0, 0, 0, 456, 0, 457, 0, 0,
	0, 0, 0, 464, 79, 0, 110, 512, 135, 97,
	162, 498, 482, 0, 450, 500, 428, 442, 511, 443,
	444, 475, 415, 460, 127, 440, 0, 431, 406, 437,
	407, 429, 452, 95, 455, 427, 484, 463, 109, 0,
	506, 111, 470, 0, 144, 120, 0, 0, 454, 489,
	458, 480, 449, 476, 421, 469, 501, 441, 473, 502,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 472, 497, 439, 474, 405,
	471, 0, 410, 416, 510, 495, 434, 435, 0, 0,
	0, 0, 0, 0, 0, 453, 459, 477, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 432, 0, 468,
	0, 0, 0, 417, 411, 0, 451, 0, 0, 0,
	420, 0, 433, 478, 0, 404, 481, 493, 448, 207,
	496, 446, 445, 499, 133, 0, 0, 147, 100, 99,
	108, 485, 430, 438, 91, 436, 139, 129, 159, 466,
	130, 138, 112, 151, 134, 158, 208, 166, 149, 165,
	80, 148, 157, 89, 141, 82, 155, 146, 118, 104,
	105, 81, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 85, 164, 84, 86, 163, 125, 150, 156,
	119, 116, 83, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 408, 0, 145,
	161, 174, 426, 494, 167, 168, 169, 170, 0, 0,
	0, 124, 87, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 424, 425, 422, 423, 461, 462,
	503, 504, 505, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 0, 479, 418, 0, 490, 491, 0, 483, 0,
	0, 0, 0, 409, 412, 413, 414, 419, 0, 0,
	465, 467, 488, 487, 486, 0, 492, 508, 507, 509,
	0, 0, 0, 456, 0, 457, 0, 0, 0, 0,
	0, 464, 79, 0, 110, 512, 135, 97, 162, 498,
	482, 0, 450, 500, 428, 442, 511, 443, 444, 475,
	415, 460, 127, 440, 0, 431, 406, 437, 407, 429,
	452, 95, 455, 427, 484, 463, 109, 0, 506, 111,
	470, 0, 144, 120, 0, 0, 454, 489, 458, 480,
	449, 476, 421, 469, 501, 441, 473, 502, 0, 0,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 472, 497, 439, 474, 405, 471, 0,
	410, 416, 510, 495, 434, 435, 0, 0, 0, 0,
	0, 0, 0, 453, 459, 477, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 0, 468, 0, 0,
	0, 417, 411, 0, 451, 0, 0, 0, 420, 0,
	433, 478, 0, 404, 481, 493, 448, 207, 496, 446,
	445, 499, 133, 0, 0, 147, 100, 99, 108, 485,
	430, 438, 91, 436, 139, 129, 159, 466, 130, 138,
	112, 151, 134, 158, 208, 166, 149, 165, 80, 148,
	157, 89, 141, 82, 155, 146, 118, 104, 105, 81,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	85, 164, 84, 86, 163, 125, 150, 156, 119, 116,
	83, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 408, 0, 145, 161, 174,
	426, 494, 167, 168, 169, 170, 0, 0, 0, 124,
	87, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 424, 425, 422, 423, 461, 462, 503, 504,
	505, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 0,
	479, 418, 0, 490, 491, 0, 483, 0, 0, 0,
	0, 409, 412, 413, 414, 419, 0, 0, 465, 467,
	488, 487, 486, 0, 492, 508, 507, 509, 0, 0,
	0, 456, 0, 457, 0, 0, 0, 0, 0, 464,
	79, 0, 110, 512, 135, 97, 162, 498, 482, 0,
	450, 500, 428, 442, 511, 443, 444, 475, 415, 460,
	127, 440, 0, 431, 406, 437, 407, 429, 452, 95,
	455, 427, 484, 463, 109, 0, 506, 111, 470, 0,
	144, 120, 0, 0, 454, 489, 458, 480, 449, 476,
	421, 469, 501, 441, 473, 502, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 472, 497, 439, 474, 405, 471, 0, 410, 416,
	510, 495, 434, 435, 0, 0, 0, 0, 0, 0,
	0, 453, 459, 477, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 468, 0, 0, 0, 417,
	411, 0, 451, 0, 0, 0, 420, 0, 433, 478,
	0, 404, 481, 493, 448, 207, 496, 446, 445, 499,
	133, 0, 0, 147, 100, 99, 108, 485, 430, 438,
	91, 436, 139, 129, 159, 466, 130, 138, 112, 151,
	134, 158, 208, 166, 149, 165, 80, 148, 157, 89,
	141, 82, 155, 146, 118, 104, 105, 81, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 85, 164,
	84, 402, 163, 125, 150, 156, 119, 116, 83, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 408, 0, 145, 161, 174, 426, 494,
	167, 168, 169, 170, 0, 0, 0, 403, 401, 103,
	142, 106, 113, 136, 172, 128, 140, 90, 160, 143,
	424, 425, 422, 423, 461, 462, 503, 504, 505, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 0, 479, 418,
	0, 490, 491, 0, 483, 0, 0, 0, 0, 409,
	412, 413, 414, 419, 0, 0, 465, 467, 488, 487,
	486, 0, 492, 508, 507, 509, 0, 0, 0, 456,
	0, 457, 0, 0, 0, 0, 0, 464, 79, 0,
	110, 512, 135, 97, 162, 498, 482, 0, 450, 500,
	428, 442, 511, 443, 444, 475, 415, 460, 127, 440,
	0, 431, 406, 437, 407, 429, 452, 95, 455, 427,
	484, 463, 109, 0, 506, 111, 470, 0, 144, 120,
	0, 0, 454, 489, 458, 480, 449, 476, 421, 469,
	501, 441, 473, 502, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 472,
	497, 439, 474, 405, 471, 0, 410, 416, 510, 495,
	434, 435, 0, 0, 0, 0, 0, 0, 0, 453,
	459, 477, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 432, 0, 468, 0, 0, 0, 417, 411, 0,
	451, 0, 0, 0, 420, 0, 433, 478, 0, 404,
	481, 493, 448, 207, 496, 446, 445, 499, 133, 0,
	0, 147, 100, 99, 108, 485, 430, 438, 91, 436,
	139, 129, 159, 466, 130, 138, 112, 151, 134, 158,
	208, 166, 149, 165, 80, 148, 157, 89, 141, 82,
	155, 146, 118, 104, 105, 81, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 85, 164, 84, 86,
	163, 125, 150, 156, 119, 116, 83, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 408, 0, 145, 161, 174, 426, 494, 167, 168,
	169, 170, 0, 0, 0, 124, 87, 103, 142, 106,
	113, 136, 172, 128, 140, 90, 160, 143, 424, 425,
	422, 423, 461, 462, 503, 504, 505, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 0, 479, 418, 0, 490,
	491, 0, 483, 0, 0, 0, 0, 409, 412, 413,
	414, 419, 0, 0, 465, 467, 488, 487, 486, 0,
	492, 508, 507, 509, 0, 0, 0, 456, 0, 457,
	0, 0, 0, 0, 0, 464, 79, 0, 110, 512,
	135, 97, 162, 498, 482, 0, 450, 500, 428, 442,
	511, 443, 444, 475, 415, 460, 127, 440, 0, 431,
	406, 437, 407, 429, 452, 95, 455, 427, 484, 463,
	109, 0, 506, 111, 470, 0, 144, 120, 0, 0,
	454, 489, 458, 480, 449, 476, 421, 469, 501, 441,
	473, 502, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 472, 497, 439,
	474, 405, 471, 0, 410, 416, 510, 495, 434, 435,
	0, 0, 0, 0, 0, 0, 0, 453, 459, 477,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 432,
	0, 468, 0, 0, 0, 417, 411, 0, 451, 0,
	0, 0, 420, 0, 433, 478, 0, 404, 481, 493,
	448, 207, 496, 446, 445, 499, 133, 0, 0, 147,
	100, 99, 108, 485, 430, 438, 91, 436, 139, 129,
	159, 466, 130, 138, 112, 151, 134, 158, 208, 166,
	149, 165, 80, 148, 750, 89, 141, 82, 155, 146,
	118, 104, 105, 81, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 85, 164, 84, 402, 163, 125,
	150, 156, 119, 116, 83, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 408,
	0, 145, 161, 174, 426, 494, 167, 168, 169, 170,
	0, 0, 0, 403, 401, 103, 142, 106, 113, 136,
	172, 128, 140, 90, 160, 143, 424, 425, 422, 423,
	461, 462, 503, 504, 505, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 0, 479, 418, 0, 490, 491, 0,
	483, 0, 0, 0, 0, 409, 412, 413, 414, 419,
	0, 0, 465, 467, 488, 487, 486, 0, 492, 508,
	507, 509, 0, 0, 0, 456, 0, 457, 0, 0,
	0, 0, 0, 464, 79, 0, 110, 512, 135, 97,
	162, 498, 482, 0, 450, 500, 428, 442, 511, 443,
	444, 475, 415, 460, 127, 440, 0, 431, 406, 437,
	407, 429, 452, 95, 455, 427, 484, 463, 109, 0,
	506, 111, 470, 0, 144, 120, 0, 0, 454, 489,
	458, 480, 449, 476, 421, 469, 501, 441, 473, 502,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 472, 497, 439, 474, 405,
	471, 0, 410, 416, 510, 495, 434, 435, 0, 0,
	0, 0, 0, 0, 0, 453, 459, 477, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 432, 0, 468,
	0, 0, 0, 417, 411, 0, 451, 0, 0, 0,
	420, 0, 433, 478, 0, 404, 481, 493, 448, 207,
	496, 446, 445, 499, 133, 0, 0, 147, 100, 99,
	108, 485, 430, 438, 91, 436, 139, 129, 159, 466,
	130, 138, 112, 151, 134, 158, 208, 166, 149, 165,
	80, 148, 393, 89, 141, 82, 155, 146, 118, 104,
	105, 81, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 85, 164, 84, 402, 163, 125, 150, 156,
	119, 116, 83, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 408, 0, 145,
	161, 174, 426, 494, 167, 168, 169, 170, 0, 0,
	0, 403, 401, 396, 395, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 424, 425, 422, 423, 461, 462,
	503, 504, 505, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 0, 479, 418, 0, 490, 491, 0, 483, 0,
	0, 0, 0, 409, 412, 413, 414, 419, 0, 0,
	465, 467, 488, 487, 486, 0, 492, 508, 507, 509,
	0, 0, 0, 456, 0, 457, 0, 0, 0, 0,
	0, 464, 79, 0, 110, 512, 135, 97, 162, 127,
	0, 0, 915, 0, 296, 0, 0, 0, 95, 0,
	293, 0, 0, 109, 0, 338, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 294, 316,
	315, 318, 319, 320, 321, 0, 0, 88, 317, 336,
	322, 323, 324, 0, 0, 291, 307, 0, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 305,
	287, 0, 0, 0, 349, 0, 306, 0, 0, 302,
	303, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 347, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 208, 166, 149, 165, 80, 148, 157, 89, 141,
	82, 155, 146, 118, 104, 105, 81, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 85, 164, 84,
	86, 163, 125, 150, 156, 119, 116, 83, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 87, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 339,
	348, 345, 346, 343, 344, 342, 341, 340, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 0, 350, 330, 331,
	332, 333, 335, 0, 0, 0, 0, 0, 363, 364,
	365, 366, 367, 368, 369, 362, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 351, 352, 353, 354, 355,
	356, 357, 358, 361, 359, 360, 334, 79, 0, 110,
	171, 135, 97, 162, 127, 0, 0, 0, 0, 296,
	0, 0, 0, 95, 0, 293, 0, 0, 109, 0,
	338, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 0, 281, 294, 316, 315, 318, 319, 320, 321,
	0, 0, 88, 317, 336, 322, 323, 324, 0, 0,
	291, 307, 0, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 349,
	0, 306, 0, 0, 302, 303, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 347, 0, 133, 0, 0, 147, 100, 99,
	108, 0, 0, 0, 91, 0, 139, 129, 159, 0,
	130, 138, 112, 151, 134, 158, 208, 166, 149, 165,
	80, 148, 157, 89, 141, 82, 155, 146, 118, 104,
	105, 81, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 85, 164, 84, 86, 163, 125, 150, 156,
	119, 116, 83, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 87, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 339, 348, 345, 346, 343, 344,
	342, 341, 340, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 0, 350, 330, 331, 332, 333, 335, 0, 0,
	0, 0, 0, 363, 364, 365, 366, 367, 368, 369,
	362, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	351, 352, 353, 354, 355, 356, 357, 358, 361, 359,
	360, 334, 79, 0, 110, 171, 135, 97, 162, 127,
	0, 0, 0, 0, 296, 0, 0, 0, 95, 0,
	293, 0, 0, 109, 0, 338, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 0, 0, 294, 316,
	315, 318, 319, 320, 321, 0, 0, 88, 317, 336,
	322, 323, 324, 0, 0, 291, 307, 0, 337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 305,
	287, 0, 0, 0, 349, 0, 306, 0, 0, 302,
	303, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 347, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 208, 166, 149, 165, 80, 148, 157, 89, 141,
	82, 155, 146, 118, 104, 105, 81, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 85, 164, 84,
	86, 163, 125, 150, 156, 119, 116, 83, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 87, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 339,
	348, 345, 346, 343, 344, 342, 341, 340, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 0, 350, 330, 331,
	332, 333, 335, 0, 0, 0, 0, 0, 363, 364,
	365, 366, 367, 368, 369, 362, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 351, 352, 353, 354, 355,
	356, 357, 358, 361, 359, 360, 334, 79, 0, 110,
	171, 135, 97, 162, 127, 0, 0, 0, 0, 296,
	0, 0, 0, 95, 0, 293, 0, 0, 109, 0,
	338, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	328, 329, 0, 0, 0, 0, 0, 0, 1029, 0,
	48, 0, 0, 294, 316, 315, 318, 319, 320, 321,
	0, 0, 88, 317, 336, 322, 323, 324, 0, 0,
	291, 307, 0, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 349,
	0, 306, 0, 0, 302, 303, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 347, 0, 133, 0, 0, 147, 100, 99,
	108, 0, 0, 0, 91, 0, 139, 129, 159, 0,
	130, 138, 112, 151, 134, 158, 208, 166, 149, 165,
	80, 148, 157, 89, 141, 82, 155, 146, 118, 104,
	105, 81, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 85, 164, 84, 86, 163, 125, 150, 156,
	119, 116, 83, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 87, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 339, 348, 345, 346, 343, 344,
	342, 341, 340, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 0, 350, 330, 331, 332, 333, 335, 0, 0,
	0, 0, 0, 363, 364, 365, 366, 367, 368, 369,
	362, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	351, 352, 353, 354, 355, 356, 357, 358, 361, 359,
	360, 334, 79, 23, 110, 171, 135, 97, 162, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	296, 0, 0, 0, 95, 0, 293, 0, 0, 109,
	0, 338, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 294, 316, 315, 318, 319, 320,
	321, 0, 0, 88, 317, 336, 322, 323, 324, 0,
	0, 291, 307, 0, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	349, 0, 306, 0, 0, 302, 303, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 347, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 208, 166, 149,
	165, 80, 148, 157, 89, 141, 82, 155, 146, 118,
	104, 105, 81, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 85, 164, 84, 86, 163, 125, 150,
	156, 119, 116, 83, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 87, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 339, 348, 345, 346, 343,
	344, 342, 341, 340, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 0, 350, 330, 331, 332, 333, 335, 0,
	0, 0, 0, 0, 363, 364, 365, 366, 367, 368,
	369, 362, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 351, 352, 353, 354, 355, 356, 357, 358, 361,
	359, 360, 334, 79, 0, 110, 663, 135, 97, 162,
	127, 0, 0, 0, 0, 296, 0, 0, 0, 95,
	0, 293, 0, 0, 109, 0, 338, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 0, 0, 294,
	316, 315, 318, 319, 320, 321, 0, 0, 88, 317,
	336, 322, 323, 324, 0, 0, 291, 307, 0, 337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	305, 0, 0, 0, 0, 349, 0, 306, 0, 0,
	302, 303, 308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 347, 0,
	133, 0, 0, 147, 100, 99, 108, 0, 0, 0,
	91, 0, 139, 129, 159, 0, 130, 138, 112, 151,
	134, 158, 208, 166, 149, 165, 80, 148, 157, 89,
	141, 82, 155, 146, 118, 104, 105, 81, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 85, 164,
	84, 86, 163, 125, 150, 156, 119, 116, 83, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 0, 0, 145, 161, 174, 0, 0,
	167, 168, 169, 170, 0, 0, 0, 124, 87, 103,
	142, 106, 113, 136, 172, 128, 140, 90, 160, 143,
	339, 348, 345, 346, 343, 344, 342, 341, 340, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 0, 350, 330,
	331, 332, 333, 335, 0, 0, 0, 0, 0, 573,
	574, 575, 576, 577, 581, 582, 586, 587, 595, 594,
	593, 596, 597, 599, 598, 600, 578, 579, 580, 583,
	584, 585, 588, 589, 592, 590, 591, 334, 79, 0,
	110, 171, 135, 97, 162, 127, 0, 0, 0, 0,
	296, 0, 0, 0, 95, 0, 293, 0, 0, 109,
	0, 338, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 294, 316, 315, 318, 319, 320,
	321, 0, 0, 88, 317, 336, 322, 323, 324, 0,
	0, 291, 307, 0, 337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	349, 0, 306, 0, 0, 302, 303, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 347, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 208, 166, 149,
	165, 80, 148, 157, 89, 141, 82, 155, 146, 118,
	104, 105, 81, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 85, 164, 84, 86, 163, 125, 150,
	156, 119, 116, 83, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 87, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 339, 348, 345, 346, 343,
	344, 342, 341, 340, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 0, 350, 330, 331, 332, 333, 335, 0,
	0, 0, 0, 0, 363, 364, 365, 366, 367, 368,
	369, 362, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 351, 352, 353, 354, 355, 356, 357, 358, 361,
	359, 360, 334, 79, 127, 110, 171, 135, 97, 162,
	0, 0, 0, 95, 0, 0, 0, 0, 109, 0,
	338, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 0, 0, 294, 316, 315, 318, 319, 320, 321,
	0, 0, 88, 317, 336, 322, 323, 324, 0, 0,
	0, 307, 0, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 349,
	0, 306, 0, 0, 302, 303, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 347, 0, 133, 0, 0, 147, 100, 99,
	108, 0, 0, 0, 91, 0, 139, 129, 159, 1608,
	130, 138, 112, 151, 134, 158, 208, 166, 149, 165,
	80, 148, 157, 89, 141, 82, 155, 146, 118, 104,
	105, 81, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 85, 164, 84, 86, 163, 125, 150, 156,
	119, 116, 83, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 87, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 339, 348, 345, 346, 343, 344,
	342, 341, 340, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 0, 350, 330, 331, 332, 333, 335, 0, 0,
	0, 0, 0, 363, 364, 365, 366, 367, 368, 369,
	362, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	351, 352, 353, 354, 355, 356, 357, 358, 361, 359,
	360, 334, 79, 127, 110, 171, 135, 97, 162, 0,
	0, 0, 95, 0, 0, 0, 0, 109, 0, 338,
	111, 0, 0, 144, 120, 0, 0, 0, 0, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 294, 316, 315, 318, 319, 320, 321, 0,
	0, 88, 317, 336, 322, 323, 324, 0, 0, 0,
	307, 0, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 349, 0,
	306, 0, 0, 302, 303, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 347, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 208, 166, 149, 165, 80,
	148, 157, 89, 141, 82, 155, 146, 118, 104, 105,
	81, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 85, 164, 84, 86, 163, 125, 150, 156, 119,
	116, 83, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 145, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	124, 87, 103, 142, 106, 113, 136, 172, 128, 140,
	90, 160, 143, 339, 348, 345, 346, 343, 344, 342,
	341, 340, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	0, 350, 330, 331, 332, 333, 335, 0, 0, 0,
	0, 0, 363, 364, 365, 366, 367, 368, 369, 362,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 351,
	352, 353, 354, 355, 356, 357, 358, 361, 359, 360,
	334, 79, 0, 110, 171, 135, 97, 162, 127, 0,
	0, 0, 612, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 109, 0, 0, 111, 0, 0, 144, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 613, 0, 616,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 609, 608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	208, 166, 149, 165, 80, 148, 157, 89, 141, 82,
	155, 146, 118, 104, 105, 81, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 85, 164, 84, 86,
	163, 125, 150, 156, 119, 116, 83, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 145, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 124, 87, 103, 142, 106,
	113, 136, 172, 128, 140, 90, 160, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 244, 245,
	246, 247, 251, 252, 256, 257, 265, 264, 263, 266,
	267, 269, 268, 270, 248, 249, 250, 253, 254, 255,
	258, 259, 262, 260, 261, 0, 79, 0, 110, 171,
	135, 97, 162, 127, 0, 0, 0, 741, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 109, 0, 0,
	111, 0, 0, 144, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 242, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 208, 166, 149, 165, 80,
	148, 157, 89, 141, 82, 155, 146, 118, 104, 105,
	81, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 85, 164, 84, 86, 163, 125, 150, 156, 119,
	116, 83, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 145, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	124, 87, 103, 142, 106, 113, 136, 172, 128, 140,
	90, 160, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 244, 245, 246, 247, 251, 252, 256,
	257, 265, 264, 263, 266, 267, 269, 268, 270, 248,
	249, 250, 253, 254, 255, 258, 259, 262, 260, 261,
	0, 79, 0, 110, 171, 135, 97, 162, 127, 0,
	0, 0, 741, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 109, 0, 0, 111, 0, 0, 144, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 242,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 739, 138, 112, 151, 134, 158,
	208, 166, 149, 165, 80, 148, 157, 89, 141, 82,
	155, 146, 118, 104, 105, 81, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 85, 164, 84, 86,
	163, 125, 150, 156, 119, 116, 83, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 145, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 124, 87, 103, 142, 106,
	113, 136, 172, 128, 140, 90, 160, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 244, 245,
	246, 247, 251, 252, 256, 257, 265, 264, 263, 266,
	267, 269, 268, 270, 248, 249, 250, 253, 254, 255,
	258, 259, 262, 260, 261, 127, 79, 0, 110, 171,
	135, 97, 162, 0, 95, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 242, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 208, 166, 149,
	165, 80, 148, 157, 89, 141, 82, 155, 146, 118,
	104, 105, 81, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 85, 164, 84, 86, 163, 125, 150,
	156, 119, 116, 83, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 87, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 244, 245, 246, 247, 251,
	252, 256, 257, 265, 264, 263, 266, 267, 269, 268,
	270, 248, 249, 250, 253, 254, 255, 258, 259, 262,
	260, 261, 127, 79, 0, 110, 171, 135, 97, 162,
	0, 95, 0, 0, 0, 0, 109, 0, 0, 111,
	0, 0, 144, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 613, 0, 616, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 208, 166, 149, 165, 80, 148,
	157, 89, 141, 82, 155, 146, 118, 104, 105, 81,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	85, 164, 84, 86, 163, 125, 150, 156, 119, 116,
	83, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 0, 0, 145, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 124,
	87, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 244, 245, 246, 247, 251, 252, 256, 257,
	265, 264, 263, 266, 267, 269, 268, 270, 248, 249,
	250, 253, 254, 255, 258, 259, 262, 260, 261, 127,
	79, 0, 110, 171, 135, 97, 162, 0, 95, 0,
	0, 0, 0, 109, 0, 0, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 625, 635, 636, 628, 629,
	630, 631, 632, 633, 634, 627, 0, 0, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 208, 166, 149, 165, 80, 148, 157, 89, 141,
	82, 155, 146, 118, 104, 105, 81, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 85, 164, 84,
	86, 163, 125, 150, 156, 119, 116, 83, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 87, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	109, 0, 0, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 79, 0, 110,
	171, 135, 97, 162, 88, 0, 0, 0, 0, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 69, 0, 0, 0, 75, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 71, 166,
	149, 165, 80, 148, 157, 89, 141, 82, 155, 146,
	118, 104, 105, 81, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 85, 164, 84, 86, 163, 125,
	150, 156, 119, 116, 83, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 0,
	0, 145, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 124, 87, 103, 142, 106, 113, 136,
	172, 128, 140, 90, 160, 143, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 110, 171, 135, 97,
	162, 48, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 208, 166, 149,
	165, 80, 148, 157, 89, 141, 82, 155, 146, 118,
	104, 105, 81, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 85, 164, 84, 86, 163, 125, 150,
	156, 119, 116, 83, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 87, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 109, 0,
	0, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 110, 663, 135, 97, 162,
	48, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 133, 0, 0, 147, 100, 99,
	108, 0, 0, 0, 91, 0, 139, 129, 159, 0,
	130, 138, 112, 151, 134, 158, 208, 166, 149, 165,
	80, 148, 157, 89, 141, 82, 155, 146, 118, 104,
	105, 81, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 85, 164, 84, 86, 163, 125, 150, 156,
	119, 116, 83, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 87, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 109, 0, 0, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 110, 663, 135, 97, 162, 77,
	0, 0, 866, 0, 0, 867, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	133, 0, 0, 147, 100, 99, 108, 0, 0, 0,
	91, 0, 139, 129, 159, 0, 130, 138, 112, 151,
	134, 158, 208, 166, 149, 165, 80, 148, 157, 89,
	141, 82, 155, 146, 118, 104, 105, 81, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 85, 164,
	84, 86, 163, 125, 150, 156, 119, 116, 83, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 0, 0, 145, 161, 174, 0, 0,
	167, 168, 169, 170, 0, 0, 0, 124, 87, 103,
	142, 106, 113, 136, 172, 128, 140, 90, 160, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 759,
	0, 0, 109, 0, 0, 111, 0, 0, 144, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 79, 758,
	110, 171, 135, 97, 162, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	208, 166, 149, 165, 80, 148, 157, 89, 141, 82,
	155, 146, 118, 104, 105, 81, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 85, 164, 84, 86,
	163, 125, 150, 156, 119, 116, 83, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 145, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 124, 87, 103, 142, 106,
	113, 136, 172, 128, 140, 90, 160, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 0, 0, 205, 0, 79, 0, 110, 171,
	135, 97, 162, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 208, 166, 149,
	165, 80, 148, 157, 89, 141, 82, 155, 146, 118,
	104, 105, 81, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 85, 164, 84, 86, 163, 125, 150,
	156, 119, 116, 83, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 87, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 109, 0, 0, 111,
	0, 0, 144, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 0,
	0, 77, 0, 79, 0, 110, 171, 135, 97, 162,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 208, 166, 149, 165, 80, 148,
	157, 89, 141, 82, 155, 146, 118, 104, 105, 81,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	85, 164, 84, 86, 163, 125, 150, 156, 119, 116,
	83, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 0, 0, 145, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 124,
	87, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 127,
	0, 0, 0, 0, 0, 0, 0, 718, 95, 0,
	0, 0, 0, 109, 0, 0, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	79, 0, 110, 171, 135, 97, 162, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 208, 166, 149, 165, 80, 148, 157, 89, 141,
	82, 155, 146, 118, 104, 105, 81, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 85, 164, 84,
	86, 163, 125, 150, 156, 119, 116, 83, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 87, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 0, 0, 388, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 110,
	171, 135, 97, 162, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 208, 166, 149,
	165, 80, 148, 157, 89, 141, 82, 155, 146, 118,
	104, 105, 81, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 85, 164, 84, 86, 163, 125, 150,
	156, 119, 116, 83, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 87, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 109, 0, 0, 111,
	0, 0, 144, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 79, 0, 110, 171, 135, 97, 162,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 207, 0, 0,
	0, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 208, 166, 149, 165, 80, 148,
	157, 89, 141, 82, 155, 146, 118, 104, 105, 81,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	85, 164, 84, 86, 163, 125, 150, 156, 119, 116,
	83, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 0, 0, 145, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 124,
	87, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 109, 0, 0, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	79, 0, 110, 171, 135, 97, 162, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 208, 166, 149, 165, 80, 148, 157, 89, 141,
	82, 155, 146, 118, 104, 105, 81, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 85, 164, 84,
	86, 163, 125, 150, 156, 119, 116, 83, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 87, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	109, 0, 0, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 0, 79, 0, 110,
	171, 135, 97, 162, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 208, 166,
	149, 165, 80, 148, 157, 89, 141, 82, 155, 146,
	118, 104, 105, 81, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 85, 164, 84, 86, 163, 125,
	150, 156, 119, 116, 83, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 0,
	0, 145, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 124, 87, 103, 142, 106, 113, 136,
	172, 128, 140, 90, 160, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 109, 0, 0,
	111, 0, 0, 144, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 79, 0, 110, 171, 135, 97,
	162, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 208, 166, 149, 165, 80,
	148, 157, 89, 141, 82, 155, 146, 118, 104, 105,
	81, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 85, 164, 84, 86, 163, 125, 150, 156, 119,
	116, 83, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 145, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	124, 87, 103, 142, 106, 113, 136, 172, 128, 140,
	90, 160, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 110, 171, 135, 97, 162,
}

var yyPact = [...]int{
	392, -1000, -223, 949, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 925, 81, -1000, -1000, -1000, -1000, -1000, -1000, 754,
	10598, 62, 114, 17, 12774, 112, 2095, 13485, -1000, 5,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 946, -1000, -1000,
	-1000, 9807, -1000, -1000, 82, 905, 919, 923, 489, 821,
	-1000, 6971, 54, 11817, 12537, 6116, -1000, 618, 106, 13485,
	-159, 13011, 45, 45, 45, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 92, 13485, -1000, 13485, 44, 604, 44,
	44, 44, 13485, -1000, 144, -1000, -1000, -1000, -1000, 13485,
	603, 856, 109, 3732, 3732, 3732, 3732, 10, 3732, -84,
	778, -1000, -1000, -1000, -1000, 3732, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 701, -1000, 742,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 925, -1000, 81, -1000, -1000, -1000, 849, 8117, 7832,
	925, -1000, 834, -1000, -1000, 329, 936, -1000, 8960, 143,
	-1000, 8117, 2305, 379, -1000, -1000, 379, -1000, -1000, 124,
	-1000, -1000, 8675, 8675, 8675, 8675, 8675, 8675, 8675, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 379, -1000, 7547, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 8117, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 12291,
	691, 845, -1000, -1000, -1000, 895, 11096, 9530, 13485, 628,
	-1000, 699, 5818, -74, -1000, -1000, -1000, 229, 11580, -1000,
	-1000, -1000, 854, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 602, -1000, 2738, 597, 3732, 66, 760,
	584, 244, 567, 13485, 13485, 3732, 60, 13485, 891, 776,
	13485, 561, 558, -1000, 5520, -1000, 3732, 3732, 3732, 3732,
	3732, 3732, 3732, 3732, -1000, -1000, -1000, -1000, -1000, -1000,
	3732, 3732, -1000, -65, -1000, 13485, -1000, 821, 9807, 379,
	13011, 919, 489, 821, -1000, 941, 172, 749, 142, 700,
	-1000, 416, 887, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 919, 11342, 788, -1000, -1000, 13485, -1000, 8117, 8117,
	484, -1000, 10084, -1000, -1000, -1000, -1000, 4328, 184, 8675,
	357, 328, 8675, 8675, 8675, 8675, 8675, 8675, 8675, 8675,
	8675, 8675, 8675, 8675, 8675, 8675, 8675, 373, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 515, -1000, 81, 816,
	816, 161, 161, 161, 161, 161, 161, 10361, 6401, 489,
	595, 7547, 207, 9807, 6971, 6971, 8117, 8117, 13248, 13248,
	6971, 900, -43, 234, 207, 13248, -1000, 403, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6971, 6971, 6971, 6971, 403,
	403, 6971, 6971, 6971, 6971, 6971, 403, 403, 403, 403,
	900, 900, 6971, 6971, 6971, 900, 6971, 6971, 900, 6971,
	6971, 6971, 6971, 900, 6971, 6971, 6971, 25, 13485, -1000,
	13248, 11817, 11817, 11817, 11817, 11817, 11817, -1000, 804, 803,
	-1000, 793, 792, 815, 9807, -1000, 591, 11096, 131, 379,
	-1000, 9807, 25, 678, 11817, 13485, -1000, -1000, 5222, 699,
	-74, 694, -1000, -94, -120, 7256, 159, -1000, -1000, -1000,
	-1000, 3434, 193, 248, -71, -1000, -1000, -1000, 709, -1000,
	709, 709, 709, 709, -25, -25, -25, -25, -1000, -1000,
	-1000, -1000, -1000, 752, 747, -1000, 709, 709, 709, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 740, 740, 740, 728, 728,
	762, -1000, 13485, -209, 502, 3732, 890, 3732, -1000, 126,
	-1000, 13485, -1000, -1000, 13485, 3732, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 292, -1000, -1000, -1000, 900, -1000, -1000, 480, 138,
	849, -1000, 900, -1000, 805, 8117, 8117, 4924, 7832, -1000,
	-1000, -1000, -1000, 849, 916, -1000, 839, 837, 6971, -1000,
	-1000, 184, 194, -1000, -1000, 336, -1000, -1000, -1000, -1000,
	137, 379, -1000, 1958, -1000, -1000, -1000, -1000, 357, 8675,
	8675, 8675, 378, 1958, 1935, 509, 598, 161, 188, 188,
	155, 155, 155, 155, 155, 464, 464, -1000, -1000, -1000,
	403, -1000, -1000, -1000, 403, 6971, 696, -1000, -1000, 8117,
	-1000, 489, 582, 582, 431, 631, 736, -1000, 136, 733,
	582, 6971, 935, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 315, -1000, 8117, 403, -1000, 582,
	403, 582, 582, -170, -170, 403, 582, 403, 582, 582,
	-170, -170, -170, -170, 6971, 6971, 582, 582, 582, 6971,
	582, 582, 6971, 582, 582, 582, 582, 6971, 582, 582,
	582, 89, 379, -1000, 702, -1000, 227, 845, 767, 767,
	775, 942, -1000, -1000, -1000, -1000, 791, -1000, 790, -1000,
	-1000, -1000, -1000, -1000, 105, 103, 101, 13011, -1000, 932,
	11817, 664, -1000, -1000, 694, -74, -99, -1000, -1000, -1000,
	207, -1000, 491, 688, 3136, -1000, -1000, -1000, -1000, -1000,
	-1000, 735, 878, 160, 203, 438, -1000, -1000, 866, -1000,
	254, -75, -1000, -1000, 374, -25, -25, -1000, -1000, 159,
	851, 159, 159, 159, 397, 397, -1000, -1000, -1000, -1000,
	365, -1000, -1000, -1000, 356, -1000, 773, 13011, 3732, -1000,
	4626, -1000, -1000, -1000, -1000, -1000, -1000, 801, 369, 288,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 24, -1000, 3732, -1000, 296, 13485, 13485, 788, 894,
	13011, 13011, -1000, 825, 207, 207, 133, -1000, -1000, 13485,
	-1000, -1000, -1000, -1000, 633, -1000, -1000, -1000, 4030, 6971,
	-1000, 378, 1958, 1842, -1000, 8675, 8675, -1000, -1000, 582,
	6971, 207, 925, -1000, -1000, 48, 373, 48, 8675, 8675,
	4924, 8675, 8675, -204, 698, 8117, 195, -1000, 8117, 366,
	-1000, -1000, -1000, -1000, -1000, -1000, 12054, -1000, -170, -170,
	-170, -170, -170, -1000, -1000, -1000, -1000, 582, 582, -170,
	-170, -170, 582, -170, -170, 582, -170, -170, -170, -170,
	582, -170, -170, -170, 772, 13248, 379, 949, 10847, 13011,
	925, 13248, 8117, 8117, -1000, -1000, 8117, 729, -1000, -1000,
	8117, -1000, -1000, -1000, 379, 379, 379, 475, -1000, 925,
	664, -1000, -1000, -1000, -117, -126, -1000, -1000, 3434, -1000,
	3434, 13011, -1000, 430, 426, -1000, -1000, 765, 91, -1000,
	-1000, -1000, 599, 159, 159, -1000, 206, -1000, -1000, -1000,
	574, -1000, 514, 687, 501, 13485, -1000, -1000, 686, -1000,
	225, -1000, -1000, 13011, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13011, 13485, -1000, -1000,
	-1000, -1000, -1000, 13011, -1000, -1000, 395, 8117, -1000, -1000,
	6971, 379, 128, -1000, -1000, 4626, -1000, 932, 929, 11817,
	-1000, -1000, 403, -1000, 8675, 1958, 1958, -1000, -1000, 403,
	709, 709, -1000, 709, 728, -1000, 709, -5, 709, -7,
	403, 403, 1596, 1538, -1000, 570, 1024, 379, -168, 563,
	-1000, 207, 8117, -1000, 157, -1000, -1000, -1000, -1000, -1000,
	-170, -170, -1000, -1000, -1000, -1000, -170, -1000, -1000, -170,
	-1000, -1000, -1000, -1000, -170, -1000, -1000, -1000, -1000, 880,
	663, 679, -1000, -1000, 6686, 489, 480, 475, 919, -1000,
	207, 207, 207, 13011, 207, 13011, 13011, 13011, 9245, 13011,
	919, -1000, -1000, -1000, -1000, 3136, -1000, 469, -1000, 709,
	-1000, -1000, -55, 940, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -25, 393, -25, 355, -1000,
	353, 3732, 4626, 3434, -1000, 605, -1000, -1000, -1000, -1000,
	882, -1000, 207, 673, -1000, 13011, 929, 927, 922, 664,
	-1000, 1958, -1000, -1000, 96, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8675, 8675, -1000, 8675, 8675, 8675,
	403, 384, -1000, 207, 403, 921, -1000, -1000, -1000, -1000,
	-1000, 873, -1000, 379, -1000, 925, 90, -1000, -1000, 460,
	-1000, 456, 456, 456, 131, -1000, -1000, 127, 13011, -1000,
	150, -1000, -130, 159, -1000, 159, 575, 564, -1000, -1000,
	-1000, 13011, 379, 11817, -1000, 927, -1000, 7832, 7832, 929,
	-1000, -1000, 1771, 1771, 1771, 1771, 14, -1000, -1000, -1000,
	8117, 939, -1000, 379, 949, 81, 13011, -1000, -1000, -1000,
	-1000, -1000, 127, -1000, 412, 199, 377, -1000, 330, 871,
	-1000, 869, -1000, -1000, -1000, -1000, -1000, 437, 20, 664,
	-1000, -1000, 207, -1000, 681, -1000, 207, -1000, 927, -1000,
	-1000, -1000, -1000, 403, 85, -215, 674, 13248, 679, 489,
	-1000, -1000, -1000, 349, -1000, -1000, -1000, 376, -1000, -1000,
	760, 402, -1000, 13011, 929, 7832, -1000, -1000, 817, -207,
	-218, 403, 627, 925, -1000, -1000, -209, -1000, 20, 835,
	927, -1000, -1000, 809, -1000, -1000, -1000, -1000, 21, -1000,
	-213, 18, -216, 379, -219, 8396, -1000, 1771, 403, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1177, 28, 781, 1177, 1174, 1173, 1172, 1171, 1170,
	1169, 1166, 1165, 1163, 1162, 1161, 1160, 1157, 1154, 1153,
	1152, 1151, 1150, 1149, 148, 1144, 1143, 1142, 78, 46,
	76, 1141, 1140, 44, 1446, 45, 43, 1382, 6, 1139,
	25, 1138, 1137, 81, 75, 1135, 69, 52, 57, 1134,
	79, 1133, 63, 1130, 1116, 1113, 1976, 1112, 1111, 16,
	22, 1110, 1109, 1103, 1102, 66, 403, 1101, 1100, 1097,
	1096, 1095, 1091, 1088, 1087, 54, 15, 1085, 14, 11,
	21, 1081, 127, 9, 1078, 53, 1077, 1071, 8, 5,
	1070, 13, 1067, 1064, 1063, 56, 101, 739, 70, 40,
	58, 37, 30, 62, 39, 19, 10, 77, 61, 1062,
	36, 65, 50, 1061, 1058, 427, 1055, 1051, 1049, 1048,
	1045, 1041, 190, 447, 1025, 1024, 1022, 1019, 38, 234,
	4, 1461, 844, 67, 1018, 1017, 1015, 1094, 68, 26,
	31, 1014, 27, 1358, 41, 1013, 1012, 42, 1011, 1010,
	1009, 1007, 1006, 1005, 1004, 131, 1003, 1002, 1001, 33,
	20, 1000, 999, 59, 32, 998, 997, 989, 49, 60,
	982, 48, 981, 978, 977, 975, 34, 18, 974, 17,
	973, 12, 970, 968, 3, 967, 24, 966, 2, 965,
	7, 47, 964, 963, 0, 408, 962, 955, 120,
}

var yyR1 = [...]int{
	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 6, 3, 3, 3,
	3, 41, 42, 42, 46, 46, 4, 4, 5, 5,
	7, 7, 27, 27, 8, 9, 9, 9, 196, 196,
	50, 50, 103, 103, 10, 10, 10, 10, 108, 108,
	112, 112, 112, 113, 113, 113, 113, 145, 145, 11,
	11, 11, 11, 11, 11, 11, 190, 190, 189, 188,
	188, 187, 187, 186, 16, 173, 174, 174, 174, 169,
	148, 148, 148, 148, 151, 151, 149, 149, 149, 149,
	149, 149, 149, 150, 150, 150, 150, 150, 152, 152,
	152, 152, 152, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 154, 154,
	154, 154, 154, 154, 154, 154, 168, 168, 155, 155,
	163, 163, 164, 164, 164, 161, 161, 162, 162, 165,
	165, 165, 156, 156, 156, 156, 156, 156, 156, 158,
	158, 166, 166, 159, 159, 159, 160, 160, 167, 167,
	167, 167, 167, 157, 157, 170, 170, 182, 182, 181,
	181, 181, 172, 172, 178, 178, 178, 178, 178, 171,
	171, 180, 180, 179, 175, 175, 175, 176, 176, 176,
	177, 177, 177, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 185, 183, 183, 184, 184, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	120, 120, 117, 117, 118, 118, 119, 119, 119, 121,
	121, 121, 146, 146, 146, 19, 19, 21, 21, 22,
	23, 20, 20, 20, 20, 20, 197, 24, 25, 25,
	26, 26, 26, 30, 30, 30, 28, 28, 29, 29,
	35, 35, 34, 34, 36, 36, 36, 36, 96, 96,
	96, 97, 97, 134, 134, 134, 133, 133, 133, 133,
	39, 39, 40, 40, 43, 43, 44, 44, 44, 58,
	58, 102, 102, 104, 104, 45, 45, 45, 45, 45,
	47, 47, 48, 48, 49, 49, 141, 141, 140, 140,
	140, 139, 139, 139, 51, 51, 55, 53, 52, 52,
	52, 52, 54, 54, 57, 57, 56, 56, 59, 59,
	59, 59, 60, 60, 37, 37, 37, 37, 37, 37,
	37, 116, 116, 62, 62, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 74, 74, 74, 74, 74,
	74, 63, 63, 63, 63, 63, 63, 63, 33, 33,
	75, 75, 75, 82, 76, 76, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 70,
	70, 70, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 69, 69, 69, 69,
	69, 69, 69, 69, 198, 198, 71, 71, 71, 71,
	31, 31, 31, 31, 31, 144, 144, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	86, 86, 32, 32, 84, 84, 85, 87, 87, 83,
	83, 83, 65, 65, 65, 65, 65, 65, 65, 65,
	67, 67, 67, 88, 88, 77, 77, 38, 38, 89,
	89, 90, 90, 91, 91, 92, 92, 95, 95, 98,
	98, 98, 99, 99, 99, 99, 100, 100, 100, 64,
	64, 64, 64, 64, 64, 101, 101, 101, 101, 105,
	105, 78, 78, 80, 80, 79, 81, 106, 106, 110,
	107, 107, 111, 111, 111, 109, 109, 109, 136, 136,
	136, 114, 114, 122, 122, 123, 123, 115, 115, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 125,
	125, 125, 126, 126, 127, 127, 127, 135, 135, 131,
	131, 132, 132, 137, 137, 138, 138, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	194, 195, 142, 143, 143, 143, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 93, 93,
	93, 93, 93, 93, 93, 93, 93,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 6, 7, 5, 10, 9, 11,
	12, 2, 1, 3, 3, 6, 1, 3, 1, 3,
	7, 8, 1, 1, 8, 8, 7, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 6, 4, 2, 4, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 2, 4,
	7, 0, 1, 0, 1, 2, 1, 1, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 1, 1, 4,
	5, 6, 6, 6, 5, 5, 5, 6, 5, 5,
	6, 5, 5, 5, 5, 6, 5, 5, 5, 4,
	4, 5, 5, 5, 5, 5, 4, 4, 4, 4,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 6, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 1, 3, 1, 1, 0,
	2, 1, 1, 0, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -194, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 142, 118, 135, 50, 154, 155,
	157, 158, 25, 136, 137, 140, 141, -41, 54, 8,
	256, 299, -193, 303, -26, 5, -91, 15, -2, -24,
	-197, -24, -24, -24, -24, -24, -173, 54, -127, 123,
	72, 150, 229, 120, 121, 127, -131, 57, -129, 296,
	154, 165, 159, 186, 178, 176, 179, 216, 66, 157,
	225, 138, 174, 170, 168, 27, 191, 301, 169, 133,
	132, 192, 196, 217, 163, 164, 219, 190, 134, 32,
	298, 35, 146, 220, 194, 189, 185, 188, 162, 184,
	39, 198, 197, 199, 215, 181, 171, 18, 223, 141,
	144, 193, 195, 128, 148, 300, 221, 167, 145, 140,
	224, 158, 218, 227, 38, 203, 161, 131, 155, 152,
	182, 147, 172, 173, 187, 160, 183, 156, 149, 142,
	226, 204, 302, 180, 177, 153, 151, 208, 209, 210,
	211, 299, 222, 175, 205, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, -115, 123, 125, 121, 121, 122, 123,
	229, 120, 121, -56, -137, 57, -129, 123, 150, 121,
	108, 179, 114, 206, 122, 32, 148, -146, 121, -117,
	151, 208, 209, 210, 211, 57, 218, 217, 212, -137,
	156, -142, -142, -142, -142, -142, 6, -42, -46, -139,
	-137, -130, 59, 267, 268, 269, 270, 271, 284, 285,
	286, 272, 273, 287, 288, 289, 274, 275, 290, 291,
	293, 294, 292, 278, 277, 276, 279, 280, 282, 281,
	283, -5, -3, -194, 6, 20, 21, -99, 17, 16,
	-195, 56, -30, 40, 41, -25, -36, 99, -37, -137,
	-61, 74, -66, 29, 57, -129, 23, -65, -62, -83,
	-81, -82, 108, 109, 97, 98, 105, 75, 110, -70,
	-68, -69, -71, -72, -73, 59, 58, 67, 60, 61,
	62, 63, 69, 70, 71, -131, -79, -194, 44, 45,
	257, 258, 259, 260, 295, 261, 68, 77, 34, 228,
	236, 235, 234, 232, 233, 230, 231, 126, 229, 103,
	256, 284, 285, 286, 287, 288, 289, 290, 291, 293,
	294, 292, 274, 267, 268, 269, 270, 271, 272, 273,
	275, 276, 277, 278, 279, 280, 281, 282, 283, -115,
	-40, -43, -44, -45, -58, -82, -194, -56, 11, -50,
	-56, -107, -145, 156, -111, 218, 217, -132, -109, -131,
	-128, 216, 179, 215, 119, 73, 22, 24, 201, 267,
	76, 108, 268, 269, 270, 16, 77, 107, 257, 271,
	114, 48, 230, 231, 228, 229, 206, 29, 10, 25,
	136, 21, 101, 116, 80, 81, 139, 23, 137, 71,
	19, 51, 11, 13, 14, 126, 125, 92, 122, 46,
	8, 110, 26, 89, 42, 28, 287, 289, 44, 90,
	17, 232, 233, 31, 295, 274, 143, 275, 103, 49,
	36, 74, 69, 52, 72, 15, 47, 91, 117, 256,
	45, 120, 6, 262, 30, 135, 278, 277, 276, 43,
	259, 260, 280, 121, 207, 79, 124, 70, 5, 127,
	9, 50, 53, 234, 235, 236, 34, 282, 281, 283,
	78, 12, 299, -174, -169, 57, 122, -56, 256, -131,
	-123, 126, -123, -123, 121, -56, -56, -122, 126, 57,
	-122, -122, -122, -56, 111, -56, 57, 30, 229, 57,
	148, 121, 149, 123, -143, -194, -132, -143, -143, -143,
	152, 153, -143, -118, 213, 52, -143, -24, 55, 22,
	-194, -91, -2, -24, -100, 19, 31, -37, -137, -92,
	-95, -37, -130, 267, 268, 269, 270, 271, 284, 285,
	286, 272, 273, 287, 288, 289, 274, 275, 290, 291,
	293, 294, 292, 278, 277, 276, 279, 280, 282, 281,
	283, -91, 36, -28, 21, 65, 11, -134, 73, 72,
	89, -133, 22, 57, -129, -130, 59, 111, -37, -63,
	92, 74, 90, 91, 76, 94, 93, 104, 97, 98,
	99, 100, 101, 102, 103, 95, 96, 107, 82, 83,
	84, 85, 86, 87, 88, -116, -194, -82, -194, 112,
	113, -66, -66, -66, -66, -66, -66, -66, -194, -2,
	-76, -194, -37, 299, -194, -194, -194, -194, -194, -194,
	-194, -194, -194, -86, -37, -194, -198, -194, -198, -198,
	-198, -198, -198, -198, -198, -194, -194, -194, -194, -194,
	-194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
	-194, -194, -194, -194, -194, -194, -194, -194, -194, -194,
	-194, -194, -194, -194, -194, -194, -194, -57, 26, -56,
	30, 55, -51, -55, -53, -52, -54, 42, 46, 48,
	43, 44, 45, 49, -141, 22, -40, -194, -140, 144,
	-139, 22, -56, -50, -196, 55, 11, 53, 55, -107,
	156, -108, -112, 219, 221, 82, -136, -131, 59, 29,
	30, 56, 55, -148, -151, -153, -152, -154, -149, -150,
	176, 177, 108, 180, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 30, 138, 172, 173, 174, 175,
	192, 193, 194, 195, 196, 197, 198, 199, 159, 160,
	161, 162, 163, 164, 165, 167, 168, 169, 170, 171,
	57, -143, 123, -190, 53, 57, 74, 57, -56, -56,
	-143, 124, -56, 23, 52, -56, 57, 57, -138, -137,
	-128, -143, -143, -143, -143, -143, -143, -143, -143, -143,
	-143, -120, 207, 214, -56, -30, -46, -82, -101, -131,
	-99, -195, -30, 9, 92, 55, 18, 111, 55, -98,
	24, 25, -98, -99, -67, -131, 60, 63, -29, 43,
	-56, -37, -37, -74, 69, 74, 70, 71, -133, 99,
	-138, -132, -128, -66, -75, -79, -82, 64, 92, 90,
	91, 76, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -144, 57, 59,
	57, -65, -65, -131, -35, 21, -34, -36, -195, 55,
	-195, -2, -34, -34, -37, -37, -83, -131, -137, -83,
	-34, -28, -94, -93, 238, 239, 240, 241, 243, 244,
	245, 248, 249, 253, 254, 237, 255, 242, 247, 250,
	251, 252, 246, 175, -84, -85, 78, -83, -195, -34,
	-35, -34, -34, -195, -195, -36, -34, -36, -34, -34,
	-195, -195, -195, -195, -28, -28, -34, -34, -34, -28,
	-34, -34, -28, -34, -34, -34, -34, -28, -34, -34,
	-34, -103, 144, -56, -106, -110, -83, -43, -44, -44,
	-44, -43, -44, 42, 42, 42, 47, 42, 47, 42,
	-52, -139, -195, -59, 50, 125, 51, -194, -139, -103,
	53, -40, -56, -111, -108, 55, 220, 222, 223, 52,
	-37, -160, 107, -175, -176, -177, -132, 59, 60, -169,
	-170, -178, 128, 131, 127, -171, 122, 28, -165, 69,
	74, -161, 204, -155, 54, -155, -155, -155, -155, -159,
	179, -159, -159, -159, 54, 54, -155, -155, -155, -163,
	54, -163, -163, -164, 54, -164, -135, 53, -56, -188,
	299, -189, 57, -143, 23, -143, -124, 119, 116, 117,
	-185, 115, 201, 179, 66, 29, 15, 257, 144, 302,
	57, 145, -56, -56, -143, -119, 11, 92, -28, -195,
	55, 111, -100, 38, -37, -37, -138, -95, -100, -114,
	19, 11, 34, 34, -34, 69, 70, 71, 111, -194,
	-75, -66, -66, -66, -33, 139, 73, -195, -195, -34,
	55, -37, -195, -195, -195, 55, 53, 22, 55, 11,
	111, 55, 11, -195, -34, 11, -87, -85, 80, -37,
	-195, -195, -195, -195, -195, -96, 263, -96, -195, -195,
	-195, -195, -195, -96, -96, -96, -96, -34, -34, -195,
	-195, -195, -34, -195, -195, -34, -195, -195, -195, -195,
	-34, -195, -195, -195, -64, 30, 34, -2, -194, -194,
	-60, 55, 12, 82, -48, -47, 52, 53, -48, -49,
	52, -47, 42, 42, 122, 122, 122, -104, -131, -60,
	-40, -60, -112, -113, 224, 221, 227, 57, 55, -177,
	82, 54, 28, -171, -171, 57, 57, -156, 29, 69,
	-162, 205, 60, -159, -159, -160, 30, -160, -160, -160,
	-168, 59, -168, 60, 60, 52, -131, -143, -187, -186,
	-132, -142, -191, 150, 129, 130, 133, 132, 57, 122,
	28, 128, 131, 144, 127, -191, 150, -125, -126, 124,
	22, 122, 28, 144, -143, -121, 90, 12, -137, -137,
	-29, 22, -131, -131, 39, 111, -56, -39, -60, 11,
	99, -132, -35, -33, 73, -66, -66, -195, -36, -147,
	108, 176, 138, 174, 170, 190, 181, 203, 172, 204,
	-144, -147, -66, -66, -132, -66, -66, 296, -91, -37,
	81, -37, 79, -131, -194, -96, -96, -96, -96, -96,
	-195, -195, -97, -96, -97, -97, -195, -97, -97, -195,
	-97, -97, -97, -97, -195, -97, -97, -97, -105, 52,
	-106, -78, -80, -79, -194, -2, -101, -104, -91, -110,
	-37, -37, -37, 54, -37, -194, -194, -194, -195, 55,
	-91, -60, 221, 225, 226, -176, -177, -180, -179, -131,
	57, 57, -158, 52, 59, 60, 61, 69, 228, 67,
	56, -160, -160, 57, 108, 56, 55, 56, 55, 56,
	55, -56, 55, 82, -142, -131, -142, -131, -56, -142,
	-131, 59, -37, -34, -82, 111, -60, -88, 13, -40,
	-195, -66, -195, -155, -155, -155, -164, -155, 164, -155,
	164, -195, -195, -195, 55, 19, -195, 55, 19, -194,
	-32, 262, -195, -37, -91, 144, -97, -97, -97, -97,
	-97, 27, -105, 55, -195, -195, -195, -195, -99, -102,
	-131, -102, -102, -102, -140, -131, -99, 56, 55, -155,
	-166, 201, 9, -159, 59, -159, 60, 60, -143, -186,
	-177, 54, 26, 11, -131, -88, -89, 14, 16, -60,
	-159, 57, -66, -66, -66, -66, -66, -195, 59, -195,
	16, 28, -80, 34, -2, -194, 55, 56, -195, -195,
	-195, -59, -182, -181, 53, 134, 66, -179, -167, 128,
	28, 127, 228, -160, -160, 56, 56, -102, -194, -40,
	-89, -90, -37, -130, -77, -38, -37, -130, -88, -195,
	-195, -195, -195, -31, 92, 299, -76, 9, -78, -2,
	-131, -181, 57, -172, 82, 59, -157, 66, 28, 28,
	56, -183, -184, 144, -60, 55, -89, -195, 297, 49,
	300, -91, -106, -195, 60, 59, -190, -195, 55, -131,
	-88, -38, 39, 298, 301, -195, -188, -184, 34, -89,
	39, 146, 299, 147, 300, -194, 301, -66, 143, -195,
	-195,
}

var yyDef = [...]int{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 563, 0, 286, 286, 286, 286, 286, 286, 0,
	634, 617, 0, 0, 0, 0, -2, 276, 277, 0,
	279, 280, 902, 902, 902, 902, 902, 0, 900, 42,
	43, 0, 1, 3, 0, 290, 572, 0, 0, 293,
	288, 0, 617, 0, 0, 0, 69, 0, 0, 843,
	0, 844, 615, 615, 615, 635, 636, 639, 640, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 0, 0, 618, 0, 613, 0, 613,
	613, 613, 0, 235, 366, 643, 644, 843, 844, 0,
	0, 0, 0, 903, 903, 903, 903, 0, 903, 264,
	253, 255, 256, 257, 258, 903, 273, 274, 263, 275,
	278, 281, 282, 283, 284, 285, 286, 31, 32, 0,
	351, 352, 353, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 563, 38, 0, 286, 291, 292, 576, 0, 0,
	563, 901, 296, 294, 295, 287, 0, 304, 313, 0,
	374, 0, 379, 381, -2, -2, 0, 416, 417, 418,
	419, 420, 0, 0, 0, 0, 0, 0, 0, 443,
	444, 445, 446, 447, 448, 542, 543, 544, 545, 546,
	547, 548, 549, 383, 384, 539, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 0, 504,
	504, 504, 504, 504, 504, 504, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 324, 325, 326, 346, 0, 348, 0, 0,
	50, 54, 0, 834, 600, -2, -2, 0, 0, 641,
	642, -2, 763, -2, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 0, 86, 0, 0, 903, 0, 76,
	0, 0, 0, 0, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 234, 0, 236, 903, 903, 903, 903,
	903, 903, 903, 903, 245, 904, 905, 246, 247, 248,
	903, 903, 250, 0, 265, 0, 259, 293, 0, 0,
	0, 572, 0, 293, 22, 0, 0, 573, 0, 564,
	565, 569, 569, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 572, 0, 298, 297, 289, 0, 305, 0, 0,
	0, 314, 0, 316, 317, 318, 319, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 401, 402,
	403, 404, 405, 406, 407, 380, 0, 394, 0, 0,
	0, 436, 437, 438, 439, 440, 441, 0, 300, 0,
	0, 0, 414, 850, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 0, 531, 0, 496, 0, 497, 498,
	499, 500, 501, 502, 503, 0, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 296, 0, 0, 0, 296, 0, 0, 296, 0,
	0, 0, 0, 296, 0, 0, 0, 52, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	357, 0, 0, 0, 0, 347, 0, 0, 368, 807,
	349, 0, -2, 0, 0, 0, 48, 49, 0, 55,
	834, 57, 58, 0, 0, 0, 166, 608, 609, 610,
	606, 194, 0, 149, 145, 91, 92, 93, 138, 95,
	138, 138, 138, 138, 163, 163, 163, 163, 121, 122,
	123, 124, 125, 0, 0, 108, 138, 138, 138, 112,
	128, 129, 130, 131, 132, 133, 134, 135, 96, 97,
	98, 99, 100, 101, 102, 140, 140, 140, 142, 142,
	637, 71, 0, 79, 0, 903, 0, 903, 84, 0,
	210, 0, 229, 614, 0, 903, 232, 233, 367, 645,
	646, 237, 238, 239, 240, 241, 242, 243, 244, 249,
	252, 266, 260, 261, 254, 296, 33, 34, 0, 585,
	576, 39, 296, 577, 0, 0, 0, 0, 0, 567,
	570, 571, 568, 576, 0, 550, 0, 0, 0, 299,
	26, 375, 376, 378, 395, 0, 397, 399, 315, 306,
	0, 540, -2, 385, 386, 410, 411, 412, 0, 0,
	0, 0, 408, 390, 0, 421, 422, 423, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 435, 515, 516,
	0, 433, 434, 442, 0, 0, 301, 302, 413, 0,
	595, 0, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 0, 0, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 537, 534, 0, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 372, 597, 0, 323, 342, 342,
	344, 0, 339, 355, 356, 358, 0, 360, 0, 362,
	363, 327, 328, 329, 0, 0, 0, 0, 350, 372,
	0, 372, 51, 601, 56, 0, 0, 61, 62, 602,
	603, 604, 0, 85, 195, 197, 200, 201, 202, 87,
	88, 0, 0, 0, 0, 0, 189, 190, 152, 150,
	0, 147, 146, 94, 0, 163, 163, 115, 116, 166,
	0, 166, 166, 166, 0, 0, 109, 110, 111, 103,
	0, 104, 105, 106, 0, 107, 0, 0, 903, 73,
	0, 77, 78, 74, 616, 75, 902, 0, 0, 629,
	211, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 0, 228, 903, 231, 269, 0, 0, 298, 0,
	0, 0, 24, 0, 574, 575, 0, 566, 23, 0,
	611, 612, 551, 552, 320, 396, 398, 400, 0, 300,
	387, 408, 391, 0, 388, 0, 0, 382, 449, 0,
	0, 415, -2, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 563, 0, 0, 535, 0, 0,
	495, 506, 507, 508, 509, 469, 0, 470, 0, 0,
	0, 0, 0, 476, 477, 478, 479, 0, 0, 311,
	311, 311, 0, 311, 311, 0, 311, 311, 311, 311,
	0, 311, 311, 311, 589, 0, 0, 580, 0, 0,
	563, 0, 0, 0, 335, 343, 0, 0, 336, 337,
	0, 338, 359, 361, 0, 0, 0, 0, 333, 563,
	372, 47, 59, 60, 0, 0, 66, 167, 0, 198,
	0, 0, 184, 0, 0, 187, 188, 159, 0, 151,
	90, 148, 0, 166, 166, 117, 0, 118, 119, 120,
	0, 136, 0, 0, 0, 0, 638, 72, 80, 81,
	0, 203, 902, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 902, 0, 0, 902, 630,
	631, 632, 633, 0, 230, 251, 0, 0, 267, 268,
	0, 0, 587, 586, 578, 0, 25, 372, 553, 0,
	307, 541, 0, 389, 0, 409, 392, 450, 303, 0,
	138, 138, 520, 138, 142, 523, 138, 525, 138, 528,
	0, 0, 0, 0, 540, 0, 0, 0, 532, 0,
	494, 538, 0, 308, 563, 471, 472, 473, 474, 475,
	311, 311, 454, 312, 455, 456, 311, 458, 459, 311,
	461, 462, 463, 464, 311, 466, 467, 468, 40, 0,
	589, 579, 591, 593, 0, 0, 0, 0, 572, 598,
	373, 599, 340, 0, 345, 0, 0, 0, 348, 0,
	572, 46, 63, 64, 65, 196, 199, 0, 191, 138,
	185, 186, 161, 0, 153, 154, 155, 156, 157, 158,
	139, 113, 114, 164, 165, 163, 0, 163, 0, 143,
	0, 903, 0, 0, 204, 0, 205, 207, 208, 209,
	0, 270, 271, 0, 35, 0, 553, 559, 0, 321,
	451, 393, 482, 517, 163, 521, 522, 524, 526, 527,
	529, 484, 483, 485, 0, 0, 488, 0, 0, 0,
	0, 0, 493, 536, 0, 0, 452, 453, 457, 460,
	465, 0, 41, 0, 594, 563, 0, 53, 44, 0,
	331, 0, 0, 0, 368, 334, 45, 176, 0, 193,
	168, 162, 0, 166, 137, 166, 0, 0, 70, 82,
	83, 0, 0, 0, 588, 559, 28, 0, 0, 553,
	518, 519, 0, 0, 0, 0, 510, 492, 533, 309,
	0, 0, 592, 0, 583, 0, 0, 341, 369, 370,
	371, 330, 175, 177, 0, 182, 0, 192, 173, 0,
	170, 172, 160, 126, 127, 141, 144, 0, 0, 372,
	27, 560, 561, 562, 554, 555, 557, 558, 559, 486,
	487, 489, 490, 0, 0, 0, 563, 0, 582, 0,
	332, 178, 179, 0, 183, 181, 89, 0, 169, 171,
	76, 0, 224, 0, 553, 0, 29, 491, 0, 0,
	0, 0, 590, 563, 180, 174, 79, 223, 0, 0,
	559, 556, 511, 0, 514, 310, 206, 225, 0, 30,
	512, 0, 0, 0, 0, 0, 513, 0, 0, 226,
	227,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 111, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 303,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:315
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:320
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:321
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:325
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:348
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:356
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:360
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, string(yyDollar[6].str))
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{&Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:370
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:377
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:383
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[7].expr), GroupBy: GroupBy(yyDollar[8].exprs), Having: NewWhere(HavingStr, yyDollar[9].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &Select{CommonTableExprs: yyDollar[1].tableExprs, Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[9].tableExprs, Where: NewWhere(WhereStr, yyDollar[10].expr), GroupBy: GroupBy(yyDollar[11].exprs), Having: NewWhere(HavingStr, yyDollar[12].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:397
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:407
		{
			yyVAL.tableExprs = append(yyDollar[1].tableExprs, yyDollar[3].tableExpr)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:413
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[3].subquery, As: yyDollar[1].tableIdent}, nil}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:417
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[6].subquery, As: yyDollar[1].tableIdent}, yyDollar[3].columns}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:423
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:427
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:433
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:437
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:444
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:456
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:478
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:502
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:506
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:511
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:515
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:525
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:529
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:533
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:549
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:563
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:567
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:571
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:581
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:591
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:596
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:605
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:621
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:626
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:630
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:636
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:641
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:652
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:657
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:663
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:669
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:692
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:698
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:917
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:922
		{
			yyVAL.optVal = nil
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:926
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:931
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:947
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:953
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:993
		{
			yyVAL.optVal = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:997
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1022
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1026
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1044
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1048
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1074
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1083
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1093
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1097
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1117
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1128
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1189
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = yyDollar[1].str
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1229
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1233
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1237
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1241
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1264
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1269
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1274
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1278
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1313
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 227:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1317
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1329
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1337
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1342
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1432
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = "extended "
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.str = "full "
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1512
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1520
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1526
		{
			yyVAL.showFilter = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1530
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1540
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.str = SessionStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1548
		{
			yyVAL.str = GlobalStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Begin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Commit{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Rollback{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1607
		{
			setAllowComments(yylex, true)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1611
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1617
		{
			yyVAL.bytes2 = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = UnionStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.str = UnionAllStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1635
		{
			yyVAL.str = UnionDistinctStr
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1640
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = SQLCacheStr
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1653
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1657
		{
			yyVAL.str = DistinctStr
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1662
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = StraightJoinHint
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1671
		{
			yyVAL.selectExprs = nil
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1681
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1695
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1699
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1703
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1714
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1718
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1723
		{
			yyVAL.over = nil
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.over = yyDollar[1].over
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1734
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1748
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1760
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1765
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1793
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1797
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1803
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1807
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1817
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1840
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1844
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1848
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1852
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1856
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1862
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1864
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1868
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1874
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1879
		{
			yyVAL.empty = struct{}{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1884
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1888
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1892
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.str = JoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1913
		{
			yyVAL.str = JoinStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = CrossJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.str = StraightJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.str = LeftJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = LeftJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1939
		{
			yyVAL.str = RightJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.str = RightJoinStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1949
		{
			yyVAL.str = NaturalJoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1953
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1963
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1982
		{
			yyVAL.indexHints = nil
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1986
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1990
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1994
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1999
		{
			yyVAL.expr = nil
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2021
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2025
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2043
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2091
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.str = IsNullStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2105
		{
			yyVAL.str = IsNotNullStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.str = IsTrueStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			yyVAL.str = IsNotTrueStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.str = IsFalseStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2121
		{
			yyVAL.str = IsNotFalseStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = EqualStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = LessThanStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.str = GreaterThanStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.str = LessEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.str = GreaterEqualStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.str = NotEqualStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2174
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2190
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &ExtractFuncExpr{IntervalTypes: yyDollar[3].intervalType, Expr: yyDollar[5].expr}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.str = BooleanModeStr
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2617
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2621
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2625
		{
			yyVAL.str = QueryExpansionStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = nil
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2705
		{
			yyVAL.str = string("")
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2725
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = nil
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2740
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2748
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &NullVal{}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2806
		{
			yyVAL.exprs = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2854
		{
			yyVAL.orderBy = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2868
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2874
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2878
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2883
		{
			yyVAL.str = AscScr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.str = AscScr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2891
		{
			yyVAL.str = DescScr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2896
		{
			yyVAL.limit = nil
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2904
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2908
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.str = ForUpdateStr
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2921
		{
			yyVAL.str = ShareModeStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2942
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2947
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2951
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2955
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2962
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2970
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2974
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2979
		{
			yyVAL.updateExprs = nil
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2983
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2993
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3003
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3009
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3029
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3035
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3045
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3051
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3055
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3059
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.bytes = []byte("charset")
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &Default{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3090
		{
			yyVAL.byt = 0
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3092
		{
			yyVAL.byt = 1
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3097
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3100
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.str = IgnoreStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3147
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3149
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3473
		{
			decNesting(yylex)
		}
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3478
		{
			forceEOF(yylex)
		}
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3483
		{
			forceEOF(yylex)
		}
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			forceEOF(yylex)
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			forceEOF(yylex)
		}
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3497
		{
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			yyVAL.intervalType = IntervalDayHour
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.intervalType = IntervalDayMicrosecond
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.intervalType = IntervalDayMinute
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3511
		{
			yyVAL.intervalType = IntervalDaySecond
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.intervalType = IntervalHourMicrosecond
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3519
		{
			yyVAL.intervalType = IntervalHourMinute
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3523
		{
			yyVAL.intervalType = IntervalHourSecond
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3527
		{
			yyVAL.intervalType = IntervalMinuteMicrosecond
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3531
		{
			yyVAL.intervalType = IntervalMinuteSecond
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3535
		{
			yyVAL.intervalType = IntervalSecondMicrosecond
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.intervalType = IntervalYearMonth
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.intervalType = IntervalDay
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3549
		{
			yyVAL.intervalType = IntervalWeek
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3553
		{
			yyVAL.intervalType = IntervalHour
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			yyVAL.intervalType = IntervalMinute
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.intervalType = IntervalMonth
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.intervalType = IntervalQuarter
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.intervalType = IntervalSecond
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.intervalType = IntervalMicrosecond
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.intervalType = IntervalYear
		}
	}
	goto yystack /* stack new state and value */
}
