// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	over              *Over
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const OF = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const OVER = 57568
const WINDOW = 57569
const GROUPING = 57570
const GROUPS = 57571
const AVG = 57572
const BIT_AND = 57573
const BIT_OR = 57574
const BIT_XOR = 57575
const COUNT = 57576
const JSON_ARRAYAGG = 57577
const JSON_OBJECTAGG = 57578
const MAX = 57579
const MIN = 57580
const STDDEV_POP = 57581
const STDDEV = 57582
const STD = 57583
const STDDEV_SAMP = 57584
const SUM = 57585
const VAR_POP = 57586
const VARIANCE = 57587
const VAR_SAMP = 57588
const CUME_DIST = 57589
const DENSE_RANK = 57590
const FIRST_VALUE = 57591
const LAG = 57592
const LAST_VALUE = 57593
const LEAD = 57594
const NTH_VALUE = 57595
const NTILE = 57596
const ROW_NUMBER = 57597
const PERCENT_RANK = 57598
const RANK = 57599
const MATCH = 57600
const AGAINST = 57601
const BOOLEAN = 57602
const LANGUAGE = 57603
const WITH = 57604
const QUERY = 57605
const EXPANSION = 57606
const UNUSED = 57607

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"OF",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 263,
	152, 263,
	-2, 253,
	-1, 238,
	110, 633,
	-2, 629,
	-1, 239,
	110, 634,
	-2, 630,
	-1, 338,
	81, 806,
	-2, 58,
	-1, 339,
	81, 767,
	-2, 59,
	-1, 344,
	81, 751,
	-2, 595,
	-1, 346,
	81, 788,
	-2, 597,
	-1, 708,
	53, 41,
	55, 41,
	-2, 43,
	-1, 842,
	110, 636,
	-2, 632,
	-1, 1075,
	5, 28,
	-2, 404,
	-1, 1129,
	5, 27,
	-2, 570,
	-1, 1386,
	5, 28,
	-2, 571,
	-1, 1432,
	5, 27,
	-2, 573,
	-1, 1501,
	5, 28,
	-2, 574,
}

const yyPrivate = 57344

const yyLast = 12889

var yyAct = [...]int{
	271, 47, 236, 1492, 1486, 1017, 779, 1443, 53, 932,
	1287, 1288, 1392, 1315, 625, 1284, 1191, 497, 997, 951,
	624, 3, 243, 217, 701, 699, 270, 706, 972, 933,
	1011, 211, 1149, 1067, 1236, 1194, 973, 969, 867, 1182,
	718, 983, 1137, 1136, 844, 1132, 499, 877, 47, 505,
	991, 454, 717, 337, 893, 929, 222, 1007, 486, 874,
	703, 325, 329, 817, 1049, 324, 688, 548, 216, 343,
	226, 334, 332, 639, 52, 212, 213, 214, 215, 1524,
	1512, 1522, 1498, 1520, 1018, 1511, 1254, 323, 1098, 1373,
	458, 1452, 479, 1310, 1311, 1497, 1309, 241, 181, 177,
	178, 179, 540, 1321, 1322, 1323, 964, 230, 57, 494,
	1157, 1326, 1324, 1156, 965, 966, 1158, 719, 808, 720,
	1173, 990, 340, 1404, 1419, 809, 998, 1362, 1360, 210,
	1521, 490, 491, 59, 60, 61, 62, 63, 245, 1467,
	591, 590, 600, 601, 593, 594, 595, 596, 597, 598,
	599, 592, 1519, 467, 602, 481, 1487, 483, 1215, 930,
	952, 954, 1237, 591, 590, 600, 601, 593, 594, 595,
	596, 597, 598, 599, 592, 468, 461, 602, 174, 1148,
	175, 175, 480, 482, 787, 778, 1147, 1146, 1444, 456,
	464, 1473, 1239, 189, 485, 485, 485, 485, 54, 485,
	328, 1446, 1269, 176, 614, 615, 485, 180, 1389, 1068,
	595, 596, 597, 598, 599, 592, 484, 1223, 602, 1083,
	970, 1061, 602, 47, 1241, 815, 1245, 582, 1240, 536,
	1238, 985, 474, 812, 953, 1243, 985, 547, 611, 1478,
	1450, 613, 1212, 537, 1242, 998, 1340, 507, 1214, 616,
	617, 618, 619, 620, 621, 622, 195, 1244, 1246, 592,
	552, 1135, 602, 478, 1256, 1167, 232, 1044, 1445, 721,
	623, 1325, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 205, 638, 640, 640, 640, 640, 640, 640, 640,
	640, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 1496, 984, 985, 1376, 1468, 1330, 984,
	700, 190, 538, 470, 471, 472, 851, 192, 1451, 1449,
	545, 1213, 894, 1211, 198, 194, 498, 1045, 546, 545,
	849, 850, 848, 1219, 455, 1258, 547, 641, 642, 643,
	644, 645, 646, 647, 894, 547, 1090, 782, 834, 836,
	837, 196, 1202, 835, 200, 987, 1080, 1171, 1331, 612,
	988, 1481, 591, 590, 600, 601, 593, 594, 595, 596,
	597, 598, 599, 592, 340, 542, 602, 818, 819, 546,
	545, 1200, 191, 173, 709, 1503, 1410, 715, 1058, 1059,
	1060, 487, 488, 489, 1504, 492, 547, 460, 984, 1079,
	1409, 1078, 496, 982, 980, 546, 545, 981, 1186, 193,
	1218, 201, 202, 203, 204, 208, 50, 546, 545, 1185,
	207, 206, 547, 1174, 546, 545, 847, 1479, 868, 1268,
	869, 1426, 1407, 1034, 547, 1348, 1183, 1476, 485, 1507,
	498, 547, 1436, 1484, 322, 1201, 485, 1033, 328, 1318,
	1206, 1203, 1196, 1197, 1204, 1199, 1198, 485, 485, 485,
	485, 485, 485, 485, 485, 502, 506, 1205, 1317, 462,
	463, 485, 485, 1208, 1168, 1038, 1436, 498, 1436, 1437,
	1401, 1400, 583, 1159, 1032, 814, 1306, 498, 498, 664,
	665, 666, 667, 668, 652, 653, 654, 669, 670, 655,
	656, 657, 663, 671, 658, 659, 660, 661, 662, 674,
	673, 672, 675, 676, 678, 677, 679, 1020, 626, 794,
	1388, 498, 813, 870, 796, 1337, 1336, 637, 1333, 1334,
	330, 793, 1029, 1026, 1027, 822, 1025, 792, 546, 545,
	821, 600, 601, 593, 594, 595, 596, 597, 598, 599,
	592, 820, 783, 602, 781, 547, 776, 552, 476, 1333,
	1332, 1036, 1039, 1073, 498, 183, 469, 843, 684, 498,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 879, 498, 728, 727, 823,
	455, 54, 845, 333, 47, 712, 1031, 838, 457, 593,
	594, 595, 596, 597, 598, 599, 592, 1456, 627, 602,
	260, 259, 262, 263, 264, 265, 1455, 1327, 1030, 261,
	266, 841, 878, 880, 54, 1133, 1285, 840, 881, 1133,
	1509, 879, 842, 1384, 684, 886, 889, 713, 896, 711,
	21, 895, 690, 693, 694, 695, 691, 1134, 692, 696,
	901, 902, 1138, 1139, 777, 1035, 1339, 908, 909, 910,
	911, 958, 786, 711, 1073, 329, 329, 329, 329, 329,
	329, 23, 1134, 797, 798, 799, 800, 801, 802, 803,
	804, 700, 903, 955, 905, 683, 934, 805, 806, 898,
	684, 329, 871, 872, 1335, 1127, 221, 950, 1160, 1128,
	1037, 881, 963, 1073, 846, 465, 1226, 466, 23, 714,
	684, 1085, 816, 473, 1082, 1133, 959, 23, 891, 50,
	475, 50, 1414, 223, 992, 1012, 1300, 936, 937, 938,
	935, 940, 1163, 1008, 939, 1003, 1431, 1002, 949, 65,
	999, 1000, 1001, 948, 957, 956, 912, 913, 961, 962,
	1073, 917, 780, 340, 920, 1084, 50, 1015, 1081, 925,
	977, 1320, 485, 829, 485, 50, 974, 993, 994, 995,
	996, 50, 485, 690, 693, 694, 695, 691, 1285, 692,
	696, 1138, 1139, 1004, 1005, 1006, 1013, 1187, 1142, 790,
	495, 945, 831, 832, 943, 947, 946, 694, 695, 944,
	1145, 1144, 942, 328, 328, 328, 328, 328, 328, 941,
	1009, 1010, 227, 228, 1518, 1510, 1222, 1046, 1516, 328,
	541, 1056, 1062, 1055, 507, 500, 1178, 726, 477, 328,
	1170, 1483, 1064, 1065, 1066, 539, 1482, 501, 1429, 1164,
	1382, 1415, 1202, 818, 819, 1022, 1050, 789, 1051, 698,
	224, 225, 541, 682, 841, 845, 1054, 218, 1461, 1428,
	219, 54, 708, 1460, 1053, 842, 1417, 1134, 1070, 543,
	1470, 1200, 1071, 1063, 626, 1405, 811, 884, 885, 1075,
	1076, 1077, 56, 58, 710, 51, 1, 1019, 1086, 1190,
	1028, 1485, 1442, 1092, 1314, 1093, 1094, 1095, 1096, 979,
	971, 1100, 1101, 1102, 1103, 1104, 453, 64, 1477, 978,
	1130, 1131, 1111, 1112, 1113, 1448, 1115, 1116, 1403, 1118,
	1119, 1120, 1121, 986, 1123, 1124, 1125, 1089, 1172, 876,
	1129, 989, 1319, 1480, 1169, 1201, 733, 731, 732, 329,
	1206, 1203, 1196, 1197, 1204, 1199, 1198, 730, 735, 734,
	729, 197, 335, 697, 722, 1014, 544, 1205, 66, 1210,
	1209, 1140, 1143, 1195, 1152, 1024, 1217, 846, 968, 807,
	1043, 239, 493, 199, 610, 1052, 1155, 341, 1021, 1292,
	1023, 504, 1488, 1151, 1154, 1153, 1459, 1416, 1042, 1161,
	1088, 636, 1175, 1176, 784, 785, 892, 485, 788, 244,
	1491, 791, 76, 1165, 1166, 833, 186, 258, 257, 186,
	256, 974, 253, 255, 254, 1177, 824, 1179, 1180, 1181,
	1126, 584, 485, 1184, 242, 234, 810, 327, 680, 686,
	689, 687, 685, 186, 186, 76, 1193, 1141, 326, 186,
	1225, 76, 1207, 1372, 1466, 828, 25, 55, 229, 19,
	18, 1232, 1233, 17, 20, 16, 15, 1192, 14, 29,
	1047, 1048, 13, 506, 1249, 1250, 12, 1252, 1253, 11,
	1234, 10, 9, 8, 830, 7, 1255, 328, 1230, 1260,
	6, 5, 4, 220, 1097, 1099, 22, 2, 0, 0,
	0, 1105, 1106, 1107, 1108, 1248, 0, 0, 1247, 0,
	1228, 1235, 1229, 0, 0, 0, 0, 1266, 1267, 1290,
	0, 47, 1272, 0, 0, 1275, 0, 1286, 0, 0,
	1280, 1295, 1251, 0, 0, 0, 1074, 1302, 1303, 1304,
	934, 1291, 0, 842, 0, 1289, 934, 0, 0, 0,
	1307, 1091, 0, 1296, 1294, 0, 186, 1305, 186, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 76, 76, 76, 76, 1312,
	76, 0, 0, 0, 0, 0, 0, 76, 1308, 1313,
	0, 591, 590, 600, 601, 593, 594, 595, 596, 597,
	598, 599, 592, 1328, 1329, 602, 0, 0, 0, 974,
	0, 974, 0, 0, 551, 0, 1341, 329, 0, 0,
	0, 0, 931, 1189, 1353, 0, 0, 0, 0, 1343,
	0, 0, 1346, 0, 0, 0, 0, 1352, 0, 0,
	0, 0, 1351, 0, 1354, 1371, 0, 0, 1216, 0,
	0, 0, 960, 0, 0, 1363, 1364, 1365, 0, 1375,
	1368, 1350, 1358, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1228, 0, 0, 0, 0, 0, 1355, 1356,
	0, 1357, 0, 0, 1359, 0, 1361, 0, 0, 0,
	0, 0, 1383, 1261, 1262, 1263, 1264, 1265, 1385, 1386,
	1387, 0, 1390, 0, 186, 1394, 1395, 1396, 0, 1391,
	0, 186, 186, 186, 0, 0, 0, 76, 0, 1016,
	1397, 1399, 0, 76, 0, 0, 0, 0, 1040, 485,
	0, 1041, 0, 0, 0, 0, 0, 0, 0, 1161,
	0, 1406, 0, 1408, 0, 269, 1412, 1257, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 1402, 0, 1420,
	1421, 974, 1422, 1423, 1424, 1418, 0, 1413, 0, 0,
	0, 0, 0, 0, 0, 1290, 74, 0, 1433, 0,
	1425, 0, 0, 1427, 0, 0, 1430, 0, 1192, 974,
	0, 1297, 1298, 0, 0, 1299, 0, 0, 1432, 1301,
	0, 1289, 1438, 1439, 1440, 1447, 1458, 1441, 0, 342,
	0, 0, 0, 0, 0, 459, 0, 1457, 0, 0,
	0, 0, 1290, 0, 47, 0, 0, 0, 1462, 1463,
	1464, 1465, 1471, 1469, 1453, 0, 1454, 0, 0, 76,
	1475, 0, 0, 0, 1472, 186, 186, 76, 1289, 186,
	0, 0, 186, 0, 0, 0, 186, 0, 76, 76,
	76, 76, 76, 76, 76, 76, 0, 0, 1499, 0,
	1500, 0, 76, 76, 1495, 0, 1349, 186, 1490, 1494,
	1501, 1505, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 750, 0, 0, 0, 0, 0,
	0, 1514, 1515, 1517, 0, 0, 0, 1513, 0, 0,
	0, 0, 1523, 0, 0, 1374, 1525, 0, 0, 0,
	0, 76, 0, 0, 0, 186, 0, 1494, 0, 0,
	0, 551, 0, 1527, 1528, 0, 0, 0, 0, 342,
	342, 342, 342, 0, 342, 1411, 0, 626, 0, 0,
	0, 342, 1270, 1271, 0, 1273, 1274, 0, 1276, 1277,
	1278, 1279, 0, 1281, 1282, 1283, 0, 0, 882, 883,
	0, 738, 0, 0, 890, 0, 590, 600, 601, 593,
	594, 595, 596, 597, 598, 599, 592, 0, 897, 602,
	899, 900, 0, 1224, 0, 904, 0, 906, 907, 0,
	0, 751, 0, 0, 76, 914, 915, 916, 0, 918,
	919, 0, 921, 922, 923, 924, 0, 926, 927, 928,
	0, 0, 764, 765, 766, 767, 768, 769, 770, 0,
	771, 772, 773, 774, 775, 752, 753, 754, 755, 736,
	737, 0, 0, 739, 0, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 756, 757, 758, 759, 760,
	761, 762, 763, 186, 0, 0, 186, 186, 186, 186,
	186, 186, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 342, 186, 0, 0, 626, 186, 723, 0, 0,
	0, 0, 186, 186, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1377, 1378, 0, 76,
	0, 0, 1379, 0, 0, 1380, 0, 1489, 1493, 0,
	1381, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 23, 24, 48, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 1369, 498, 0, 0, 0,
	1345, 0, 42, 0, 0, 0, 0, 28, 0, 0,
	186, 0, 0, 76, 0, 76, 1493, 0, 1057, 186,
	0, 0, 186, 76, 0, 0, 0, 37, 0, 0,
	0, 50, 591, 590, 600, 601, 593, 594, 595, 596,
	597, 598, 599, 592, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 342, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 342, 342, 342, 342, 342, 342, 342, 342,
	0, 1087, 0, 0, 0, 0, 342, 342, 0, 0,
	30, 31, 33, 32, 35, 0, 0, 0, 0, 0,
	0, 0, 1109, 1110, 0, 0, 0, 1114, 0, 0,
	1117, 36, 43, 44, 0, 1122, 45, 46, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 39, 0, 40, 41, 825, 586, 0, 589, 0,
	0, 0, 0, 0, 603, 604, 605, 606, 607, 608,
	609, 0, 587, 588, 585, 591, 590, 600, 601, 593,
	594, 595, 596, 597, 598, 599, 592, 0, 0, 602,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 1370,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 1366, 498,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 873, 0,
	0, 1367, 0, 0, 0, 0, 0, 0, 887, 887,
	0, 0, 0, 0, 887, 591, 590, 600, 601, 593,
	594, 595, 596, 597, 598, 599, 592, 76, 76, 602,
	76, 0, 591, 590, 600, 601, 593, 594, 595, 596,
	597, 598, 599, 592, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 186, 186, 0, 887,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 1231, 0, 76, 591, 590, 600, 601, 593, 594,
	595, 596, 597, 598, 599, 592, 0, 0, 602, 0,
	342, 591, 590, 600, 601, 593, 594, 595, 596, 597,
	598, 599, 592, 342, 1069, 602, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 600, 601, 593, 594,
	595, 596, 597, 598, 599, 592, 0, 0, 602, 0,
	0, 0, 76, 76, 0, 0, 0, 0, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 342, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 76, 0, 76, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 209, 0,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	233, 0, 184, 184, 0, 0, 0, 0, 184, 0,
	76, 186, 0, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 76, 76, 76, 186, 76, 0,
	0, 0, 0, 0, 76, 184, 0, 184, 0, 0,
	0, 1150, 0, 184, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	76, 76, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1188, 342, 0, 342, 0, 0, 0, 0, 0,
	76, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 1259, 0, 0, 0, 0, 0,
	184, 705, 184, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 887, 0, 0, 1293, 1150, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 342, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 184, 0, 0, 184, 0,
	0, 184, 0, 0, 0, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1393, 0, 1393, 1393,
	1393, 0, 1398, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 342, 342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 1316, 0, 233,
	233, 0, 0, 888, 888, 233, 0, 0, 0, 888,
	1393, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	233, 233, 233, 0, 0, 233, 233, 233, 233, 233,
	0, 0, 1474, 0, 0, 0, 233, 233, 233, 0,
	233, 233, 0, 233, 233, 233, 233, 0, 233, 233,
	233, 0, 184, 0, 888, 184, 184, 184, 184, 184,
	184, 0, 0, 0, 0, 0, 887, 0, 705, 1502,
	0, 184, 0, 0, 0, 705, 0, 0, 0, 0,
	0, 184, 184, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 107,
	0, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 75, 0, 233, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 233, 0, 0, 0, 233, 0,
	0, 233, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 184,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 0, 1220, 1221, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 795, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 108, 169, 133, 95, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 439, 423, 0, 393, 441, 371, 385, 452,
	386, 387, 416, 358, 401, 125, 383, 184, 374, 349,
	380, 350, 372, 395, 93, 398, 370, 425, 404, 107,
	0, 447, 109, 411, 0, 142, 118, 0, 0, 397,
	430, 399, 421, 392, 417, 364, 410, 442, 384, 414,
	443, 0, 0, 0, 75, 0, 975, 976, 0, 0,
	0, 0, 0, 86, 0, 413, 438, 382, 415, 348,
	412, 0, 353, 359, 451, 436, 377, 378, 1162, 0,
	0, 0, 0, 0, 0, 396, 400, 418, 390, 0,
	0, 0, 0, 0, 0, 0, 705, 375, 0, 409,
	0, 0, 0, 360, 354, 0, 394, 0, 0, 0,
	363, 0, 376, 419, 0, 347, 422, 434, 391, 187,
	437, 389, 388, 440, 131, 0, 0, 145, 98, 97,
	106, 426, 373, 381, 89, 379, 137, 127, 157, 407,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 351, 0, 143,
	159, 172, 369, 435, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 367, 368, 365, 366, 402, 403,
	444, 445, 446, 420, 361, 0, 431, 432, 0, 424,
	0, 0, 0, 0, 352, 355, 356, 357, 362, 0,
	0, 406, 408, 429, 428, 427, 0, 433, 449, 448,
	450, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 405, 77, 0, 108, 169, 133, 95, 160,
	439, 423, 0, 393, 441, 371, 385, 452, 386, 387,
	416, 358, 401, 125, 383, 0, 374, 349, 380, 350,
	372, 395, 93, 398, 370, 425, 404, 107, 0, 447,
	109, 411, 0, 142, 118, 0, 0, 397, 430, 399,
	421, 392, 417, 364, 410, 442, 384, 414, 443, 0,
	0, 0, 75, 0, 975, 976, 0, 0, 0, 0,
	0, 86, 0, 413, 438, 382, 415, 348, 412, 0,
	353, 359, 451, 436, 377, 378, 0, 0, 0, 0,
	0, 0, 0, 396, 400, 418, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 409, 0, 0,
	0, 360, 354, 0, 394, 0, 0, 0, 363, 0,
	376, 419, 0, 347, 422, 434, 391, 187, 437, 389,
	388, 440, 131, 0, 0, 145, 98, 97, 106, 426,
	373, 381, 89, 379, 137, 127, 157, 407, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 351, 0, 143, 159, 172,
	369, 435, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 367, 368, 365, 366, 402, 403, 444, 445,
	446, 420, 361, 0, 431, 432, 0, 424, 0, 0,
	0, 0, 352, 355, 356, 357, 362, 0, 0, 406,
	408, 429, 428, 427, 0, 433, 449, 448, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	405, 77, 0, 108, 169, 133, 95, 160, 439, 423,
	0, 393, 441, 371, 385, 452, 386, 387, 416, 358,
	401, 125, 383, 0, 374, 349, 380, 350, 372, 395,
	93, 398, 370, 425, 404, 107, 0, 447, 109, 411,
	0, 142, 118, 0, 0, 397, 430, 399, 421, 392,
	417, 364, 410, 442, 384, 414, 443, 50, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 413, 438, 382, 415, 348, 412, 0, 353, 359,
	451, 436, 377, 378, 0, 0, 0, 0, 0, 0,
	0, 396, 400, 418, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 0, 409, 0, 0, 0, 360,
	354, 0, 394, 0, 0, 0, 363, 0, 376, 419,
	0, 347, 422, 434, 391, 187, 437, 389, 388, 440,
	131, 0, 0, 145, 98, 97, 106, 426, 373, 381,
	89, 379, 137, 127, 157, 407, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 351, 0, 143, 159, 172, 369, 435,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	367, 368, 365, 366, 402, 403, 444, 445, 446, 420,
	361, 0, 431, 432, 0, 424, 0, 0, 0, 0,
	352, 355, 356, 357, 362, 0, 0, 406, 408, 429,
	428, 427, 0, 433, 449, 448, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 405, 77,
	0, 108, 169, 133, 95, 160, 439, 423, 0, 393,
	441, 371, 385, 452, 386, 387, 416, 358, 401, 125,
	383, 0, 374, 349, 380, 350, 372, 395, 93, 398,
	370, 425, 404, 107, 0, 447, 109, 411, 0, 142,
	118, 0, 0, 397, 430, 399, 421, 392, 417, 364,
	410, 442, 384, 414, 443, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 413,
	438, 382, 415, 348, 412, 0, 353, 359, 451, 436,
	377, 378, 0, 0, 0, 0, 0, 0, 0, 396,
	400, 418, 390, 0, 0, 0, 0, 0, 0, 1227,
	0, 375, 0, 409, 0, 0, 0, 360, 354, 0,
	394, 0, 0, 0, 363, 0, 376, 419, 0, 347,
	422, 434, 391, 187, 437, 389, 388, 440, 131, 0,
	0, 145, 98, 97, 106, 426, 373, 381, 89, 379,
	137, 127, 157, 407, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 351, 0, 143, 159, 172, 369, 435, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 367, 368,
	365, 366, 402, 403, 444, 445, 446, 420, 361, 0,
	431, 432, 0, 424, 0, 0, 0, 0, 352, 355,
	356, 357, 362, 0, 0, 406, 408, 429, 428, 427,
	0, 433, 449, 448, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 77, 0, 108,
	169, 133, 95, 160, 439, 423, 0, 393, 441, 371,
	385, 452, 386, 387, 416, 358, 401, 125, 383, 0,
	374, 349, 380, 350, 372, 395, 93, 398, 370, 425,
	404, 107, 0, 447, 109, 411, 0, 142, 118, 0,
	0, 397, 430, 399, 421, 392, 417, 364, 410, 442,
	384, 414, 443, 0, 0, 0, 238, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 413, 438, 382,
	415, 348, 412, 0, 353, 359, 451, 436, 377, 378,
	0, 0, 0, 0, 0, 0, 0, 396, 400, 418,
	390, 0, 0, 0, 0, 0, 0, 839, 0, 375,
	0, 409, 0, 0, 0, 360, 354, 0, 394, 0,
	0, 0, 363, 0, 376, 419, 0, 347, 422, 434,
	391, 187, 437, 389, 388, 440, 131, 0, 0, 145,
	98, 97, 106, 426, 373, 381, 89, 379, 137, 127,
	157, 407, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 351,
	0, 143, 159, 172, 369, 435, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 367, 368, 365, 366,
	402, 403, 444, 445, 446, 420, 361, 0, 431, 432,
	0, 424, 0, 0, 0, 0, 352, 355, 356, 357,
	362, 0, 0, 406, 408, 429, 428, 427, 0, 433,
	449, 448, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 405, 77, 0, 108, 169, 133,
	95, 160, 439, 423, 0, 393, 441, 371, 385, 452,
	386, 387, 416, 358, 401, 125, 383, 0, 374, 349,
	380, 350, 372, 395, 93, 398, 370, 425, 404, 107,
	0, 447, 109, 411, 0, 142, 118, 0, 0, 397,
	430, 399, 421, 392, 417, 364, 410, 442, 384, 414,
	443, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 413, 438, 382, 415, 348,
	412, 0, 353, 359, 451, 436, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 396, 400, 418, 390, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 0, 409,
	0, 0, 0, 360, 354, 0, 394, 0, 0, 0,
	363, 0, 376, 419, 0, 347, 422, 434, 391, 187,
	437, 389, 388, 440, 131, 0, 0, 145, 98, 97,
	106, 426, 373, 381, 89, 379, 137, 127, 157, 407,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 351, 0, 143,
	159, 172, 369, 435, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 367, 368, 365, 366, 402, 403,
	444, 445, 446, 420, 361, 0, 431, 432, 0, 424,
	0, 0, 0, 0, 352, 355, 356, 357, 362, 0,
	0, 406, 408, 429, 428, 427, 0, 433, 449, 448,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 405, 77, 0, 108, 169, 133, 95, 160,
	439, 423, 0, 393, 441, 371, 385, 452, 386, 387,
	416, 358, 401, 125, 383, 0, 374, 349, 380, 350,
	372, 395, 93, 398, 370, 425, 404, 107, 0, 447,
	109, 411, 0, 142, 118, 0, 0, 397, 430, 399,
	421, 392, 417, 364, 410, 442, 384, 414, 443, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 413, 438, 382, 415, 348, 412, 0,
	353, 359, 451, 436, 377, 378, 0, 0, 0, 0,
	0, 0, 0, 396, 400, 418, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 409, 0, 0,
	0, 360, 354, 0, 394, 0, 0, 0, 363, 0,
	376, 419, 0, 347, 422, 434, 391, 187, 437, 389,
	388, 440, 131, 0, 0, 145, 98, 97, 106, 426,
	373, 381, 89, 379, 137, 127, 157, 407, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 351, 0, 143, 159, 172,
	369, 435, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 367, 368, 365, 366, 402, 403, 444, 445,
	446, 420, 361, 0, 431, 432, 0, 424, 0, 0,
	0, 0, 352, 355, 356, 357, 362, 0, 0, 406,
	408, 429, 428, 427, 0, 433, 449, 448, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	405, 77, 0, 108, 169, 133, 95, 160, 439, 423,
	0, 393, 441, 371, 385, 452, 386, 387, 416, 358,
	401, 125, 383, 0, 374, 349, 380, 350, 372, 395,
	93, 398, 370, 425, 404, 107, 0, 447, 109, 411,
	0, 142, 118, 0, 0, 397, 430, 399, 421, 392,
	417, 364, 410, 442, 384, 414, 443, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 413, 438, 382, 415, 348, 412, 0, 353, 359,
	451, 436, 377, 378, 0, 0, 0, 0, 0, 0,
	0, 396, 400, 418, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 0, 409, 0, 0, 0, 360,
	354, 0, 394, 0, 0, 0, 363, 0, 376, 419,
	0, 347, 422, 434, 391, 187, 437, 389, 388, 440,
	131, 0, 0, 145, 98, 97, 106, 426, 373, 381,
	89, 379, 137, 127, 157, 407, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 345, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 351, 0, 143, 159, 172, 369, 435,
	165, 166, 167, 168, 0, 0, 0, 346, 344, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	367, 368, 365, 366, 402, 403, 444, 445, 446, 420,
	361, 0, 431, 432, 0, 424, 0, 0, 0, 0,
	352, 355, 356, 357, 362, 0, 0, 406, 408, 429,
	428, 427, 0, 433, 449, 448, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 405, 77,
	0, 108, 169, 133, 95, 160, 439, 423, 0, 393,
	441, 371, 385, 452, 386, 387, 416, 358, 401, 125,
	383, 0, 374, 349, 380, 350, 372, 395, 93, 398,
	370, 425, 404, 107, 0, 447, 109, 411, 0, 142,
	118, 0, 0, 397, 430, 399, 421, 392, 417, 364,
	410, 442, 384, 414, 443, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 413,
	438, 382, 415, 348, 412, 0, 353, 359, 451, 436,
	377, 378, 0, 0, 0, 0, 0, 0, 0, 396,
	400, 418, 390, 0, 0, 0, 0, 0, 0, 0,
	0, 375, 0, 409, 0, 0, 0, 360, 354, 0,
	394, 0, 0, 0, 363, 0, 376, 419, 0, 347,
	422, 434, 391, 187, 437, 389, 388, 440, 131, 0,
	0, 145, 98, 97, 106, 426, 373, 381, 89, 379,
	137, 127, 157, 407, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 351, 0, 143, 159, 172, 369, 435, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 367, 368,
	365, 366, 402, 403, 444, 445, 446, 420, 361, 0,
	431, 432, 0, 424, 0, 0, 0, 0, 352, 355,
	356, 357, 362, 0, 0, 406, 408, 429, 428, 427,
	0, 433, 449, 448, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 77, 0, 108,
	169, 133, 95, 160, 439, 423, 0, 393, 441, 371,
	385, 452, 386, 387, 416, 358, 401, 125, 383, 0,
	374, 349, 380, 350, 372, 395, 93, 398, 370, 425,
	404, 107, 0, 447, 109, 411, 0, 142, 118, 0,
	0, 397, 430, 399, 421, 392, 417, 364, 410, 442,
	384, 414, 443, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 413, 438, 382,
	415, 348, 412, 0, 353, 359, 451, 436, 377, 378,
	0, 0, 0, 0, 0, 0, 0, 396, 400, 418,
	390, 0, 0, 0, 0, 0, 0, 0, 0, 375,
	0, 409, 0, 0, 0, 360, 354, 0, 394, 0,
	0, 0, 363, 0, 376, 419, 0, 347, 422, 434,
	391, 187, 437, 389, 388, 440, 131, 0, 0, 145,
	98, 97, 106, 426, 373, 381, 89, 379, 137, 127,
	157, 407, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 716, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 345, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 351,
	0, 143, 159, 172, 369, 435, 165, 166, 167, 168,
	0, 0, 0, 346, 344, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 367, 368, 365, 366,
	402, 403, 444, 445, 446, 420, 361, 0, 431, 432,
	0, 424, 0, 0, 0, 0, 352, 355, 356, 357,
	362, 0, 0, 406, 408, 429, 428, 427, 0, 433,
	449, 448, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 405, 77, 0, 108, 169, 133,
	95, 160, 439, 423, 0, 393, 441, 371, 385, 452,
	386, 387, 416, 358, 401, 125, 383, 0, 374, 349,
	380, 350, 372, 395, 93, 398, 370, 425, 404, 107,
	0, 447, 109, 411, 0, 142, 118, 0, 0, 397,
	430, 399, 421, 392, 417, 364, 410, 442, 384, 414,
	443, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 413, 438, 382, 415, 348,
	412, 0, 353, 359, 451, 436, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 396, 400, 418, 390, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 0, 409,
	0, 0, 0, 360, 354, 0, 394, 0, 0, 0,
	363, 0, 376, 419, 0, 347, 422, 434, 391, 187,
	437, 389, 388, 440, 131, 0, 0, 145, 98, 97,
	106, 426, 373, 381, 89, 379, 137, 127, 157, 407,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 336, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 345, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 351, 0, 143,
	159, 172, 369, 435, 165, 166, 167, 168, 0, 0,
	0, 346, 344, 339, 338, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 367, 368, 365, 366, 402, 403,
	444, 445, 446, 420, 361, 0, 431, 432, 0, 424,
	0, 0, 0, 0, 352, 355, 356, 357, 362, 0,
	0, 406, 408, 429, 428, 427, 0, 433, 449, 448,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 405, 77, 0, 108, 169, 133, 95, 160,
	125, 0, 0, 875, 0, 240, 0, 0, 0, 93,
	0, 237, 0, 0, 107, 0, 281, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 238,
	260, 259, 262, 263, 264, 265, 0, 0, 86, 261,
	266, 267, 268, 0, 0, 235, 251, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	231, 0, 0, 0, 292, 0, 250, 0, 0, 246,
	247, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 290, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 282,
	291, 288, 289, 286, 287, 285, 284, 283, 293, 274,
	275, 276, 277, 279, 0, 0, 0, 0, 0, 306,
	307, 308, 309, 310, 311, 312, 305, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 294, 295, 296, 297,
	298, 299, 300, 301, 304, 302, 303, 278, 77, 0,
	108, 169, 133, 95, 160, 125, 0, 0, 0, 0,
	240, 0, 0, 0, 93, 0, 237, 0, 0, 107,
	0, 281, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 498, 238, 260, 259, 262, 263, 264,
	265, 0, 0, 86, 261, 266, 267, 268, 0, 0,
	235, 251, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 0, 0, 0, 0, 292,
	0, 250, 0, 0, 246, 247, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 290, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 282, 291, 288, 289, 286, 287,
	285, 284, 283, 293, 274, 275, 276, 277, 279, 0,
	0, 0, 0, 0, 306, 307, 308, 309, 310, 311,
	312, 305, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 294, 295, 296, 297, 298, 299, 300, 301, 304,
	302, 303, 278, 77, 0, 108, 169, 133, 95, 160,
	125, 0, 0, 0, 0, 240, 0, 0, 0, 93,
	0, 237, 0, 0, 107, 0, 281, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 238,
	260, 259, 262, 263, 264, 265, 0, 0, 86, 261,
	266, 267, 268, 0, 0, 235, 251, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	231, 0, 0, 0, 292, 0, 250, 0, 0, 246,
	247, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 290, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 282,
	291, 288, 289, 286, 287, 285, 284, 283, 293, 274,
	275, 276, 277, 279, 0, 0, 0, 0, 0, 306,
	307, 308, 309, 310, 311, 312, 305, 313, 314, 315,
	316, 317, 318, 319, 320, 321, 294, 295, 296, 297,
	298, 299, 300, 301, 304, 302, 303, 278, 77, 0,
	108, 169, 133, 95, 160, 125, 0, 0, 0, 0,
	240, 0, 0, 0, 93, 0, 237, 0, 0, 107,
	0, 281, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 967,
	0, 50, 0, 0, 238, 260, 259, 262, 263, 264,
	265, 0, 0, 86, 261, 266, 267, 268, 0, 0,
	235, 251, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 0, 0, 0, 0, 292,
	0, 250, 0, 0, 246, 247, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 290, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 282, 291, 288, 289, 286, 287,
	285, 284, 283, 293, 274, 275, 276, 277, 279, 0,
	0, 0, 0, 0, 306, 307, 308, 309, 310, 311,
	312, 305, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 294, 295, 296, 297, 298, 299, 300, 301, 304,
	302, 303, 278, 77, 23, 108, 169, 133, 95, 160,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 240, 0, 0, 0, 93, 0, 237, 0, 0,
	107, 0, 281, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 238, 260, 259, 262, 263,
	264, 265, 0, 0, 86, 261, 266, 267, 268, 0,
	0, 235, 251, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 0, 0, 0, 0,
	292, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 290, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 282, 291, 288, 289, 286,
	287, 285, 284, 283, 293, 274, 275, 276, 277, 279,
	0, 0, 0, 0, 0, 306, 307, 308, 309, 310,
	311, 312, 305, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 294, 295, 296, 297, 298, 299, 300, 301,
	304, 302, 303, 278, 77, 0, 108, 169, 133, 95,
	160, 125, 0, 0, 0, 0, 240, 0, 0, 0,
	93, 0, 237, 0, 0, 107, 0, 281, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	238, 260, 259, 262, 263, 264, 265, 0, 0, 86,
	261, 266, 267, 268, 0, 0, 235, 251, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 0, 0, 0, 0, 292, 0, 250, 0, 0,
	246, 247, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 290, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	282, 291, 288, 289, 286, 287, 285, 284, 283, 293,
	274, 275, 276, 277, 279, 0, 0, 0, 0, 0,
	508, 509, 510, 511, 512, 516, 517, 521, 522, 530,
	529, 528, 531, 532, 534, 533, 535, 513, 514, 515,
	518, 519, 520, 523, 524, 527, 525, 526, 278, 77,
	0, 108, 169, 133, 95, 160, 125, 0, 0, 0,
	0, 240, 0, 0, 0, 93, 0, 237, 0, 0,
	107, 0, 281, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 238, 260, 259, 262, 263,
	264, 265, 0, 0, 86, 261, 266, 267, 268, 0,
	0, 235, 251, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 0, 0, 0, 0,
	292, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 290, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 282, 291, 288, 289, 286,
	287, 285, 284, 283, 293, 274, 275, 276, 277, 279,
	0, 0, 0, 0, 0, 306, 307, 308, 309, 310,
	311, 312, 305, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 294, 295, 296, 297, 298, 299, 300, 301,
	304, 302, 303, 278, 77, 125, 108, 169, 133, 95,
	160, 0, 0, 0, 93, 0, 0, 0, 0, 107,
	0, 281, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 238, 260, 259, 262, 263, 264,
	265, 0, 0, 86, 261, 266, 267, 268, 0, 0,
	0, 251, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 0, 0, 0, 0, 292,
	0, 250, 0, 0, 246, 247, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 290, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 1526,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 282, 291, 288, 289, 286, 287,
	285, 284, 283, 293, 274, 275, 276, 277, 279, 0,
	0, 0, 0, 0, 306, 307, 308, 309, 310, 311,
	312, 305, 313, 314, 315, 316, 317, 318, 319, 320,
	321, 294, 295, 296, 297, 298, 299, 300, 301, 304,
	302, 303, 278, 77, 125, 108, 169, 133, 95, 160,
	0, 0, 0, 93, 0, 0, 0, 0, 107, 0,
	281, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 238, 260, 259, 262, 263, 264, 265,
	0, 0, 86, 261, 266, 267, 268, 0, 0, 0,
	251, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 0, 0, 0, 0, 292, 0,
	250, 0, 0, 246, 247, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 290, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 282, 291, 288, 289, 286, 287, 285,
	284, 283, 293, 274, 275, 276, 277, 279, 0, 0,
	0, 0, 0, 306, 307, 308, 309, 310, 311, 312,
	305, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	294, 295, 296, 297, 298, 299, 300, 301, 304, 302,
	303, 278, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 549, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 107, 0, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550, 0,
	553, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 546, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 172, 0, 0, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 555,
	556, 557, 558, 562, 563, 567, 568, 576, 575, 574,
	577, 578, 580, 579, 581, 559, 560, 561, 564, 565,
	566, 569, 570, 573, 571, 572, 0, 77, 0, 108,
	169, 133, 95, 160, 125, 0, 0, 0, 704, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 107, 0,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 707, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 554, 555, 556, 557, 558, 562, 563,
	567, 568, 576, 575, 574, 577, 578, 580, 579, 581,
	559, 560, 561, 564, 565, 566, 569, 570, 573, 571,
	572, 0, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 704, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 107, 0, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	707, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 702, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 172, 0, 0, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 555,
	556, 557, 558, 562, 563, 567, 568, 576, 575, 574,
	577, 578, 580, 579, 581, 559, 560, 561, 564, 565,
	566, 569, 570, 573, 571, 572, 125, 77, 0, 108,
	169, 133, 95, 160, 0, 93, 0, 0, 0, 0,
	107, 0, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 707, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 555, 556, 557, 558,
	562, 563, 567, 568, 576, 575, 574, 577, 578, 580,
	579, 581, 559, 560, 561, 564, 565, 566, 569, 570,
	573, 571, 572, 125, 77, 0, 108, 169, 133, 95,
	160, 0, 93, 0, 0, 0, 0, 107, 0, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 550, 0, 553, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 554, 555, 556, 557, 558, 562, 563, 567,
	568, 576, 575, 574, 577, 578, 580, 579, 581, 559,
	560, 561, 564, 565, 566, 569, 570, 573, 571, 572,
	125, 77, 0, 108, 169, 133, 95, 160, 0, 93,
	0, 0, 0, 0, 107, 0, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 600, 601, 593, 594,
	595, 596, 597, 598, 599, 592, 0, 0, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 77, 0,
	108, 169, 133, 95, 160, 86, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 72,
	0, 67, 0, 0, 0, 73, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 69, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 0, 70, 0, 0,
	0, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	107, 0, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 108, 169, 133,
	95, 160, 50, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 107,
	0, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 826, 0, 0,
	827, 0, 0, 86, 77, 0, 108, 169, 133, 95,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 725, 0, 0, 107, 0,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 724, 0, 0, 0, 0,
	0, 0, 86, 77, 0, 108, 169, 133, 95, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 107, 0, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 77, 0, 108, 169, 133, 95, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 107, 0, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 77, 0, 108, 169, 133, 95, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 125, 0, 0, 0, 0, 0, 0, 0, 681,
	93, 0, 0, 0, 0, 107, 0, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	77, 0, 108, 169, 133, 95, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 331, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 107, 0, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 77,
	0, 108, 169, 133, 95, 160, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 77, 0, 108, 169,
	133, 95, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 187, 0, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	107, 0, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 77, 0, 108, 169, 133,
	95, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 107,
	0, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 77, 0, 108, 169, 133, 95,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 107, 0,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 77, 0, 108, 169, 133, 95, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 108, 169, 133, 95, 160,
}

var yyPact = [...]int{
	1737, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 866, 897, -1000, -1000, -1000, -1000, -1000, -1000, 705,
	10279, 56, 83, -21, 11979, 73, 224, 12606, -1000, -26,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 731, -1000, -1000,
	-1000, -1000, -1000, 860, 864, 737, 850, 792, -1000, 6912,
	57, 11135, 11770, 6117, -1000, 553, 68, 12606, -146, 12188,
	51, 51, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 70, 12606, -1000, 12606, 50, 529, 50,
	50, 50, 12606, -1000, 122, -1000, -1000, -1000, -1000, 12606,
	521, 818, 35, 3893, 3893, 3893, 3893, -20, 3893, -103,
	758, -1000, -1000, -1000, -1000, 3893, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 452, 826, 7978, 7713,
	866, -1000, 731, -1000, -1000, -1000, 819, -1000, -1000, 330,
	878, -1000, 8761, 117, -1000, 7978, 1823, 687, -1000, -1000,
	687, -1000, -1000, 93, -1000, -1000, 8496, 8496, 8496, 8496,
	8496, 8496, 8496, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 687,
	-1000, 7448, 687, 687, 687, 687, 687, 687, 687, 687,
	7978, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 11553, 675, 751, -1000, -1000, -1000, 847, 10508,
	9291, 12606, 604, -1000, 674, 5839, -101, -1000, -1000, -1000,
	188, 10926, -1000, -1000, -1000, 817, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 552, -1000, 1474, 519, 3893, 63, 719,
	517, 294, 515, 12606, 12606, 3893, 61, 12606, 844, 757,
	12606, 500, 494, -1000, 5561, -1000, 3893, 3893, 3893, 3893,
	3893, 3893, 3893, 3893, -1000, -1000, -1000, -1000, -1000, -1000,
	3893, 3893, -1000, -88, -1000, 12606, -1000, -1000, -1000, -1000,
	887, 142, 487, 115, 677, -1000, 373, 839, 687, 687,
	687, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 687, 687, 687, 687,
	687, 687, 687, 687, 687, 687, 860, 452, 792, 10717,
	740, -1000, -1000, 12606, -1000, 7978, 7978, 300, -1000, 9805,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4449, 149, 8496, 382, 261, 8496, 8496, 8496,
	8496, 8496, 8496, 8496, 8496, 8496, 8496, 8496, 8496, 8496,
	8496, 8496, 391, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 486, -1000, 731, 572, 572, 116, 116, 116, 116,
	116, 116, 10062, 6382, 452, 550, 328, 7448, 6912, 6912,
	7978, 7978, 12397, 12397, 6912, 851, 265, 328, 12397, -1000,
	452, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6912, 6912,
	6912, 6912, 452, 452, 6912, 6912, 6912, 6912, 6912, 452,
	452, 452, 452, 851, 851, 6912, 6912, 6912, 851, 6912,
	6912, 851, 6912, 6912, 6912, 6912, 851, 6912, 6912, 6912,
	16, 12606, -1000, 12397, 11135, 11135, 11135, 11135, 11135, 11135,
	-1000, 787, 780, -1000, 772, 769, 773, 9548, -1000, 533,
	10508, 110, 687, -1000, 9548, -1000, -1000, -1000, 16, 628,
	11135, 12606, -1000, -1000, 5283, 674, -101, 667, -1000, -113,
	-107, 7177, 114, -1000, -1000, -1000, -1000, 3615, 297, 307,
	-82, -1000, -1000, -1000, 690, -1000, 690, 690, 690, 690,
	-52, -52, -52, -52, -1000, -1000, -1000, -1000, -1000, 703,
	701, -1000, 690, 690, 690, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 699, 699, 699, 691, 691, 724, -1000, 12606, -195,
	480, 3893, 842, 3893, -1000, 438, -1000, 12606, -1000, -1000,
	12606, 3893, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 256, -1000, -1000,
	-1000, -1000, 799, 7978, 7978, 5005, 7713, -1000, -1000, -1000,
	-1000, 826, -1000, 851, 865, -1000, 809, 807, 6912, -1000,
	-1000, 149, 268, -1000, -1000, 340, -1000, -1000, -1000, -1000,
	111, 687, -1000, 1109, -1000, -1000, -1000, -1000, 382, 8496,
	8496, 8496, 71, 1109, 2012, 467, 1493, 116, 112, 112,
	156, 156, 156, 156, 156, 523, 523, -1000, -1000, -1000,
	452, -1000, -1000, -1000, 452, 6912, 668, -1000, -1000, 7978,
	-1000, 452, 528, 528, 366, 354, 723, -1000, 109, 720,
	528, 6912, 287, -1000, 7978, 452, -1000, 528, 452, 528,
	528, -155, -155, 452, 528, 452, 528, 528, -155, -155,
	-155, -155, 6912, 6912, 528, 528, 528, 6912, 528, 528,
	6912, 528, 528, 528, 528, 6912, 528, 528, 528, 685,
	687, -1000, 680, -1000, 180, 751, 749, 749, 756, 620,
	-1000, -1000, -1000, -1000, 779, -1000, 778, -1000, -1000, -1000,
	-1000, -1000, 66, 65, 58, 12188, -1000, 875, 11135, 655,
	-1000, -1000, 667, -101, -110, -1000, -1000, -1000, 328, -1000,
	446, 663, 3337, -1000, -1000, -1000, -1000, -1000, -1000, 698,
	831, 203, 208, 437, -1000, -1000, 821, -1000, 309, -84,
	-1000, -1000, 383, -52, -52, -1000, -1000, 114, 816, 114,
	114, 114, 397, 397, -1000, -1000, -1000, -1000, 379, -1000,
	-1000, -1000, 368, -1000, 755, 12188, 3893, -1000, 4727, -1000,
	-1000, -1000, -1000, -1000, -1000, 834, 344, 220, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15,
	-1000, 3893, -1000, 341, 12606, 12606, 797, 328, 328, 107,
	-1000, -1000, 12606, -1000, -1000, -1000, -1000, 715, -1000, -1000,
	-1000, 4171, 6912, -1000, 71, 1109, 1979, -1000, 8496, 8496,
	-1000, -1000, 528, 6912, 328, -1000, -1000, -1000, 55, 391,
	55, 8496, 8496, 5005, 8496, 8496, -190, 629, 184, -1000,
	7978, 277, -1000, -1000, -1000, -1000, -1000, -1000, 11344, -1000,
	-155, -155, -155, -155, -155, -1000, -1000, -1000, -1000, 528,
	528, -155, -155, -155, 528, -155, -155, 528, -155, -155,
	-155, -155, 528, -155, -155, -155, 746, 12397, 687, -1000,
	2947, 12188, 866, 12397, 7978, 7978, -1000, -1000, 7978, 692,
	-1000, -1000, 7978, -1000, -1000, -1000, 687, 687, 687, 451,
	-1000, 866, 655, -1000, -1000, -1000, -124, -131, -1000, -1000,
	3615, -1000, 3615, 12188, -1000, 431, 412, -1000, -1000, 729,
	44, -1000, -1000, -1000, 581, 114, 114, -1000, 271, -1000,
	-1000, -1000, 524, -1000, 493, 659, 490, 12606, -1000, -1000,
	621, -1000, 165, -1000, -1000, 12188, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12188, 12606,
	-1000, -1000, -1000, -1000, -1000, 12188, -1000, -1000, 396, 7978,
	-1000, -1000, -1000, 4727, -1000, 875, 11135, -1000, -1000, 452,
	-1000, 8496, 1109, 1109, -1000, -1000, 452, 690, 690, -1000,
	690, 691, -1000, 690, -35, 690, -36, 452, 452, 1903,
	1962, -1000, 1700, 1920, 687, -153, -1000, 328, 7978, -1000,
	183, -1000, -1000, -1000, -1000, -1000, -155, -155, -1000, -1000,
	-1000, -1000, -155, -1000, -1000, -155, -1000, -1000, -1000, -1000,
	-155, -1000, -1000, -1000, -1000, 833, 594, 598, -1000, -1000,
	6647, 452, 485, 98, 451, 860, -1000, 328, 328, 328,
	12188, 328, 12188, 12188, 12188, 9026, 12188, 860, -1000, -1000,
	-1000, -1000, 3337, -1000, 445, -1000, 690, -1000, -1000, -77,
	886, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -52, 393, -52, 360, -1000, 346, 3893, 4727,
	3615, -1000, 688, -1000, -1000, -1000, -1000, 835, -1000, 328,
	873, 599, -1000, 1109, -1000, -1000, 67, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8496, 8496, -1000, 8496,
	8496, 8496, 452, 392, 328, 452, 863, -1000, -1000, -1000,
	-1000, -1000, 830, -1000, 687, -1000, -1000, 722, 12188, 12188,
	-1000, -1000, 443, -1000, 441, 441, 441, 110, -1000, -1000,
	135, 12188, -1000, 212, -1000, -136, 114, -1000, 114, 580,
	571, -1000, -1000, -1000, 12188, 687, 869, 862, -1000, -1000,
	290, 290, 290, 290, 48, -1000, -1000, -1000, 7978, 881,
	-1000, 687, -1000, 731, 81, -1000, 12188, -1000, -1000, -1000,
	-1000, -1000, 135, -1000, 400, 158, 388, -1000, 315, 828,
	-1000, 823, -1000, -1000, -1000, -1000, -1000, 407, 13, -1000,
	7713, 7713, -1000, -1000, -1000, -1000, 452, 46, -198, 596,
	12397, 598, 452, 12188, -1000, -1000, -1000, 345, -1000, -1000,
	-1000, 355, -1000, -1000, 719, 404, -1000, 12188, -1000, 328,
	-1000, 595, -1000, 328, -1000, -1000, 796, -193, -201, 452,
	590, -1000, -1000, -1000, -1000, -195, -1000, 13, 804, 7713,
	-1000, 795, -1000, -1000, -1000, -1000, 7, -1000, -196, -16,
	-199, 687, -202, 8237, -1000, 290, 452, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1107, 20, 660, 1106, 1103, 1102, 1101, 1100, 1095,
	1093, 1092, 1091, 1089, 1086, 1082, 1079, 1078, 1076, 1075,
	1074, 1073, 1070, 1069, 108, 1068, 1067, 1066, 102, 1065,
	70, 1064, 1063, 33, 949, 59, 47, 266, 3, 1060,
	25, 65, 61, 1058, 42, 43, 1057, 72, 1052, 66,
	1051, 1050, 1049, 550, 1048, 1047, 19, 45, 1045, 1044,
	1041, 1040, 97, 2, 1036, 1034, 1033, 1032, 1030, 1028,
	1027, 1025, 44, 14, 1020, 10, 26, 11, 1019, 138,
	22, 1016, 54, 1011, 1010, 1007, 1006, 1002, 8, 1001,
	49, 202, 449, 63, 23, 46, 999, 12, 55, 32,
	15, 9, 71, 52, 997, 29, 53, 40, 996, 995,
	403, 994, 993, 992, 990, 989, 986, 153, 417, 985,
	980, 979, 978, 69, 991, 27, 1355, 58, 67, 976,
	975, 974, 2130, 64, 60, 24, 973, 31, 216, 38,
	972, 971, 34, 970, 969, 968, 967, 958, 957, 956,
	50, 954, 953, 952, 18, 37, 951, 948, 57, 30,
	943, 938, 935, 39, 51, 929, 41, 928, 927, 926,
	920, 28, 36, 919, 13, 914, 7, 912, 911, 4,
	910, 16, 909, 5, 907, 6, 35, 906, 905, 0,
	17, 904, 903, 73,
}

var yyR1 = [...]int{
	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 191,
	191, 47, 47, 98, 98, 10, 10, 10, 10, 103,
	103, 107, 107, 107, 108, 108, 108, 108, 140, 140,
	11, 11, 11, 11, 11, 11, 11, 185, 185, 184,
	183, 183, 182, 182, 181, 16, 168, 169, 169, 169,
	164, 143, 143, 143, 143, 146, 146, 144, 144, 144,
	144, 144, 144, 144, 145, 145, 145, 145, 145, 147,
	147, 147, 147, 147, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 149, 149, 163, 163, 150,
	150, 158, 158, 159, 159, 159, 156, 156, 157, 157,
	160, 160, 160, 151, 151, 151, 151, 151, 151, 151,
	153, 153, 161, 161, 154, 154, 154, 155, 155, 162,
	162, 162, 162, 162, 152, 152, 165, 165, 177, 177,
	176, 176, 176, 167, 167, 173, 173, 173, 173, 173,
	166, 166, 175, 175, 174, 170, 170, 170, 171, 171,
	171, 172, 172, 172, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 180, 178, 178, 179, 179, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 115, 115, 112, 112, 113, 113, 114, 114, 114,
	116, 116, 116, 141, 141, 141, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 192, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 91,
	91, 91, 92, 92, 129, 129, 129, 128, 128, 128,
	128, 39, 39, 40, 40, 41, 41, 42, 42, 42,
	55, 55, 97, 97, 99, 99, 43, 43, 43, 43,
	43, 44, 44, 45, 45, 46, 46, 136, 136, 135,
	135, 135, 134, 134, 134, 48, 48, 52, 50, 49,
	49, 49, 49, 51, 51, 54, 54, 53, 53, 56,
	56, 56, 56, 57, 57, 37, 37, 37, 37, 37,
	37, 37, 111, 111, 59, 59, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 71, 71, 71, 71,
	71, 71, 60, 60, 60, 60, 60, 60, 60, 33,
	33, 72, 72, 72, 79, 73, 73, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	67, 67, 67, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 66, 66, 66, 66,
	66, 66, 66, 66, 193, 193, 68, 68, 68, 68,
	31, 31, 31, 31, 31, 139, 139, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	83, 83, 32, 32, 81, 81, 82, 84, 84, 80,
	80, 80, 62, 62, 62, 62, 62, 62, 62, 62,
	64, 64, 64, 85, 85, 74, 74, 38, 38, 86,
	86, 87, 87, 88, 88, 89, 89, 90, 90, 93,
	93, 93, 94, 94, 94, 94, 95, 95, 95, 61,
	61, 61, 61, 61, 61, 96, 96, 96, 96, 100,
	100, 75, 75, 77, 77, 76, 78, 101, 101, 105,
	102, 102, 106, 106, 106, 104, 104, 104, 131, 131,
	131, 109, 109, 117, 117, 118, 118, 110, 110, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 121, 121, 122, 122, 122, 130, 130, 126,
	126, 127, 127, 132, 132, 133, 133, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 189,
	190, 137, 138, 138, 138,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 2,
	4, 7, 0, 1, 0, 1, 2, 1, 1, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	4, 5, 6, 6, 6, 5, 5, 5, 6, 5,
	5, 6, 5, 5, 5, 5, 6, 5, 5, 5,
	4, 4, 5, 5, 5, 5, 5, 4, 4, 4,
	4, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 1, 3, 1, 1, 0,
	2, 1, 1, 0, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	113, 114, 116, 115, 141, 117, 134, 50, 153, 154,
	156, 157, 25, 135, 136, 139, 140, -189, 8, 236,
	54, -188, 283, -88, 15, -26, 5, -24, -192, -24,
	-24, -24, -24, -24, -168, 54, -122, 122, 71, 149,
	228, 119, 120, 126, -126, 57, -124, 276, 153, 164,
	158, 185, 177, 175, 178, 215, 66, 156, 224, 137,
	173, 169, 167, 27, 190, 281, 168, 132, 131, 191,
	195, 216, 162, 163, 218, 189, 133, 32, 278, 35,
	145, 219, 193, 188, 184, 187, 161, 183, 39, 197,
	196, 198, 214, 180, 170, 18, 222, 140, 143, 192,
	194, 127, 147, 280, 220, 166, 144, 139, 223, 157,
	217, 226, 38, 202, 160, 130, 154, 151, 181, 146,
	171, 172, 186, 159, 182, 155, 148, 141, 225, 203,
	282, 179, 176, 152, 150, 207, 208, 209, 210, 279,
	221, 174, 204, -110, 122, 124, 120, 120, 121, 122,
	228, 119, 120, -53, -132, 57, -124, 122, 149, 120,
	107, 178, 113, 205, 121, 32, 147, -141, 120, -112,
	150, 207, 208, 209, 210, 57, 217, 216, 211, -132,
	155, -137, -137, -137, -137, -137, -2, -94, 17, 16,
	-5, -3, -189, 6, 20, 21, -30, 40, 41, -25,
	-36, 98, -37, -132, -58, 73, -63, 29, 57, -124,
	23, -62, -59, -80, -78, -79, 107, 108, 96, 97,
	104, 74, 109, -67, -65, -66, -68, -69, -70, 59,
	58, 67, 60, 61, 62, 63, 68, 69, 70, -126,
	-76, -189, 44, 45, 237, 238, 239, 240, 275, 241,
	76, 34, 227, 235, 234, 233, 231, 232, 229, 230,
	125, 228, 102, 236, 264, 265, 266, 267, 268, 269,
	270, 271, 273, 274, 272, 254, 247, 248, 249, 250,
	251, 252, 253, 255, 256, 257, 258, 259, 260, 261,
	262, 263, -110, -40, -41, -42, -43, -55, -79, -189,
	-53, 11, -47, -53, -102, -140, 155, -106, 217, 216,
	-127, -104, -126, -123, 215, 178, 214, 118, 72, 22,
	24, 200, 247, 75, 107, 248, 249, 250, 16, 76,
	106, 237, 251, 113, 48, 229, 230, 227, 228, 205,
	29, 10, 25, 135, 21, 100, 115, 79, 80, 138,
	23, 136, 70, 19, 51, 11, 13, 14, 125, 124,
	91, 121, 46, 8, 109, 26, 88, 42, 28, 44,
	89, 17, 231, 232, 31, 275, 254, 142, 255, 102,
	49, 36, 73, 68, 52, 71, 15, 47, 90, 116,
	236, 45, 119, 6, 242, 30, 134, 258, 257, 256,
	43, 239, 240, 260, 120, 206, 78, 123, 69, 5,
	126, 9, 50, 53, 233, 234, 235, 34, 262, 261,
	263, 77, 12, -169, -164, 57, 121, -53, 236, -126,
	-118, 125, -118, -118, 120, -53, -53, -117, 125, 57,
	-117, -117, -117, -53, 110, -53, 57, 30, 228, 57,
	147, 120, 148, 122, -138, -189, -127, -138, -138, -138,
	151, 152, -138, -113, 212, 52, -138, -190, 56, -95,
	19, 31, -37, -132, -89, -90, -37, -125, 247, 248,
	249, 250, 251, 264, 265, 266, 252, 253, 267, 268,
	269, 254, 255, 270, 271, 273, 274, 272, 258, 257,
	256, 259, 260, 262, 261, 263, -88, -2, -24, 36,
	-28, 21, 65, 11, -129, 72, 71, 88, -128, 22,
	57, -124, -125, 59, 247, 248, 249, 250, 251, 264,
	265, 266, 252, 253, 267, 268, 269, 254, 255, 270,
	271, 273, 274, 272, 258, 257, 256, 259, 260, 262,
	261, 263, 110, -37, -60, 91, 73, 89, 90, 75,
	93, 92, 103, 96, 97, 98, 99, 100, 101, 102,
	94, 95, 106, 81, 82, 83, 84, 85, 86, 87,
	-111, -189, -79, -189, 111, 112, -63, -63, -63, -63,
	-63, -63, -63, -189, -2, -73, -37, -189, -189, -189,
	-189, -189, -189, -189, -189, -189, -83, -37, -189, -193,
	-189, -193, -193, -193, -193, -193, -193, -193, -189, -189,
	-189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
	-189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
	-189, -189, -189, -189, -189, -189, -189, -189, -189, -189,
	-54, 26, -53, 30, 55, -48, -52, -50, -49, -51,
	42, 46, 48, 43, 44, 45, 49, -136, 22, -40,
	-189, -135, 143, -134, 22, -132, -125, 59, -53, -47,
	-191, 55, 11, 53, 55, -102, 155, -103, -107, 218,
	220, 81, -131, -126, 59, 29, 30, 56, 55, -143,
	-146, -148, -147, -149, -144, -145, 175, 176, 107, 179,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	30, 137, 171, 172, 173, 174, 191, 192, 193, 194,
	195, 196, 197, 198, 158, 159, 160, 161, 162, 163,
	164, 166, 167, 168, 169, 170, 57, -138, 122, -185,
	53, 57, 73, 57, -53, -53, -138, 123, -53, 23,
	52, -53, 57, 57, -133, -132, -123, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -115, 206, 213,
	-53, 9, 91, 55, 18, 110, 55, -93, 24, 25,
	-93, -94, -190, -30, -64, -126, 60, 63, -29, 43,
	-53, -37, -37, -71, 68, 73, 69, 70, -128, 98,
	-133, -127, -123, -63, -72, -76, -79, 64, 91, 89,
	90, 75, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -139, 57, 59,
	57, -62, -62, -126, -35, 21, -34, -36, -190, 55,
	-190, -2, -34, -34, -37, -37, -80, -126, -132, -80,
	-34, -28, -81, -82, 77, -80, -190, -34, -35, -34,
	-34, -190, -190, -36, -34, -36, -34, -34, -190, -190,
	-190, -190, -28, -28, -34, -34, -34, -28, -34, -34,
	-28, -34, -34, -34, -34, -28, -34, -34, -34, -98,
	143, -53, -101, -105, -80, -41, -42, -42, -42, -41,
	-42, 42, 42, 42, 47, 42, 47, 42, -49, -134,
	-190, -56, 50, 124, 51, -189, -134, -98, 53, -40,
	-53, -106, -103, 55, 219, 221, 222, 52, -37, -155,
	106, -170, -171, -172, -127, 59, 60, -164, -165, -173,
	127, 130, 126, -166, 121, 28, -160, 68, 73, -156,
	203, -150, 54, -150, -150, -150, -150, -154, 178, -154,
	-154, -154, 54, 54, -150, -150, -150, -158, 54, -158,
	-158, -159, 54, -159, -130, 53, -53, -183, 279, -184,
	57, -138, 23, -138, -119, 118, 115, 116, -180, 114,
	200, 178, 66, 29, 15, 237, 143, 282, 57, 144,
	-53, -53, -138, -114, 11, 91, 38, -37, -37, -133,
	-90, -95, -109, 19, 11, 34, 34, -34, 68, 69,
	70, 110, -189, -72, -63, -63, -63, -33, 138, 72,
	-190, -190, -34, 55, -37, -190, -190, -190, 55, 53,
	22, 55, 11, 110, 55, 11, -190, -34, -84, -82,
	79, -37, -190, -190, -190, -190, -190, -91, 243, -91,
	-190, -190, -190, -190, -190, -91, -91, -91, -91, -34,
	-34, -190, -190, -190, -34, -190, -190, -34, -190, -190,
	-190, -190, -34, -190, -190, -190, -61, 30, 34, -2,
	-189, -189, -57, 55, 12, 81, -45, -44, 52, 53,
	-45, -46, 52, -44, 42, 42, 121, 121, 121, -99,
	-126, -57, -40, -57, -107, -108, 223, 220, 226, 57,
	55, -172, 81, 54, 28, -166, -166, 57, 57, -151,
	29, 68, -157, 204, 60, -154, -154, -155, 30, -155,
	-155, -155, -163, 59, -163, 60, 60, 52, -126, -138,
	-182, -181, -127, -137, -186, 149, 128, 129, 132, 131,
	57, 121, 28, 127, 130, 143, 126, -186, 149, -120,
	-121, 123, 22, 121, 28, 143, -138, -116, 89, 12,
	-132, -132, 39, 110, -53, -39, 11, 98, -127, -35,
	-33, 72, -63, -63, -190, -36, -142, 107, 175, 137,
	173, 169, 189, 180, 202, 171, 203, -139, -142, -63,
	-63, -127, -63, -63, 276, -88, 80, -37, 78, -126,
	-189, -91, -91, -91, -91, -91, -190, -190, -92, -91,
	-92, -92, -190, -92, -92, -190, -92, -92, -92, -92,
	-190, -92, -92, -92, -100, 52, -101, -75, -77, -76,
	-189, -2, -96, -126, -99, -88, -105, -37, -37, -37,
	54, -37, -189, -189, -189, -190, 55, -88, -57, 220,
	224, 225, -171, -172, -175, -174, -126, 57, 57, -153,
	52, 59, 60, 61, 68, 227, 67, 56, -155, -155,
	57, 107, 56, 55, 56, 55, 56, 55, -53, 55,
	81, -137, -126, -137, -126, -53, -137, -126, 59, -37,
	-57, -40, -190, -63, -190, -150, -150, -150, -159, -150,
	163, -150, 163, -190, -190, -190, 55, 19, -190, 55,
	19, -189, -32, 242, -37, -88, 143, -92, -92, -92,
	-92, -92, 27, -100, 55, -190, -190, -190, 55, 110,
	-190, -94, -97, -126, -97, -97, -97, -135, -126, -94,
	56, 55, -150, -161, 200, 9, -154, 59, -154, 60,
	60, -138, -181, -172, 54, 26, -85, 13, -154, 57,
	-63, -63, -63, -63, -63, -190, 59, -190, 16, 28,
	-77, 34, -2, -189, -126, -126, 55, 56, -190, -190,
	-190, -56, -177, -176, 53, 133, 66, -174, -162, 127,
	28, 126, 227, -155, -155, 56, 56, -97, -189, -86,
	14, 16, -190, -190, -190, -190, -31, 91, 279, -73,
	9, -75, -2, 110, -126, -176, 57, -167, 81, 59,
	-152, 66, 28, 28, 56, -178, -179, 143, -87, -37,
	-125, -74, -38, -37, -125, -190, 277, 49, 280, -88,
	-101, -190, -126, 60, 59, -185, -190, 55, -126, 55,
	39, 278, 281, -190, -183, -179, 34, -38, 39, 145,
	279, 146, 280, -189, 281, -63, 142, -190, -190,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 553, 0, 277, 277, 277, 277, 277, 277, 0,
	624, 607, 0, 0, 0, 0, -2, 267, 268, 0,
	270, 271, 871, 871, 871, 871, 871, 0, 33, 34,
	869, 1, 3, 562, 0, 0, 281, 284, 279, 0,
	607, 0, 0, 0, 60, 0, 0, 830, 0, 831,
	605, 605, 605, 625, 626, 629, 630, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 0, 0, 608, 0, 603, 0, 603,
	603, 603, 0, 226, 357, 633, 634, 830, 831, 0,
	0, 0, 0, 872, 872, 872, 872, 0, 872, 255,
	244, 246, 247, 248, 249, 872, 264, 265, 254, 266,
	269, 272, 273, 274, 275, 276, 27, 566, 0, 0,
	553, 29, 0, 277, 282, 283, 287, 285, 286, 278,
	0, 295, 304, 0, 365, 0, 370, 372, -2, -2,
	0, 407, 408, 409, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 434, 435, 436, 437, 438, 439, 532,
	533, 534, 535, 536, 537, 538, 539, 374, 375, 529,
	586, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	520, 0, 494, 494, 494, 494, 494, 494, 494, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 315, 316, 317, 337, 0,
	339, 0, 0, 41, 45, 0, 821, 590, -2, -2,
	0, 0, 631, 632, -2, 750, -2, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 0, 77, 0, 0, 872, 0, 67,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 225, 0, 227, 872, 872, 872, 872,
	872, 872, 872, 872, 236, 873, 874, 237, 238, 239,
	872, 872, 241, 0, 256, 0, 250, 28, 870, 22,
	0, 0, 563, 0, 554, 555, 559, 559, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 562, 27, 284, 0,
	289, 288, 280, 0, 296, 0, 0, 0, 305, 0,
	307, 308, 309, 310, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 393, 394, 395, 396, 397, 398,
	371, 0, 385, 0, 0, 0, 427, 428, 429, 430,
	431, 432, 0, 291, 27, 0, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 521, 0, 486,
	0, 487, 488, 489, 490, 491, 492, 493, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 287, 0, 0, 0, 287, 0,
	0, 287, 0, 0, 0, 0, 287, 0, 0, 0,
	43, 0, 356, 0, 0, 0, 0, 0, 0, 0,
	345, 0, 0, 348, 0, 0, 0, 0, 338, 0,
	0, 359, 794, 340, 0, 342, 343, 344, -2, 0,
	0, 0, 39, 40, 0, 46, 821, 48, 49, 0,
	0, 0, 157, 598, 599, 600, 596, 185, 0, 140,
	136, 82, 83, 84, 129, 86, 129, 129, 129, 129,
	154, 154, 154, 154, 112, 113, 114, 115, 116, 0,
	0, 99, 129, 129, 129, 103, 119, 120, 121, 122,
	123, 124, 125, 126, 87, 88, 89, 90, 91, 92,
	93, 131, 131, 131, 133, 133, 627, 62, 0, 70,
	0, 872, 0, 872, 75, 0, 201, 0, 220, 604,
	0, 872, 223, 224, 358, 635, 636, 228, 229, 230,
	231, 232, 233, 234, 235, 240, 243, 257, 251, 252,
	245, 567, 0, 0, 0, 0, 0, 557, 560, 561,
	558, 566, 30, 287, 0, 540, 0, 0, 0, 290,
	25, 366, 367, 369, 386, 0, 388, 390, 306, 297,
	0, 530, -2, 376, 377, 401, 402, 403, 0, 0,
	0, 0, 399, 381, 0, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 426, 505, 506,
	0, 424, 425, 433, 0, 0, 292, 293, 404, 0,
	585, 27, 0, 0, 0, 0, 0, 529, 0, 0,
	0, 0, 527, 524, 0, 0, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 355, 363, 587, 0, 314, 333, 333, 335, 0,
	330, 346, 347, 349, 0, 351, 0, 353, 354, 318,
	319, 320, 0, 0, 0, 0, 341, 363, 0, 363,
	42, 591, 47, 0, 0, 52, 53, 592, 593, 594,
	0, 76, 186, 188, 191, 192, 193, 78, 79, 0,
	0, 0, 0, 0, 180, 181, 143, 141, 0, 138,
	137, 85, 0, 154, 154, 106, 107, 157, 0, 157,
	157, 157, 0, 0, 100, 101, 102, 94, 0, 95,
	96, 97, 0, 98, 0, 0, 872, 64, 0, 68,
	69, 65, 606, 66, 871, 0, 0, 619, 202, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 0,
	219, 872, 222, 260, 0, 0, 0, 564, 565, 0,
	556, 23, 0, 601, 602, 541, 542, 311, 387, 389,
	391, 0, 291, 378, 399, 382, 0, 379, 0, 0,
	373, 440, 0, 0, 406, -2, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 525,
	0, 0, 485, 496, 497, 498, 499, 460, 0, 461,
	0, 0, 0, 0, 0, 467, 468, 469, 470, 0,
	0, 302, 302, 302, 0, 302, 302, 0, 302, 302,
	302, 302, 0, 302, 302, 302, 579, 0, 0, -2,
	0, 0, 553, 0, 0, 0, 326, 334, 0, 0,
	327, 328, 0, 329, 350, 352, 0, 0, 0, 0,
	324, 553, 363, 38, 50, 51, 0, 0, 57, 158,
	0, 189, 0, 0, 175, 0, 0, 178, 179, 150,
	0, 142, 81, 139, 0, 157, 157, 108, 0, 109,
	110, 111, 0, 127, 0, 0, 0, 0, 628, 63,
	71, 72, 0, 194, 871, 0, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 871, 0, 0,
	871, 620, 621, 622, 623, 0, 221, 242, 0, 0,
	258, 259, 568, 0, 24, 363, 0, 298, 531, 0,
	380, 0, 400, 383, 441, 294, 0, 129, 129, 510,
	129, 133, 513, 129, 515, 129, 518, 0, 0, 0,
	0, 530, 0, 0, 0, 522, 484, 528, 0, 299,
	553, 462, 463, 464, 465, 466, 302, 302, 445, 303,
	446, 447, 302, 449, 450, 302, 452, 453, 454, 455,
	302, 457, 458, 459, 31, 0, 579, 569, 581, 583,
	0, 27, 0, 575, 0, 562, 588, 364, 589, 331,
	0, 336, 0, 0, 0, 339, 0, 562, 37, 54,
	55, 56, 187, 190, 0, 182, 129, 176, 177, 152,
	0, 144, 145, 146, 147, 148, 149, 130, 104, 105,
	155, 156, 154, 0, 154, 0, 134, 0, 872, 0,
	0, 195, 0, 196, 198, 199, 200, 0, 261, 262,
	543, 312, 442, 384, 473, 507, 154, 511, 512, 514,
	516, 517, 519, 475, 474, 476, 0, 0, 479, 0,
	0, 0, 0, 0, 526, 0, 0, 443, 444, 448,
	451, 456, 0, 32, 0, 584, -2, 0, 0, 0,
	44, 35, 0, 322, 0, 0, 0, 359, 325, 36,
	167, 0, 184, 159, 153, 0, 157, 128, 157, 0,
	0, 61, 73, 74, 0, 0, 549, 0, 508, 509,
	0, 0, 0, 0, 500, 483, 523, 300, 0, 0,
	582, 0, -2, 0, 577, 576, 0, 332, 360, 361,
	362, 321, 166, 168, 0, 173, 0, 183, 164, 0,
	161, 163, 151, 117, 118, 132, 135, 0, 0, 26,
	0, 0, 477, 478, 480, 481, 0, 0, 0, 553,
	0, 572, 27, 0, 323, 169, 170, 0, 174, 172,
	80, 0, 160, 162, 67, 0, 215, 0, 550, 551,
	552, 544, 545, 547, 548, 482, 0, 0, 0, 0,
	580, -2, 578, 171, 165, 70, 214, 0, 0, 0,
	501, 0, 504, 301, 197, 216, 0, 546, 502, 0,
	0, 0, 0, 0, 503, 0, 0, 217, 218,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 283,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:311
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:316
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:317
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:321
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:344
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:352
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:356
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:362
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:369
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:379
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:396
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:408
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:424
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:430
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:449
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:454
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:458
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:463
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:467
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:491
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:495
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:501
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:505
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:509
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:548
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:557
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:578
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:593
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:609
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:615
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:621
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:628
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:640
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:644
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:650
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:661
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:672
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:869
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:874
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:878
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:883
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:887
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:895
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:905
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:913
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:922
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:926
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:932
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:945
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:949
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:965
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:974
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:978
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:983
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:996
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1000
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1014
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1018
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1026
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1045
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1049
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1055
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1059
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1069
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1074
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1137
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1153
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1181
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1185
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1189
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1193
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1206
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1216
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1221
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1226
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1230
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1249
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1259
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1265
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1269
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1275
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1281
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1289
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1306
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1316
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1321
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1384
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1444
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1448
		{
			yyVAL.str = "extended "
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1454
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1458
		{
			yyVAL.str = "full "
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1478
		{
			yyVAL.showFilter = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1482
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1486
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = SessionStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = GlobalStr
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Begin{}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Commit{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Rollback{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &OtherRead{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &OtherRead{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1559
		{
			setAllowComments(yylex, true)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1569
		{
			yyVAL.bytes2 = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = UnionStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.str = UnionAllStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.str = UnionDistinctStr
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = SQLCacheStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1605
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.str = DistinctStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = StraightJoinHint
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1623
		{
			yyVAL.selectExprs = nil
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1655
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1666
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 301:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1670
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1675
		{
			yyVAL.over = nil
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.over = yyDollar[1].over
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1686
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1694
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1721
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1745
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1749
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1759
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1769
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1792
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1796
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1800
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1804
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1808
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1816
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1820
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1826
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1828
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1844
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = JoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = JoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = CrossJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = StraightJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1883
		{
			yyVAL.str = LeftJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1887
		{
			yyVAL.str = LeftJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = RightJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = RightJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = NaturalJoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1915
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1929
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1934
		{
			yyVAL.indexHints = nil
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1938
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1942
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1946
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1951
		{
			yyVAL.expr = nil
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1955
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1969
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1973
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2011
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2015
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2019
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2023
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2027
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2031
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2039
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2043
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = IsNullStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = IsNotNullStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = IsTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = IsNotTrueStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = IsFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = IsNotFalseStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.str = EqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.str = LessThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = GreaterThanStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = LessEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = GreaterEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = NotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2108
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2112
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2244
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 483:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2561
		{
			yyVAL.str = BooleanModeStr
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 503:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2569
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2573
		{
			yyVAL.str = QueryExpansionStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2583
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2593
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2597
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2609
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = nil
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2653
		{
			yyVAL.str = string("")
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2673
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2696
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &NullVal{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2754
		{
			yyVAL.exprs = nil
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = nil
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2802
		{
			yyVAL.orderBy = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2831
		{
			yyVAL.str = AscScr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.str = AscScr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.str = DescScr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2844
		{
			yyVAL.limit = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2852
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2856
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.str = ForUpdateStr
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.str = ShareModeStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2895
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2899
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2903
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2914
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2922
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2927
		{
			yyVAL.updateExprs = nil
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2931
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2941
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2963
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2977
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2983
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2993
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2999
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3007
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3014
		{
			yyVAL.bytes = []byte("charset")
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = &Default{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3038
		{
			yyVAL.byt = 0
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3040
		{
			yyVAL.byt = 1
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3043
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3045
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3048
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3050
		{
			yyVAL.str = IgnoreStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3072
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3075
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3077
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3088
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3095
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3097
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			decNesting(yylex)
		}
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3405
		{
			forceEOF(yylex)
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3410
		{
			forceEOF(yylex)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			forceEOF(yylex)
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3418
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
