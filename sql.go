//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const MAXVALUE = 57457
const PARTITION = 57458
const REORGANIZE = 57459
const LESS = 57460
const THAN = 57461
const BIT = 57462
const TINYINT = 57463
const SMALLINT = 57464
const MEDIUMINT = 57465
const INT = 57466
const INTEGER = 57467
const BIGINT = 57468
const INTNUM = 57469
const REAL = 57470
const DOUBLE = 57471
const FLOAT_TYPE = 57472
const DECIMAL = 57473
const NUMERIC = 57474
const TIME = 57475
const TIMESTAMP = 57476
const DATETIME = 57477
const YEAR = 57478
const CHAR = 57479
const VARCHAR = 57480
const BOOL = 57481
const CHARACTER = 57482
const VARBINARY = 57483
const NCHAR = 57484
const TEXT = 57485
const TINYTEXT = 57486
const MEDIUMTEXT = 57487
const LONGTEXT = 57488
const BLOB = 57489
const TINYBLOB = 57490
const MEDIUMBLOB = 57491
const LONGBLOB = 57492
const JSON = 57493
const ENUM = 57494
const NULLX = 57495
const AUTO_INCREMENT = 57496
const APPROXNUM = 57497
const SIGNED = 57498
const UNSIGNED = 57499
const ZEROFILL = 57500
const DATABASES = 57501
const TABLES = 57502
const VITESS_KEYSPACES = 57503
const VITESS_SHARDS = 57504
const VSCHEMA_TABLES = 57505
const NAMES = 57506
const CHARSET = 57507
const CURRENT_TIMESTAMP = 57508
const DATABASE = 57509
const CURRENT_DATE = 57510
const CURRENT_TIME = 57511
const LOCALTIME = 57512
const LOCALTIMESTAMP = 57513
const UTC_DATE = 57514
const UTC_TIME = 57515
const UTC_TIMESTAMP = 57516
const REPLACE = 57517
const CONVERT = 57518
const CAST = 57519
const GROUP_CONCAT = 57520
const SEPARATOR = 57521
const MATCH = 57522
const AGAINST = 57523
const BOOLEAN = 57524
const LANGUAGE = 57525
const WITH = 57526
const QUERY = 57527
const EXPANSION = 57528
const UNUSED = 57529

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 269,
	79, 570,
	108, 570,
	-2, 39,
	-1, 271,
	79, 592,
	108, 592,
	-2, 41,
	-1, 276,
	108, 470,
	-2, 466,
	-1, 277,
	108, 471,
	-2, 467,
	-1, 556,
	5, 22,
	-2, 417,
	-1, 591,
	108, 473,
	-2, 469,
	-1, 749,
	5, 23,
	-2, 294,
	-1, 841,
	5, 23,
	-2, 418,
	-1, 915,
	5, 22,
	-2, 420,
	-1, 986,
	5, 23,
	-2, 421,
}

const yyPrivate = 57344

const yyLast = 7678

var yyAct = [...]int{

	339, 40, 995, 515, 299, 857, 732, 268, 312, 617,
	242, 594, 630, 922, 582, 733, 450, 689, 892, 405,
	388, 338, 590, 46, 699, 593, 729, 773, 696, 811,
	713, 803, 603, 277, 234, 666, 310, 301, 741, 361,
	279, 40, 626, 367, 392, 45, 272, 257, 251, 247,
	1023, 142, 1014, 377, 262, 1020, 1009, 1018, 50, 65,
	1013, 1008, 905, 137, 273, 143, 137, 953, 283, 235,
	236, 237, 238, 972, 256, 862, 863, 864, 258, 52,
	53, 54, 55, 646, 865, 240, 239, 137, 137, 769,
	610, 930, 618, 137, 978, 948, 946, 644, 1017, 1015,
	996, 793, 605, 290, 285, 128, 698, 578, 580, 289,
	970, 790, 458, 453, 527, 389, 3, 792, 127, 752,
	128, 130, 131, 132, 650, 751, 750, 605, 281, 307,
	280, 893, 286, 643, 871, 998, 481, 480, 490, 491,
	483, 484, 485, 486, 487, 488, 489, 482, 139, 611,
	492, 129, 960, 895, 774, 763, 241, 504, 505, 938,
	844, 137, 452, 137, 815, 756, 514, 137, 409, 294,
	492, 467, 468, 137, 897, 296, 901, 470, 896, 579,
	894, 640, 645, 638, 872, 899, 482, 408, 470, 492,
	336, 907, 604, 714, 898, 827, 618, 602, 601, 900,
	902, 866, 648, 651, 673, 971, 969, 791, 714, 789,
	659, 661, 662, 1007, 300, 660, 63, 604, 671, 672,
	670, 455, 469, 468, 767, 991, 642, 481, 480, 490,
	491, 483, 484, 485, 486, 487, 488, 489, 482, 470,
	641, 492, 292, 822, 607, 369, 274, 999, 40, 608,
	481, 480, 490, 491, 483, 484, 485, 486, 487, 488,
	489, 482, 647, 390, 492, 804, 43, 934, 821, 363,
	820, 933, 1002, 649, 297, 298, 669, 485, 486, 487,
	488, 489, 482, 451, 314, 492, 469, 468, 451, 137,
	782, 469, 468, 796, 797, 798, 137, 137, 137, 781,
	690, 65, 691, 470, 457, 469, 468, 365, 470, 501,
	503, 770, 909, 981, 465, 932, 65, 463, 137, 780,
	137, 65, 470, 137, 1004, 300, 137, 870, 137, 483,
	484, 485, 486, 487, 488, 489, 482, 513, 261, 492,
	517, 518, 519, 520, 521, 522, 523, 859, 526, 528,
	528, 528, 528, 528, 528, 528, 528, 536, 537, 538,
	539, 964, 300, 364, 961, 962, 927, 926, 300, 545,
	764, 557, 809, 300, 544, 262, 262, 262, 262, 262,
	692, 559, 273, 877, 876, 874, 873, 843, 300, 704,
	300, 390, 449, 574, 575, 291, 542, 543, 262, 280,
	65, 374, 300, 411, 410, 137, 974, 973, 137, 137,
	137, 137, 137, 867, 546, 273, 704, 373, 584, 399,
	137, 701, 560, 406, 137, 563, 19, 137, 839, 591,
	402, 137, 137, 619, 620, 621, 586, 47, 581, 572,
	836, 374, 469, 468, 65, 506, 507, 508, 509, 510,
	511, 512, 598, 587, 561, 562, 19, 564, 404, 470,
	400, 632, 398, 451, 529, 530, 531, 532, 533, 534,
	535, 730, 43, 404, 406, 583, 809, 374, 404, 654,
	875, 809, 914, 809, 634, 757, 556, 137, 628, 629,
	540, 248, 137, 43, 583, 137, 65, 667, 126, 612,
	631, 883, 43, 847, 40, 760, 576, 490, 491, 483,
	484, 485, 486, 487, 488, 489, 482, 374, 517, 492,
	705, 481, 480, 490, 491, 483, 484, 485, 486, 487,
	488, 489, 482, 716, 591, 492, 406, 43, 742, 743,
	861, 693, 694, 627, 622, 57, 65, 261, 783, 745,
	730, 255, 19, 461, 17, 552, 735, 548, 40, 748,
	65, 747, 731, 273, 274, 566, 718, 711, 613, 614,
	615, 616, 589, 595, 739, 554, 565, 734, 555, 1016,
	721, 749, 722, 623, 624, 625, 472, 569, 567, 252,
	253, 65, 570, 568, 502, 1012, 795, 274, 43, 755,
	404, 404, 746, 246, 665, 758, 753, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 471, 771, 772, 706, 707, 65, 571, 710,
	383, 384, 655, 576, 1011, 762, 451, 368, 469, 468,
	727, 726, 775, 717, 302, 719, 720, 776, 777, 778,
	407, 366, 785, 404, 451, 470, 303, 766, 728, 261,
	261, 261, 261, 261, 993, 304, 362, 992, 65, 65,
	794, 912, 786, 736, 761, 261, 837, 703, 936, 636,
	460, 387, 261, 249, 250, 368, 725, 65, 243, 984,
	244, 47, 667, 983, 724, 956, 583, 806, 957, 931,
	466, 807, 49, 695, 816, 404, 799, 51, 397, 44,
	1, 818, 819, 639, 994, 823, 856, 715, 600, 592,
	829, 278, 830, 831, 832, 833, 56, 599, 473, 327,
	326, 329, 330, 331, 332, 65, 779, 968, 328, 333,
	840, 841, 842, 826, 929, 274, 606, 768, 738, 609,
	860, 849, 850, 851, 990, 765, 595, 137, 838, 414,
	668, 516, 415, 845, 852, 413, 417, 416, 525, 412,
	140, 855, 480, 490, 491, 483, 484, 485, 486, 487,
	488, 489, 482, 854, 404, 492, 386, 391, 401, 810,
	65, 65, 633, 65, 65, 58, 788, 787, 337, 868,
	869, 800, 801, 802, 808, 379, 382, 383, 384, 380,
	637, 381, 385, 886, 284, 742, 743, 137, 824, 500,
	723, 137, 267, 880, 920, 784, 404, 65, 135, 737,
	588, 233, 882, 541, 887, 591, 360, 262, 890, 903,
	735, 904, 888, 916, 404, 891, 65, 982, 906, 955,
	910, 825, 135, 135, 275, 913, 919, 911, 135, 524,
	712, 734, 313, 658, 924, 925, 758, 325, 322, 324,
	137, 323, 547, 553, 474, 311, 305, 65, 65, 451,
	577, 65, 260, 65, 65, 65, 370, 378, 65, 376,
	656, 657, 813, 663, 664, 935, 939, 940, 379, 382,
	383, 384, 380, 375, 381, 385, 951, 265, 949, 950,
	944, 744, 65, 740, 259, 735, 835, 40, 952, 853,
	595, 958, 595, 997, 551, 20, 135, 963, 135, 965,
	966, 48, 135, 967, 884, 885, 734, 975, 135, 516,
	254, 16, 708, 709, 15, 14, 13, 404, 404, 24,
	404, 858, 977, 12, 11, 668, 10, 980, 915, 9,
	8, 65, 362, 7, 986, 985, 273, 6, 5, 4,
	245, 18, 65, 2, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 0, 881, 0, 0, 0, 1001, 0,
	0, 0, 0, 0, 65, 65, 0, 0, 65, 1003,
	0, 0, 1006, 813, 0, 754, 404, 1010, 928, 0,
	0, 0, 0, 937, 0, 0, 0, 595, 1019, 0,
	0, 0, 0, 0, 0, 0, 1024, 1025, 0, 0,
	65, 0, 959, 0, 917, 918, 0, 0, 921, 0,
	923, 923, 923, 941, 942, 404, 943, 0, 0, 945,
	0, 947, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 135, 394, 135, 0, 0, 0, 0, 0, 404,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 805, 135, 263, 135, 0, 0, 135, 0,
	0, 135, 0, 464, 0, 0, 0, 0, 0, 0,
	0, 853, 481, 480, 490, 491, 483, 484, 485, 486,
	487, 488, 489, 482, 134, 0, 492, 0, 858, 0,
	0, 261, 0, 0, 0, 0, 817, 0, 0, 404,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 266,
	0, 0, 0, 0, 282, 0, 0, 0, 274, 1021,
	0, 987, 988, 0, 0, 989, 0, 516, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 848, 0, 0,
	135, 0, 275, 135, 135, 135, 135, 135, 0, 0,
	0, 0, 0, 0, 0, 573, 0, 1005, 0, 135,
	0, 0, 394, 0, 0, 0, 135, 135, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 464, 0,
	0, 0, 287, 0, 288, 0, 0, 0, 293, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 19, 41,
	21, 22, 0, 0, 0, 0, 0, 0, 0, 908,
	0, 0, 135, 0, 0, 0, 33, 135, 0, 0,
	135, 23, 38, 39, 481, 480, 490, 491, 483, 484,
	485, 486, 487, 488, 489, 482, 0, 476, 492, 479,
	32, 0, 0, 0, 43, 493, 494, 495, 496, 497,
	498, 499, 0, 477, 478, 475, 481, 480, 490, 491,
	483, 484, 485, 486, 487, 488, 489, 482, 0, 0,
	492, 0, 702, 464, 0, 0, 0, 702, 702, 0,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 954, 0, 0, 0, 702, 702, 702, 702, 0,
	372, 0, 0, 25, 26, 28, 27, 30, 0, 396,
	702, 0, 0, 275, 420, 0, 31, 34, 35, 0,
	0, 36, 37, 29, 0, 0, 0, 0, 0, 454,
	0, 456, 0, 0, 459, 0, 432, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 437, 438, 439, 440,
	441, 442, 443, 0, 444, 445, 446, 447, 448, 433,
	434, 435, 436, 418, 419, 1000, 516, 421, 0, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 635, 0,
	0, 0, 0, 652, 0, 0, 653, 0, 0, 98,
	0, 0, 697, 0, 309, 0, 0, 0, 79, 0,
	308, 0, 0, 0, 347, 87, 0, 0, 106, 94,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	0, 0, 135, 0, 43, 0, 135, 276, 327, 326,
	329, 330, 331, 332, 0, 0, 74, 328, 333, 334,
	335, 0, 0, 306, 320, 0, 346, 0, 702, 0,
	0, 0, 0, 0, 464, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 700, 0,
	0, 0, 358, 0, 319, 135, 0, 315, 316, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 356, 0, 101, 0, 0, 0, 75,
	0, 105, 99, 0, 0, 100, 104, 88, 110, 68,
	114, 108, 92, 83, 84, 67, 0, 103, 78, 82,
	77, 97, 111, 112, 76, 124, 71, 119, 70, 72,
	118, 96, 109, 115, 93, 90, 69, 113, 91, 89,
	85, 80, 0, 0, 0, 107, 116, 125, 0, 0,
	120, 121, 122, 95, 73, 348, 357, 354, 355, 352,
	353, 351, 350, 349, 359, 342, 343, 345, 0, 344,
	66, 0, 86, 123, 102, 81, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 834, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 64, 0, 596, 597, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 759, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 878, 198,
	0, 0, 879, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 64, 0, 596, 597, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 976, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 43, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 889, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 64, 0, 403, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 221, 211, 184, 224, 162, 176,
	232, 177, 178, 205, 150, 192, 98, 174, 0, 165,
	145, 171, 146, 163, 186, 79, 189, 161, 213, 195,
	223, 230, 87, 200, 0, 106, 94, 0, 0, 188,
	215, 190, 210, 183, 206, 155, 199, 225, 175, 203,
	226, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 202, 220, 173, 204, 144,
	201, 0, 148, 151, 231, 218, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 187, 191, 207, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 198,
	0, 0, 0, 152, 149, 0, 185, 0, 0, 0,
	154, 0, 167, 208, 0, 216, 182, 138, 219, 180,
	179, 222, 101, 214, 164, 172, 75, 170, 105, 99,
	0, 197, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	147, 0, 107, 116, 125, 160, 217, 120, 121, 122,
	95, 73, 158, 159, 156, 157, 193, 194, 227, 228,
	229, 209, 153, 0, 0, 212, 196, 66, 0, 86,
	123, 102, 81, 117, 98, 0, 0, 0, 0, 309,
	0, 0, 0, 79, 0, 308, 0, 0, 0, 347,
	87, 0, 0, 106, 94, 0, 0, 0, 0, 340,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 276, 327, 326, 329, 330, 331, 332, 0,
	0, 74, 328, 333, 334, 335, 0, 0, 306, 320,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 318, 700, 0, 0, 0, 358, 0, 319,
	0, 0, 315, 316, 321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 356, 0,
	101, 0, 0, 0, 75, 0, 105, 99, 0, 0,
	100, 104, 88, 110, 68, 114, 108, 92, 83, 84,
	67, 0, 103, 78, 82, 77, 97, 111, 112, 76,
	124, 71, 119, 70, 72, 118, 96, 109, 115, 93,
	90, 69, 113, 91, 89, 85, 80, 0, 0, 0,
	107, 116, 125, 0, 0, 120, 121, 122, 95, 73,
	348, 357, 354, 355, 352, 353, 351, 350, 349, 359,
	342, 343, 345, 0, 344, 66, 0, 86, 123, 102,
	81, 117, 98, 0, 0, 0, 0, 309, 0, 0,
	0, 79, 0, 308, 0, 0, 0, 347, 87, 0,
	0, 106, 94, 0, 0, 0, 0, 340, 341, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 300,
	276, 327, 326, 329, 330, 331, 332, 0, 0, 74,
	328, 333, 334, 335, 0, 0, 306, 320, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 0, 0, 0, 0, 358, 0, 319, 0, 0,
	315, 316, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 356, 0, 101, 0,
	0, 0, 75, 0, 105, 99, 0, 0, 100, 104,
	88, 110, 68, 114, 108, 92, 83, 84, 67, 0,
	103, 78, 82, 77, 97, 111, 112, 76, 124, 71,
	119, 70, 72, 118, 96, 109, 115, 93, 90, 69,
	113, 91, 89, 85, 80, 0, 0, 0, 107, 116,
	125, 0, 0, 120, 121, 122, 95, 73, 348, 357,
	354, 355, 352, 353, 351, 350, 349, 359, 342, 343,
	345, 19, 344, 66, 0, 86, 123, 102, 81, 117,
	0, 0, 98, 0, 0, 0, 0, 309, 0, 0,
	0, 79, 0, 308, 0, 0, 0, 347, 87, 0,
	0, 106, 94, 0, 0, 0, 0, 340, 341, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	276, 327, 326, 329, 330, 331, 332, 0, 0, 74,
	328, 333, 334, 335, 0, 0, 306, 320, 0, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	318, 0, 0, 0, 0, 358, 0, 319, 0, 0,
	315, 316, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 356, 0, 101, 0,
	0, 0, 75, 0, 105, 99, 0, 0, 100, 104,
	88, 110, 68, 114, 108, 92, 83, 84, 67, 0,
	103, 78, 82, 77, 97, 111, 112, 76, 124, 71,
	119, 70, 72, 118, 96, 109, 115, 93, 90, 69,
	113, 91, 89, 85, 80, 0, 0, 0, 107, 116,
	125, 0, 0, 120, 121, 122, 95, 73, 348, 357,
	354, 355, 352, 353, 351, 350, 349, 359, 342, 343,
	345, 0, 344, 66, 0, 86, 123, 102, 81, 117,
	98, 0, 0, 0, 0, 309, 0, 0, 0, 79,
	0, 308, 0, 0, 0, 347, 87, 0, 0, 106,
	94, 0, 0, 0, 0, 340, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 276, 327,
	326, 329, 330, 331, 332, 0, 0, 74, 328, 333,
	334, 335, 0, 0, 306, 320, 0, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 318, 0,
	0, 0, 0, 358, 0, 319, 0, 0, 315, 316,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 356, 0, 101, 0, 0, 0,
	75, 0, 105, 99, 0, 0, 100, 104, 88, 110,
	68, 114, 108, 92, 83, 84, 67, 0, 103, 78,
	82, 77, 97, 111, 112, 76, 124, 71, 119, 70,
	72, 118, 96, 109, 115, 93, 90, 69, 113, 91,
	89, 85, 80, 0, 0, 0, 107, 116, 125, 0,
	0, 120, 121, 122, 95, 73, 348, 357, 354, 355,
	352, 353, 351, 350, 349, 359, 342, 343, 345, 98,
	344, 66, 0, 86, 123, 102, 81, 117, 79, 0,
	0, 0, 0, 0, 347, 87, 0, 0, 106, 94,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 0, 276, 327, 326,
	329, 330, 331, 332, 0, 0, 74, 328, 333, 334,
	335, 0, 0, 0, 320, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 318, 0, 0,
	0, 0, 358, 0, 319, 0, 0, 315, 316, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 356, 0, 101, 0, 0, 0, 75,
	0, 105, 99, 0, 1022, 100, 104, 88, 110, 68,
	114, 108, 92, 83, 84, 67, 0, 103, 78, 82,
	77, 97, 111, 112, 76, 124, 71, 119, 70, 72,
	118, 96, 109, 115, 93, 90, 69, 113, 91, 89,
	85, 80, 0, 0, 0, 107, 116, 125, 0, 0,
	120, 121, 122, 95, 73, 348, 357, 354, 355, 352,
	353, 351, 350, 349, 359, 342, 343, 345, 98, 344,
	66, 0, 86, 123, 102, 81, 117, 79, 0, 0,
	0, 0, 0, 347, 87, 0, 0, 106, 94, 0,
	0, 0, 0, 340, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 276, 327, 326, 329,
	330, 331, 332, 0, 0, 74, 328, 333, 334, 335,
	0, 0, 0, 320, 0, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 318, 0, 0, 0,
	0, 358, 0, 319, 0, 0, 315, 316, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 356, 0, 101, 0, 0, 0, 75, 0,
	105, 99, 0, 0, 100, 104, 88, 110, 68, 114,
	108, 92, 83, 84, 67, 0, 103, 78, 82, 77,
	97, 111, 112, 76, 124, 71, 119, 70, 72, 118,
	96, 109, 115, 93, 90, 69, 113, 91, 89, 85,
	80, 0, 0, 0, 107, 116, 125, 0, 0, 120,
	121, 122, 95, 73, 348, 357, 354, 355, 352, 353,
	351, 350, 349, 359, 342, 343, 345, 98, 344, 66,
	0, 86, 123, 102, 81, 117, 79, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 106, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	481, 480, 490, 491, 483, 484, 485, 486, 487, 488,
	489, 482, 0, 0, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 101, 0, 0, 0, 75, 0, 105,
	99, 0, 0, 100, 104, 88, 110, 68, 114, 108,
	92, 83, 84, 67, 0, 103, 78, 82, 77, 97,
	111, 112, 76, 124, 71, 119, 70, 72, 118, 96,
	109, 115, 93, 90, 69, 113, 91, 89, 85, 80,
	0, 0, 0, 107, 116, 125, 0, 0, 120, 121,
	122, 95, 73, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 812, 0, 0, 0, 66, 79,
	86, 123, 102, 81, 117, 0, 87, 0, 0, 106,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	814, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 469, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 101, 0, 0, 0,
	75, 0, 105, 99, 0, 0, 100, 104, 88, 110,
	68, 114, 108, 92, 83, 84, 67, 0, 103, 78,
	82, 77, 97, 111, 112, 76, 124, 71, 119, 70,
	72, 118, 96, 109, 115, 93, 90, 69, 113, 91,
	89, 85, 80, 0, 0, 0, 107, 116, 125, 98,
	0, 120, 121, 122, 95, 73, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 106, 94,
	0, 66, 0, 86, 123, 102, 81, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	59, 0, 0, 0, 62, 101, 0, 0, 0, 75,
	0, 105, 99, 0, 0, 100, 104, 88, 110, 68,
	114, 108, 92, 83, 84, 67, 0, 103, 78, 82,
	77, 97, 111, 112, 76, 124, 71, 119, 70, 72,
	118, 96, 109, 115, 93, 90, 69, 113, 91, 89,
	85, 80, 0, 0, 0, 107, 116, 125, 0, 0,
	120, 121, 122, 95, 73, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	66, 0, 86, 123, 102, 81, 117, 79, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 106, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 101, 0, 0, 0, 75, 0,
	105, 99, 0, 0, 100, 104, 88, 110, 68, 114,
	108, 92, 83, 84, 67, 0, 103, 78, 82, 77,
	97, 111, 112, 76, 124, 71, 119, 70, 72, 118,
	96, 109, 115, 93, 90, 69, 113, 91, 89, 85,
	80, 0, 0, 0, 107, 116, 125, 0, 0, 120,
	121, 122, 95, 73, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 66,
	0, 86, 123, 102, 81, 117, 79, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 106, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 101, 0, 0, 0, 75, 0, 105,
	99, 0, 0, 100, 104, 88, 110, 68, 114, 108,
	92, 83, 84, 67, 0, 103, 78, 82, 77, 97,
	111, 112, 76, 124, 71, 119, 70, 72, 118, 96,
	109, 115, 93, 90, 69, 113, 91, 89, 85, 80,
	0, 0, 0, 107, 116, 125, 98, 0, 120, 121,
	122, 95, 73, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 106, 94, 0, 66, 0,
	86, 123, 102, 81, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 0, 549, 0, 0,
	550, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 101, 0, 0, 0, 75, 0, 105, 99,
	0, 0, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	0, 0, 107, 116, 125, 0, 0, 120, 121, 122,
	95, 73, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 393, 0, 0, 0, 66, 79, 86,
	123, 102, 81, 117, 0, 87, 0, 0, 106, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 395,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 101, 0, 0, 0, 75,
	0, 105, 99, 0, 0, 100, 104, 88, 110, 68,
	114, 108, 92, 83, 84, 67, 0, 103, 78, 82,
	77, 97, 111, 112, 76, 124, 71, 119, 70, 72,
	118, 96, 109, 115, 93, 90, 69, 113, 91, 89,
	85, 80, 0, 0, 0, 107, 116, 125, 98, 0,
	120, 121, 122, 95, 73, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 106, 94, 0,
	66, 0, 86, 123, 102, 81, 117, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 101, 0, 0, 0, 75, 0,
	105, 99, 0, 0, 100, 104, 88, 110, 68, 114,
	108, 92, 83, 84, 67, 0, 103, 78, 82, 77,
	97, 111, 112, 76, 124, 71, 119, 70, 72, 118,
	96, 109, 115, 93, 90, 69, 113, 91, 89, 85,
	80, 0, 0, 0, 107, 116, 125, 98, 0, 120,
	121, 122, 95, 73, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 106, 94, 0, 66,
	0, 86, 123, 102, 81, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 814, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 101, 0, 0, 0, 75, 0, 105,
	99, 0, 0, 100, 104, 88, 110, 68, 114, 108,
	92, 83, 84, 67, 0, 103, 78, 82, 77, 97,
	111, 112, 76, 124, 71, 119, 70, 72, 118, 96,
	109, 115, 93, 90, 69, 113, 91, 89, 85, 80,
	0, 0, 0, 107, 116, 125, 98, 0, 120, 121,
	122, 95, 73, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 106, 94, 0, 66, 0,
	86, 123, 102, 81, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 395, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 101, 0, 0, 0, 75, 0, 105, 99,
	0, 0, 100, 104, 88, 110, 68, 114, 108, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 111,
	112, 76, 124, 71, 119, 70, 72, 118, 96, 109,
	115, 93, 90, 69, 113, 91, 89, 85, 80, 0,
	0, 0, 107, 116, 125, 98, 0, 120, 121, 122,
	95, 73, 0, 371, 79, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 106, 94, 0, 66, 0, 86,
	123, 102, 81, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 101, 0, 0, 0, 75, 0, 105, 99, 0,
	0, 100, 104, 88, 110, 68, 114, 108, 92, 83,
	84, 67, 0, 103, 78, 82, 77, 97, 111, 112,
	76, 124, 71, 119, 70, 72, 118, 96, 109, 115,
	93, 90, 69, 113, 91, 89, 85, 80, 264, 0,
	0, 107, 116, 125, 0, 98, 120, 121, 122, 95,
	73, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 106, 94, 66, 0, 86, 123,
	102, 81, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 101, 0, 0, 0, 75, 0, 105, 99, 0,
	0, 100, 104, 88, 110, 68, 114, 108, 92, 83,
	84, 67, 0, 103, 78, 82, 77, 97, 111, 112,
	76, 124, 71, 119, 70, 72, 118, 96, 109, 115,
	93, 90, 69, 113, 91, 89, 85, 80, 0, 0,
	0, 107, 116, 125, 98, 0, 120, 121, 122, 95,
	73, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 106, 94, 0, 66, 0, 86, 123,
	102, 81, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 138, 0, 0, 0, 0,
	101, 0, 0, 0, 75, 0, 105, 99, 0, 0,
	100, 104, 88, 110, 68, 114, 108, 92, 83, 84,
	67, 0, 103, 78, 82, 77, 97, 111, 112, 76,
	124, 71, 119, 70, 72, 118, 96, 109, 115, 93,
	90, 69, 113, 91, 89, 85, 80, 0, 0, 0,
	107, 116, 125, 98, 0, 120, 121, 122, 95, 73,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 106, 94, 0, 66, 0, 86, 123, 102,
	81, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 101,
	0, 0, 0, 75, 0, 105, 99, 0, 0, 100,
	104, 88, 110, 68, 114, 108, 92, 83, 84, 67,
	0, 103, 78, 82, 77, 97, 111, 112, 76, 124,
	71, 119, 70, 72, 118, 96, 109, 115, 93, 90,
	69, 113, 91, 89, 85, 80, 0, 0, 0, 107,
	116, 125, 98, 0, 120, 121, 122, 95, 73, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 106, 94, 0, 66, 0, 86, 123, 102, 81,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 101, 0,
	0, 0, 75, 0, 105, 99, 0, 0, 100, 104,
	88, 110, 68, 114, 108, 92, 83, 84, 67, 0,
	103, 78, 82, 77, 97, 111, 112, 76, 124, 71,
	119, 70, 72, 118, 96, 109, 115, 93, 90, 69,
	113, 91, 89, 85, 80, 0, 0, 0, 107, 116,
	125, 98, 0, 120, 121, 122, 95, 73, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	106, 94, 0, 66, 0, 86, 123, 102, 81, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 101, 0, 0,
	0, 75, 0, 105, 99, 0, 0, 100, 104, 88,
	110, 68, 114, 108, 92, 83, 84, 67, 0, 103,
	78, 82, 77, 97, 111, 112, 76, 124, 71, 119,
	70, 72, 118, 96, 109, 115, 93, 90, 69, 113,
	91, 89, 85, 80, 0, 0, 0, 107, 116, 125,
	98, 0, 120, 121, 122, 95, 73, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 106,
	94, 0, 66, 0, 86, 123, 102, 81, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 101, 0, 0, 0,
	75, 0, 105, 99, 0, 0, 100, 104, 88, 110,
	68, 114, 108, 92, 83, 84, 67, 0, 103, 78,
	82, 77, 97, 111, 112, 76, 124, 71, 119, 70,
	270, 118, 96, 109, 115, 93, 90, 69, 113, 91,
	89, 85, 80, 0, 0, 0, 107, 116, 125, 0,
	0, 120, 121, 122, 271, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 86, 123, 102, 81, 117,
}
var yyPact = [...]int{

	1232, -1000, -160, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 677, 697, -1000,
	-1000, -1000, -1000, -1000, 493, 5192, 0, 35, 5, 6837,
	32, 3569, 7314, -1000, -1000, -1000, -1000, -1000, -91, -92,
	420, -1000, -1000, -1000, -1000, -1000, 672, 675, 485, 664,
	551, -1000, -15, 6041, 6678, 7473, -1000, 344, 11, 7314,
	-124, -17, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16, 7314, -1000, 7314,
	-18, 340, -18, 7314, -1000, 61, -1000, -1000, -1000, 7314,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 314, 626, 4323, 4323, 677, -1000, 420, -1000, -1000,
	-1000, 617, -1000, -1000, 182, 6518, 388, 858, -1000, -1000,
	-1000, 660, 5550, 5882, 7314, 409, -1000, 2769, 370, -1000,
	621, -1000, -1000, 108, -1000, 60, -1000, -1000, 350, -1000,
	1249, 337, 2369, -5, 7314, 150, 7314, 2369, -7, 7314,
	658, 503, 7314, -1000, 3369, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 692, 82, 569, -1000, 4323, 1206, 441, 441,
	-1000, -1000, 48, -1000, -1000, 4681, 4681, 4681, 4681, 4681,
	4681, 4681, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 441, 58, -1000, 4135,
	441, 441, 441, 441, 441, 441, 4323, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 441, 441,
	437, -1000, 373, 672, 314, 551, 5709, 514, -1000, -1000,
	546, 7314, -1000, 7155, 6041, 6041, 6041, 6041, 6041, -1000,
	536, 525, -1000, 548, 547, 588, 7314, -1000, 348, 314,
	5550, 59, -1000, 6359, -1000, -1000, 685, 6041, 7314, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7155, -1000, 4323, 3169,
	1969, 75, 178, -84, -1000, -1000, 447, -1000, 447, 447,
	447, 447, -65, -65, -65, -65, -1000, -1000, -1000, -1000,
	-1000, 492, -1000, 447, 447, 447, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 491, 491, 491, 448, 448, 433,
	-1000, -1000, -1000, 7314, -1000, 657, 69, -1000, 7314, -1000,
	-1000, 7314, 2369, -1000, -1000, -1000, -1000, 596, 4323, 4323,
	144, 4323, 4323, 91, 4681, 214, 131, 4681, 4681, 4681,
	4681, 4681, 4681, 4681, 4681, 4681, 4681, 4681, 4681, 4681,
	4681, 4681, 245, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 325, -1000, 420, 673, 673, 66, 66, 66, 66,
	66, 66, 4860, 1532, 3169, 336, 153, 4135, 3757, 3757,
	4323, 4323, 3757, 665, 133, 153, 6996, -1000, 314, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3757, 3757, 3757, 3757,
	4323, -1000, -1000, -1000, 626, -1000, 665, 676, -1000, 609,
	608, 3757, -1000, 500, 7155, 441, -1000, 5371, -1000, 483,
	858, 488, 499, 765, -1000, -1000, -1000, -1000, 521, -1000,
	519, -1000, -1000, -1000, -1000, -1000, 314, -1000, 9, 8,
	2, -1000, 677, 4323, 464, -1000, -1000, -1000, 153, -1000,
	57, -1000, 432, 1769, -1000, -1000, -1000, -1000, -1000, -1000,
	453, 647, 100, 315, -1000, -1000, 629, -1000, 158, -86,
	-1000, -1000, 253, -65, -65, -1000, -1000, 50, 613, 50,
	50, 50, 262, -1000, -1000, -1000, -1000, 241, -1000, -1000,
	-1000, 232, -1000, 498, 6996, 2369, -1000, -1000, 90, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -32, -1000, 2369, -1000, 559, 91, 102, -1000, -1000,
	227, -1000, -1000, 153, 153, 1174, -1000, -1000, -1000, -1000,
	214, 4681, 4681, 4681, 137, 1174, 1012, 415, 681, 66,
	181, 181, 85, 85, 85, 85, 85, 235, 235, -1000,
	-1000, -1000, 314, -1000, -1000, -1000, 314, 3757, 428, -1000,
	-1000, 5033, 56, 441, 4323, -1000, 319, 319, 217, 222,
	319, 3757, 118, -1000, 4323, 314, -1000, 319, 314, 319,
	319, -1000, -1000, 7314, -1000, -1000, -1000, -1000, 430, -1000,
	650, 421, 375, -1000, -1000, 3945, 314, 334, 52, 677,
	-1000, -1000, 4323, 451, -1000, 4323, -1000, -1000, -1000, -1000,
	441, 441, 441, 672, 153, -1000, 2969, 1969, -1000, 1969,
	6996, -1000, 292, -1000, -1000, 490, 18, -1000, -1000, -1000,
	359, 50, 50, -1000, 272, 79, -1000, -1000, -1000, 332,
	-1000, 427, 330, 7314, -1000, -1000, -1000, 7314, -1000, -1000,
	-1000, -1000, -1000, 6996, -1000, -1000, -1000, -1000, -1000, -1000,
	137, 1174, 431, -1000, 4681, 4681, -1000, -1000, 319, 3757,
	-1000, -1000, 6200, -1000, -1000, 2569, 3757, 153, -1000, -1000,
	26, 245, 26, -136, 423, 113, -1000, 4323, 236, -1000,
	-1000, -1000, -1000, -1000, -1000, 685, 6041, 644, -1000, 441,
	-1000, -1000, 450, 6996, 6996, 672, 153, 6996, 153, 6996,
	6996, 6996, -1000, -1000, 1769, -1000, 313, -1000, 447, -1000,
	-80, 691, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 258, 213, -1000, 209, 2369, -1000,
	-1000, 653, -1000, 4681, 1174, 1174, -1000, -1000, -1000, -1000,
	51, 314, 314, 447, 447, -1000, 447, 448, -1000, 447,
	-46, 447, -47, 314, 314, 441, -129, -1000, 153, 4323,
	683, 424, 690, -1000, 441, -1000, 420, 44, -1000, -1000,
	311, -1000, 308, -1000, 308, 308, -1000, 6996, -1000, 83,
	-1000, -110, -1000, 353, 352, -1000, 441, 1174, 2169, -1000,
	-1000, -1000, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4681, 314, 256, 153, 680, 674, 7155, 375, 314,
	6996, 6996, -1000, -1000, 6996, -1000, -1000, -1000, 161, 640,
	-1000, 637, -1000, -1000, -1000, -33, -1000, -1000, -1000, 46,
	-1000, -1000, -1000, 4323, 4323, 370, -1000, -1000, -1000, -1000,
	-1000, 215, -1000, -1000, 271, -1000, 6996, 314, 14, -146,
	153, 363, -1000, -1000, -33, 602, -1000, 558, -140, -151,
	-1000, -36, -1000, 542, -1000, -38, -144, 441, -147, 4502,
	-153, 160, 314, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 973, 115, 554, 971, 970, 969, 968, 967, 963,
	960, 959, 956, 954, 953, 949, 946, 945, 944, 941,
	58, 940, 931, 925, 43, 924, 48, 923, 918, 31,
	106, 28, 24, 421, 916, 20, 47, 78, 914, 38,
	913, 911, 907, 903, 53, 889, 887, 1084, 886, 882,
	880, 13, 14, 876, 875, 874, 873, 36, 129, 872,
	871, 869, 868, 867, 863, 35, 3, 6, 21, 15,
	862, 284, 8, 860, 30, 859, 851, 849, 847, 23,
	836, 39, 833, 10, 37, 829, 824, 26, 7, 822,
	46, 820, 498, 819, 109, 814, 810, 797, 796, 795,
	792, 19, 33, 190, 162, 29, 789, 788, 798, 22,
	44, 787, 786, 34, 16, 17, 18, 770, 769, 767,
	766, 765, 762, 759, 149, 755, 754, 750, 9, 27,
	749, 747, 42, 12, 746, 744, 737, 736, 40, 727,
	32, 726, 721, 719, 25, 11, 718, 5, 716, 714,
	2, 713, 710, 709, 0, 4, 708, 707, 114,
}
var yyR1 = [...]int{

	0, 152, 153, 153, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 156, 156, 42, 42, 9, 9, 89,
	89, 89, 107, 107, 10, 10, 10, 10, 15, 141,
	142, 142, 142, 138, 118, 118, 118, 121, 121, 119,
	119, 119, 119, 119, 119, 119, 120, 120, 120, 120,
	120, 122, 122, 122, 122, 122, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	137, 137, 124, 124, 132, 132, 133, 133, 133, 130,
	130, 131, 131, 134, 134, 134, 125, 125, 125, 125,
	125, 125, 127, 127, 135, 135, 128, 128, 128, 129,
	129, 136, 136, 136, 136, 136, 126, 126, 139, 146,
	146, 146, 146, 140, 140, 148, 148, 147, 143, 143,
	143, 144, 144, 144, 145, 145, 145, 11, 11, 11,
	11, 11, 151, 149, 149, 150, 150, 12, 13, 13,
	13, 14, 14, 16, 117, 117, 117, 17, 18, 18,
	19, 19, 19, 19, 19, 19, 19, 157, 20, 21,
	21, 22, 22, 22, 26, 26, 26, 24, 24, 25,
	25, 31, 31, 30, 30, 32, 32, 32, 32, 106,
	106, 106, 105, 105, 34, 34, 35, 35, 36, 36,
	37, 37, 37, 49, 86, 86, 38, 38, 38, 38,
	39, 39, 40, 40, 41, 41, 112, 112, 111, 111,
	111, 110, 110, 43, 43, 43, 45, 44, 44, 44,
	44, 46, 46, 48, 48, 47, 47, 50, 50, 50,
	50, 51, 51, 52, 52, 33, 33, 33, 33, 33,
	33, 33, 93, 93, 54, 54, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 64, 64, 64, 64,
	64, 64, 55, 55, 55, 55, 55, 55, 55, 29,
	29, 65, 65, 65, 71, 66, 66, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 62, 62,
	62, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	61, 61, 61, 61, 61, 61, 61, 61, 158, 158,
	63, 63, 63, 63, 27, 27, 27, 27, 27, 115,
	115, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 75, 75, 28, 28, 73, 73,
	74, 76, 76, 72, 72, 72, 57, 57, 57, 57,
	57, 57, 57, 57, 59, 59, 59, 77, 77, 78,
	78, 79, 79, 80, 80, 81, 82, 82, 82, 83,
	83, 83, 83, 84, 84, 84, 56, 56, 56, 56,
	56, 56, 85, 85, 85, 85, 87, 87, 67, 67,
	69, 69, 68, 70, 88, 88, 90, 91, 91, 94,
	94, 95, 95, 92, 92, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 97, 97, 97, 98,
	98, 99, 99, 99, 100, 100, 103, 103, 104, 104,
	108, 108, 109, 109, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 154, 155, 113, 114, 114, 114,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 6, 7, 1, 1,
	8, 7, 6, 1, 1, 1, 3, 5, 3, 1,
	2, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 1, 1, 1, 3, 2, 1,
	2, 2, 2, 2, 2, 3, 3, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 1, 3, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -152, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 131,
	115, 124, 48, 24, 125, 126, 129, 130, 30, 31,
	-154, 7, 192, 52, -153, 205, -79, 14, -22, 5,
	-20, -157, -20, -20, -20, -20, -141, 52, -99, 118,
	69, 116, 122, -103, 55, -102, 198, 143, 137, 164,
	156, 154, 157, 182, 64, 127, 152, 148, 146, 26,
	169, 203, 147, 141, 142, 168, 200, 33, 135, 167,
	163, 166, 140, 162, 37, 181, 159, 149, 17, 130,
	133, 123, 202, 145, 134, 129, 36, 173, 139, 160,
	136, 150, 151, 165, 138, 161, 174, 204, 158, 155,
	178, 179, 180, 201, 153, 175, -92, 118, 120, 116,
	116, 117, 118, 116, -47, -108, 55, -102, 118, 116,
	-117, 55, -101, -102, 70, 21, 23, 171, 73, 105,
	15, 74, 104, 193, 111, 46, 185, 186, 183, 184,
	176, 28, 9, 24, 125, 20, 98, 113, 77, 78,
	128, 22, 126, 68, 18, 49, 10, 12, 13, 121,
	120, 89, 117, 44, 7, 107, 25, 86, 40, 27,
	42, 87, 16, 187, 188, 30, 197, 132, 100, 47,
	34, 71, 66, 50, 69, 14, 45, 88, 114, 192,
	43, 6, 196, 29, 124, 41, 116, 177, 76, 119,
	67, 5, 122, 31, 8, 48, 51, 189, 190, 191,
	32, 75, 11, -108, -113, -113, -113, -113, -113, 177,
	177, -2, -83, 16, 15, -5, -3, -154, 6, 19,
	20, -26, 38, 39, -21, -92, -35, -36, -37, -38,
	-49, -71, -154, -47, 10, -42, -47, -89, -88, 182,
	157, 181, -90, -72, -103, -108, 55, -102, -142, -138,
	55, 117, -47, 192, -95, 121, 116, -47, -47, -94,
	121, 55, -94, -47, 108, -47, -113, -113, -113, -155,
	54, -84, 18, 30, -33, -53, 71, -58, 28, 22,
	-57, -54, -72, -70, -71, 105, 106, 94, 95, 102,
	72, 107, -62, -60, -61, -63, 57, 56, 65, 58,
	59, 60, 61, 66, 67, 68, -103, -108, -68, -154,
	42, 43, 193, 194, 197, 195, 74, 32, 183, 191,
	190, 189, 187, 188, 185, 186, 121, 184, 100, 192,
	-80, -81, -33, -79, -2, -20, 34, -24, 20, 63,
	-48, 25, -47, 29, 53, -43, -45, -44, -46, 40,
	44, 46, 41, 42, 43, 47, -112, 21, -35, -2,
	-154, -111, -110, 21, -108, 57, -47, -156, 53, 10,
	51, -107, -104, 57, -103, -101, 53, 29, 79, 108,
	54, 53, -118, -121, -123, -122, -119, -120, 154, 155,
	105, 158, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 127, 150, 151, 152, 153, 137, 138, 139,
	140, 141, 142, 143, 145, 146, 147, 148, 149, 55,
	-114, -154, -104, 118, -47, 71, -47, -114, 119, -47,
	22, 50, -47, -109, -108, -101, 8, 89, 70, 69,
	86, 53, 17, -33, -55, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 79, 80, 81, 82, 83, 84, 85,
	-93, -154, -71, -154, 109, 110, -58, -58, -58, -58,
	-58, -58, -58, -154, 108, -66, -33, -154, -154, -154,
	-154, -154, -154, -154, -75, -33, -154, -158, -154, -158,
	-158, -158, -158, -158, -158, -158, -154, -154, -154, -154,
	53, -82, 23, 24, -83, -155, -26, -59, -103, 58,
	61, -25, 41, -56, 29, 32, -2, -154, -47, -88,
	-36, -37, -37, -36, -37, 40, 40, 40, 45, 40,
	45, 40, -44, -108, -155, -155, -2, -50, 48, 120,
	49, -110, -52, 11, -35, -47, -113, -90, -33, -104,
	-109, -101, -143, -144, -145, -104, 57, 58, -138, -139,
	-146, 123, 122, -140, 117, 27, -134, 66, 71, -130,
	174, -124, 52, -124, -124, -124, -124, -128, 157, -128,
	-128, -128, 52, -124, -124, -124, -132, 52, -132, -132,
	-133, 52, -133, -100, 51, -47, 22, -96, 114, -151,
	112, 171, 157, 64, 28, 113, 14, 193, 133, 204,
	55, 134, -47, -47, -114, 36, -33, -33, -64, 66,
	71, 67, 68, -33, -33, -58, -65, -68, -71, 62,
	89, 87, 88, 73, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -115,
	55, 57, 55, -57, -57, -103, -31, 20, -30, -32,
	96, -33, -108, -104, 53, -155, -30, -30, -33, -33,
	-30, -24, -73, -74, 75, -103, -155, -30, -31, -30,
	-30, -81, -84, -91, 18, 10, 32, 32, -30, -87,
	50, -88, -67, -69, -68, -154, -2, -85, -103, -52,
	-40, -39, 50, 51, -41, 50, -39, 40, 40, -155,
	117, 117, 117, -79, -33, -52, 108, 53, -145, 79,
	52, 27, -140, 55, 55, -125, 28, 66, -131, 175,
	58, -128, -128, -129, 104, 29, -129, -129, -129, -137,
	57, 58, 58, 50, -103, -114, -113, -97, -98, 119,
	21, 117, 27, 133, -114, 37, 66, 67, 68, -65,
	-58, -58, -58, -29, 128, 70, -155, -155, -30, 53,
	-106, -105, 21, -103, 57, 108, -154, -33, -155, -155,
	53, 51, 21, -155, -30, -76, -74, 77, -33, -155,
	-155, -155, -155, -155, -47, -34, 10, 26, -87, 53,
	-155, -155, -155, 53, 108, -79, -33, 52, -33, -154,
	-154, -154, -83, -104, -144, -145, -148, -147, -103, 55,
	-127, 50, 57, 58, 59, 66, 183, 54, -129, -129,
	55, 55, 105, 54, 53, 53, 54, 53, -47, -47,
	-113, -103, -29, 70, -58, -58, -155, -32, -105, 96,
	-109, -31, -116, 105, 154, 127, 152, 148, 168, 159,
	173, 150, 174, -115, -116, 198, -79, 78, -33, 76,
	-52, -35, 27, -69, 32, -2, -154, -103, -103, -83,
	-86, -103, -51, -103, -51, -51, 54, 53, -124, -135,
	171, 8, 57, 58, 58, -114, 25, -58, 108, -155,
	-155, -124, -124, -124, -133, -124, 142, -124, 142, -155,
	-155, -154, -28, 196, -33, -77, 12, 8, -67, -2,
	108, 53, 54, -155, 53, -155, -155, -147, -136, 123,
	27, 122, 183, 54, 54, -154, 96, -128, 55, -58,
	-155, 57, -78, 13, 15, -88, -155, -103, -103, -103,
	-126, 64, 27, 27, -149, -150, 133, -27, 89, 201,
	-33, -66, 57, -155, 53, -103, -155, 199, 47, 202,
	-150, 32, 37, 200, 203, 135, 37, 136, 201, -154,
	202, -58, 132, 203, -155, -155,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 401, 0, 177,
	177, 177, 177, 177, 0, 461, 443, 0, 0, 0,
	0, 0, 169, 626, 626, 626, 626, 626, 0, 0,
	0, 28, 29, 624, 1, 3, 409, 0, 0, 181,
	184, 179, 443, 0, 0, 0, 44, 0, 0, 617,
	0, 441, 462, 463, 466, 467, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	618, 619, 620, 621, 622, 623, 0, 0, 444, 0,
	439, 0, 439, 0, 162, 245, 470, 471, 617, 0,
	626, 164, 165, 166, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 168, 170, 171, 172, 173, 174, 626,
	626, 22, 413, 0, 0, 401, 24, 0, 177, 182,
	183, 187, 185, 186, 178, 0, 0, 206, 208, 209,
	210, 226, 0, 228, 0, 0, 35, 0, 38, -2,
	569, -2, 434, 0, 383, 0, -2, -2, 0, 50,
	0, 0, 627, 0, 0, 0, 0, 627, 0, 0,
	0, 0, 0, 161, 0, 163, 167, 175, 176, 23,
	625, 18, 0, 0, 410, 255, 0, 260, 262, 0,
	297, 298, 299, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 324, 325, 326, 327, 386, 387, 388, 389,
	390, 391, 392, 393, 264, 265, 383, 0, 433, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 348, 348,
	348, 348, 348, 348, 348, 348, 0, 0, 0, 0,
	402, 403, 406, 409, 22, 184, 0, 189, 188, 180,
	0, 0, 244, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 236, 0, 0, 0, 0, 227, 0, 22,
	0, 247, 229, 0, 231, 232, 253, 0, 0, 33,
	34, 626, 42, 43, 468, 469, 0, 40, 0, 0,
	138, 0, 103, 99, 55, 56, 92, 58, 92, 92,
	92, 92, 116, 116, 116, 116, 84, 85, 86, 87,
	88, 0, 71, 92, 92, 92, 75, 59, 60, 61,
	62, 63, 64, 65, 94, 94, 94, 96, 96, 464,
	46, 628, 629, 0, 48, 0, 0, 150, 0, 158,
	440, 0, 627, 246, 472, 473, 414, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 285, 286, 287, 288,
	261, 0, 275, 0, 0, 0, 317, 318, 319, 320,
	321, 322, 0, 191, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 187, 0, 375, 0, 340, 0, 341,
	342, 343, 344, 345, 346, 347, 0, 191, 0, 0,
	0, 405, 407, 408, 413, 25, 187, 0, 394, 0,
	0, 0, 190, 426, 0, 0, -2, 0, 243, 253,
	207, 222, 224, 0, 219, 234, 235, 237, 0, 239,
	0, 241, 242, 211, 212, 294, 22, 213, 0, 0,
	0, 230, 401, 0, 253, 36, 37, 435, 436, 384,
	0, -2, 49, 139, 141, 144, 145, 146, 51, 52,
	0, 0, 0, 0, 133, 134, 106, 104, 0, 101,
	100, 57, 0, 116, 116, 78, 79, 119, 0, 119,
	119, 119, 0, 72, 73, 74, 66, 0, 67, 68,
	69, 0, 70, 0, 0, 627, 442, 626, 456, 151,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 0, 157, 627, 160, 0, 256, 257, 259, 276,
	0, 278, 280, 411, 412, 266, 267, 291, 292, 293,
	0, 0, 0, 0, 289, 271, 0, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 316,
	359, 360, 0, 314, 315, 323, 0, 0, 192, 193,
	195, 199, 0, 384, 0, 432, 0, 0, 0, 0,
	0, 0, 381, 378, 0, 0, 349, 0, 0, 0,
	0, 404, 19, 0, 437, 438, 395, 396, 204, 26,
	0, 426, 416, 428, 430, 0, 22, 0, 422, 401,
	216, 223, 0, 0, 217, 0, 218, 238, 240, -2,
	0, 0, 0, 409, 254, 32, 0, 0, 142, 0,
	0, 129, 0, 131, 132, 112, 0, 105, 54, 102,
	0, 119, 119, 80, 0, 0, 81, 82, 83, 0,
	90, 0, 0, 0, 465, 47, 147, 0, 626, 457,
	458, 459, 460, 0, 159, 415, 277, 279, 281, 268,
	289, 272, 0, 269, 0, 0, 263, 328, 0, 0,
	196, 200, 0, 202, 203, 0, 191, 296, 331, 332,
	0, 0, 0, 0, 401, 0, 379, 0, 0, 339,
	350, 351, 352, 353, 20, 253, 0, 0, 27, 0,
	431, -2, 0, 0, 0, 409, 220, 0, 225, 0,
	0, 0, 31, 385, 140, 143, 0, 135, 92, 130,
	114, 0, 107, 108, 109, 110, 111, 93, 76, 77,
	120, 117, 118, 89, 0, 0, 97, 0, 627, 148,
	149, 0, 270, 0, 290, 273, 329, 194, 201, 197,
	0, 0, 0, 92, 92, 364, 92, 96, 367, 92,
	369, 92, 372, 0, 0, 0, 376, 338, 382, 0,
	397, 205, 0, 429, 0, -2, 0, 424, 423, 30,
	0, 214, 0, 251, 0, 0, 128, 0, 137, 121,
	115, 0, 91, 0, 0, 45, 0, 274, 0, 330,
	333, 361, 116, 365, 366, 368, 370, 371, 373, 335,
	334, 0, 0, 0, 380, 399, 0, 0, 419, 22,
	0, 0, 221, 248, 0, 249, 250, 136, 126, 0,
	123, 125, 113, 95, 98, 0, 198, 362, 363, 354,
	337, 377, 21, 0, 0, 427, -2, 425, 215, 252,
	53, 0, 122, 124, 0, 153, 0, 0, 0, 0,
	400, 398, 127, 152, 0, 0, 336, 0, 0, 0,
	154, 0, 355, 0, 358, 0, 356, 0, 0, 0,
	0, 0, 0, 357, 155, 156,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 205,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:275
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:280
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:281
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:285
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:304
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:312
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:316
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:329
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:350
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:361
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:377
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:383
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:389
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:398
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:413
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:417
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:438
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:443
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:448
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:452
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:465
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:477
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:487
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:498
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:508
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:671
		{
			yyVAL.optVal = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:680
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:684
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:692
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:696
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:710
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:714
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:719
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:737
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:742
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:746
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:758
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:762
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:780
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:785
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:789
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:793
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:802
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:807
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:815
		{
			yyVAL.colKeyOpt = colKey
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:819
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:828
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:832
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:838
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:848
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:866
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:876
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:887
		{
			yyVAL.str = ""
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:895
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:907
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:911
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:925
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:931
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:935
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:940
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:945
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:949
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:955
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:965
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:971
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:975
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:981
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:987
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:995
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1000
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1029
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1038
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &OtherRead{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &OtherRead{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &OtherRead{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1094
		{
			setAllowComments(yylex, true)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.bytes2 = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.str = UnionStr
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.str = UnionAllStr
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.str = UnionDistinctStr
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.str = SQLCacheStr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.str = DistinctStr
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.str = ""
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.str = StraightJoinHint
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.selectExprs = nil
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1300
		{
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1306
		{
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.empty = struct{}{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.empty = struct{}{}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = JoinStr
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = JoinStr
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.str = JoinStr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = StraightJoinStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.str = LeftJoinStr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.str = LeftJoinStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.str = RightJoinStr
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.str = RightJoinStr
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.str = NaturalJoinStr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1379
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.indexHints = nil
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = IsNullStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.str = IsNotNullStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.str = IsTrueStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.str = IsNotTrueStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.str = IsFalseStr
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.str = IsNotFalseStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.str = EqualStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = LessThanStr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.str = GreaterThanStr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.str = LessEqualStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.str = GreaterEqualStr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.str = NotEqualStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = nil
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1720
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 334:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.str = BooleanModeStr
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.str = QueryExpansionStr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = nil
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.str = string("")
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &NullVal{}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.exprs = nil
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.orderBy = nil
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.str = AscScr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.str = AscScr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.str = DescScr
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.limit = nil
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.str = ForUpdateStr
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.str = ShareModeStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2191
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 421:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2204
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.updateExprs = nil
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.byt = 0
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.byt = 1
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.str = ""
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.str = IgnoreStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2571
		{
			decNesting(yylex)
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2576
		{
			forceEOF(yylex)
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2581
		{
			forceEOF(yylex)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			forceEOF(yylex)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
