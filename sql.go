// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:17
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:17

import "bytes"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func skipDDLEnd(yylex interface{}) {
	yylex.(*Tokenizer).IsSkipDDL = true
}

func getSkipBytes(yylex interface{}) []byte {
	tkn := yylex.(*Tokenizer)
	buf := bytes.NewBuffer(tkn.lastToken)
	ch := tkn.lastChar
	for ch != eofChar {
		tkn.next()
		buf.WriteByte(byte(ch))
		ch = tkn.lastChar
	}
	return buf.Bytes()
}

//line sql.y:70
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	trigger           *Trigger
	definer           *Definer
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const LOW_PRIORITY = 57482
const QUICK = 57483
const BIT = 57484
const TINYINT = 57485
const SMALLINT = 57486
const MEDIUMINT = 57487
const INT = 57488
const INTEGER = 57489
const BIGINT = 57490
const INTNUM = 57491
const REAL = 57492
const DOUBLE = 57493
const FLOAT_TYPE = 57494
const DECIMAL = 57495
const NUMERIC = 57496
const TIME = 57497
const TIMESTAMP = 57498
const DATETIME = 57499
const YEAR = 57500
const CHAR = 57501
const VARCHAR = 57502
const BOOL = 57503
const CHARACTER = 57504
const VARBINARY = 57505
const NCHAR = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const DATABASES = 57531
const TABLES = 57532
const VITESS_KEYSPACES = 57533
const VITESS_SHARDS = 57534
const VITESS_TABLETS = 57535
const VSCHEMA_TABLES = 57536
const EXTENDED = 57537
const FULL = 57538
const PROCESSLIST = 57539
const NAMES = 57540
const CHARSET = 57541
const GLOBAL = 57542
const SESSION = 57543
const ISOLATION = 57544
const LEVEL = 57545
const READ = 57546
const WRITE = 57547
const ONLY = 57548
const REPEATABLE = 57549
const COMMITTED = 57550
const UNCOMMITTED = 57551
const SERIALIZABLE = 57552
const CURRENT_TIMESTAMP = 57553
const DATABASE = 57554
const CURRENT_DATE = 57555
const CURRENT_TIME = 57556
const LOCALTIME = 57557
const LOCALTIMESTAMP = 57558
const UTC_DATE = 57559
const UTC_TIME = 57560
const UTC_TIMESTAMP = 57561
const REPLACE = 57562
const CONVERT = 57563
const CAST = 57564
const SUBSTR = 57565
const SUBSTRING = 57566
const GROUP_CONCAT = 57567
const SEPARATOR = 57568
const MATCH = 57569
const AGAINST = 57570
const BOOLEAN = 57571
const LANGUAGE = 57572
const WITH = 57573
const QUERY = 57574
const EXPANSION = 57575
const DEFINER = 57576
const AFTER = 57577
const ROW = 57578
const FOLLOWS = 57579
const PRECEDES = 57580
const BEFORE = 57581
const EACH = 57582
const AT = 57583
const UNUSED = 57584

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"LOW_PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"DEFINER",
	"AFTER",
	"ROW",
	"FOLLOWS",
	"PRECEDES",
	"BEFORE",
	"EACH",
	"AT",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 278,
	151, 278,
	-2, 268,
	-1, 76,
	120, 777,
	-2, 60,
	-1, 241,
	109, 602,
	-2, 598,
	-1, 242,
	109, 603,
	-2, 599,
	-1, 311,
	80, 761,
	-2, 58,
	-1, 312,
	80, 722,
	-2, 59,
	-1, 317,
	80, 706,
	-2, 564,
	-1, 319,
	80, 743,
	-2, 566,
	-1, 582,
	52, 41,
	54, 41,
	-2, 43,
	-1, 720,
	109, 605,
	-2, 601,
	-1, 930,
	5, 28,
	-2, 410,
	-1, 955,
	5, 27,
	-2, 539,
	-1, 1186,
	5, 28,
	-2, 540,
	-1, 1232,
	5, 27,
	-2, 542,
	-1, 1298,
	5, 28,
	-2, 543,
}

const yyPrivate = 57344

const yyLast = 11006

var yyAct = [...]int{

	272, 47, 1289, 866, 653, 529, 1313, 1091, 1302, 1243,
	782, 1119, 271, 818, 1192, 1092, 1016, 822, 800, 528,
	3, 576, 1088, 821, 574, 214, 53, 783, 974, 246,
	1065, 755, 922, 745, 846, 1023, 860, 1007, 752, 771,
	832, 220, 316, 722, 592, 963, 468, 462, 47, 873,
	413, 856, 310, 447, 591, 578, 225, 779, 563, 305,
	244, 958, 302, 474, 229, 840, 904, 219, 482, 215,
	216, 217, 218, 307, 52, 297, 878, 1258, 1257, 889,
	1286, 660, 1303, 1304, 298, 659, 296, 1285, 1327, 1312,
	1325, 233, 1296, 888, 1323, 867, 1311, 1083, 543, 1295,
	1180, 417, 1252, 593, 754, 594, 1269, 495, 494, 504,
	505, 497, 498, 499, 500, 501, 502, 503, 496, 1113,
	893, 506, 813, 442, 183, 179, 180, 181, 457, 887,
	1125, 1126, 1127, 57, 982, 1114, 1115, 981, 1130, 1128,
	983, 814, 815, 687, 998, 839, 1204, 430, 847, 1169,
	688, 460, 1167, 213, 453, 454, 1147, 1324, 59, 60,
	61, 62, 63, 1322, 1290, 1044, 780, 1244, 431, 1250,
	242, 420, 177, 652, 176, 1221, 177, 884, 881, 882,
	1246, 880, 801, 803, 666, 973, 444, 427, 446, 972,
	834, 971, 1274, 415, 192, 178, 1189, 448, 448, 448,
	448, 79, 448, 518, 519, 188, 891, 894, 188, 448,
	1052, 1041, 938, 443, 445, 916, 694, 1043, 1031, 486,
	437, 834, 496, 819, 691, 506, 47, 506, 899, 481,
	1279, 1144, 188, 188, 79, 182, 1048, 961, 188, 595,
	79, 515, 834, 886, 517, 471, 1029, 1245, 198, 992,
	470, 450, 451, 452, 1134, 455, 802, 426, 1085, 772,
	772, 945, 459, 836, 1270, 885, 1251, 1249, 837, 656,
	414, 527, 208, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 833, 542, 544, 544, 544, 544, 544, 544,
	544, 544, 552, 553, 554, 555, 441, 1294, 847, 1031,
	1129, 996, 890, 575, 1135, 1282, 934, 900, 933, 1042,
	1030, 1040, 1047, 833, 476, 1035, 1032, 1025, 1026, 1033,
	1028, 1027, 193, 892, 480, 479, 479, 1029, 195, 433,
	434, 435, 1034, 175, 833, 201, 197, 729, 1037, 831,
	829, 481, 481, 830, 935, 1300, 270, 188, 1210, 188,
	1209, 727, 728, 726, 746, 188, 747, 449, 480, 479,
	472, 50, 199, 188, 583, 203, 1011, 79, 79, 79,
	79, 725, 79, 480, 479, 481, 1010, 75, 999, 79,
	1087, 1301, 589, 545, 546, 547, 548, 549, 550, 551,
	481, 1030, 480, 479, 295, 194, 1035, 1032, 1025, 1026,
	1033, 1028, 1027, 712, 714, 715, 79, 1280, 713, 481,
	315, 1228, 419, 1034, 1207, 1155, 418, 448, 1008, 1024,
	1316, 313, 196, 448, 204, 205, 206, 207, 211, 448,
	1315, 1308, 461, 210, 209, 1277, 693, 913, 914, 915,
	448, 448, 448, 448, 448, 448, 448, 448, 499, 500,
	501, 502, 503, 496, 448, 448, 506, 248, 497, 498,
	499, 500, 501, 502, 503, 496, 188, 1122, 506, 1121,
	651, 1021, 692, 188, 188, 188, 658, 697, 698, 79,
	675, 993, 665, 984, 421, 79, 425, 869, 480, 479,
	1236, 1287, 461, 676, 677, 678, 679, 680, 681, 682,
	683, 748, 723, 672, 673, 481, 671, 684, 685, 1236,
	461, 1256, 699, 1236, 1237, 1201, 1200, 21, 47, 301,
	1110, 461, 1255, 480, 479, 1188, 461, 1141, 1140, 720,
	1137, 1138, 531, 1137, 1136, 928, 461, 701, 560, 461,
	481, 757, 461, 315, 315, 315, 315, 23, 315, 663,
	657, 759, 716, 718, 655, 315, 650, 602, 601, 23,
	439, 302, 302, 302, 302, 302, 764, 767, 432, 424,
	414, 953, 773, 224, 954, 1131, 575, 586, 804, 749,
	750, 1089, 484, 54, 959, 302, 1231, 79, 1055, 784,
	960, 960, 776, 79, 50, 759, 188, 959, 188, 79,
	239, 188, 757, 769, 188, 1184, 50, 50, 188, 808,
	79, 79, 79, 79, 79, 79, 79, 79, 587, 940,
	585, 937, 928, 700, 79, 79, 807, 23, 585, 188,
	797, 928, 560, 959, 560, 805, 785, 760, 761, 788,
	806, 810, 1143, 768, 79, 811, 786, 787, 188, 789,
	848, 849, 850, 826, 79, 315, 448, 775, 448, 777,
	778, 597, 939, 559, 936, 1139, 313, 985, 812, 928,
	588, 448, 695, 1216, 50, 841, 842, 843, 844, 845,
	756, 758, 226, 861, 1104, 988, 862, 560, 964, 965,
	1124, 857, 853, 854, 855, 852, 774, 79, 858, 859,
	851, 516, 65, 261, 260, 263, 264, 265, 266, 870,
	877, 872, 262, 267, 654, 565, 568, 569, 570, 566,
	917, 567, 571, 864, 897, 707, 799, 970, 188, 50,
	1089, 188, 188, 188, 188, 188, 1019, 720, 1018, 723,
	1012, 967, 905, 188, 669, 458, 188, 906, 794, 792,
	188, 969, 791, 795, 793, 188, 188, 790, 1321, 79,
	301, 1310, 796, 315, 569, 570, 230, 231, 1051, 315,
	918, 901, 79, 1320, 911, 315, 910, 1003, 600, 440,
	956, 957, 475, 463, 995, 1284, 315, 315, 315, 315,
	315, 315, 315, 315, 1283, 464, 473, 1229, 989, 955,
	315, 315, 1182, 1217, 871, 668, 573, 475, 302, 909,
	944, 912, 227, 228, 1215, 1214, 221, 908, 1263, 222,
	703, 54, 1262, 188, 1219, 960, 79, 477, 79, 1271,
	484, 1205, 977, 315, 968, 690, 56, 188, 58, 986,
	188, 79, 584, 51, 719, 874, 875, 876, 1, 1314,
	520, 521, 522, 523, 524, 525, 526, 979, 927, 422,
	1002, 1020, 1004, 1005, 1006, 662, 448, 423, 976, 72,
	978, 990, 991, 751, 942, 868, 1015, 1000, 1001, 883,
	1288, 1242, 1118, 765, 765, 828, 820, 412, 64, 765,
	1009, 1278, 565, 568, 569, 570, 566, 448, 567, 571,
	925, 827, 964, 965, 926, 1022, 765, 1248, 1203, 835,
	997, 930, 931, 932, 838, 1123, 1281, 1036, 994, 1014,
	941, 607, 605, 606, 604, 947, 609, 948, 949, 950,
	951, 608, 603, 200, 308, 315, 572, 596, 863, 478,
	66, 1039, 1038, 879, 1046, 686, 313, 724, 315, 898,
	1045, 456, 1059, 202, 514, 1094, 1058, 47, 907, 823,
	1064, 980, 314, 1096, 1090, 696, 1077, 1093, 1076, 1084,
	467, 1261, 1106, 1107, 1108, 79, 1095, 1218, 188, 943,
	540, 720, 770, 784, 247, 1099, 1098, 1100, 711, 784,
	259, 256, 79, 1066, 258, 257, 702, 952, 488, 245,
	237, 300, 315, 1111, 315, 1117, 556, 564, 562, 1116,
	561, 966, 962, 299, 1132, 1133, 1054, 315, 301, 301,
	301, 301, 301, 1068, 1179, 1268, 706, 25, 55, 232,
	19, 18, 17, 301, 20, 79, 79, 16, 79, 1112,
	15, 315, 301, 14, 29, 13, 12, 11, 10, 1148,
	9, 8, 719, 7, 6, 5, 302, 1070, 4, 1074,
	223, 1069, 1150, 1067, 22, 1153, 2, 79, 1072, 0,
	188, 188, 0, 0, 0, 0, 0, 1071, 188, 1063,
	1158, 0, 0, 0, 1178, 0, 0, 79, 0, 721,
	1073, 1075, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 1165, 0, 0,
	0, 0, 0, 1183, 0, 0, 1157, 0, 0, 0,
	0, 1194, 1195, 1196, 0, 0, 1109, 79, 79, 0,
	235, 1197, 1162, 1163, 986, 1164, 0, 0, 1166, 0,
	1168, 1191, 0, 448, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 1199, 0, 0, 79, 0, 79, 79,
	1212, 0, 1213, 0, 0, 0, 0, 0, 315, 0,
	0, 1206, 0, 1208, 0, 0, 0, 0, 0, 823,
	0, 0, 0, 188, 724, 1094, 1202, 0, 1233, 188,
	188, 0, 0, 0, 0, 79, 1211, 1093, 1220, 0,
	1230, 0, 0, 0, 0, 0, 0, 1232, 79, 188,
	1159, 1013, 315, 1247, 315, 79, 1241, 1161, 1260, 0,
	1253, 0, 1254, 79, 0, 1017, 188, 0, 1170, 1171,
	1172, 1259, 1094, 1175, 47, 0, 0, 0, 0, 1272,
	0, 0, 0, 315, 1093, 0, 1185, 1186, 1187, 0,
	1190, 0, 1276, 1273, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 315, 0, 301, 0, 0, 0, 1292,
	0, 0, 0, 0, 1057, 79, 0, 79, 79, 79,
	188, 79, 1297, 0, 0, 315, 0, 79, 0, 0,
	0, 186, 1306, 0, 212, 1305, 1080, 0, 0, 0,
	765, 784, 0, 1097, 975, 0, 765, 0, 0, 0,
	1318, 1319, 1317, 79, 79, 79, 236, 0, 186, 186,
	0, 0, 0, 0, 186, 1326, 303, 0, 919, 920,
	921, 1227, 315, 0, 315, 1120, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 823, 1238, 1239, 1240, 0,
	0, 0, 465, 469, 0, 0, 0, 0, 0, 79,
	79, 185, 0, 0, 0, 0, 0, 0, 0, 487,
	0, 1149, 79, 0, 1264, 1265, 1266, 1267, 0, 0,
	0, 0, 0, 0, 1151, 0, 0, 79, 0, 306,
	0, 1154, 0, 0, 416, 0, 0, 0, 0, 315,
	0, 0, 0, 530, 0, 0, 0, 79, 0, 0,
	1057, 0, 541, 0, 0, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 186, 0, 0, 0, 0,
	1307, 186, 0, 0, 0, 79, 0, 0, 0, 186,
	0, 1193, 0, 1193, 1193, 1193, 0, 1198, 0, 0,
	0, 79, 0, 315, 504, 505, 497, 498, 499, 500,
	501, 502, 503, 496, 823, 0, 506, 0, 0, 0,
	1330, 1331, 0, 0, 0, 0, 0, 0, 0, 315,
	315, 315, 0, 0, 0, 0, 23, 24, 48, 26,
	27, 1017, 823, 428, 0, 429, 0, 0, 0, 0,
	0, 436, 0, 301, 0, 42, 0, 0, 0, 438,
	28, 0, 0, 0, 1061, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1234, 1235, 1078, 1079, 37,
	1081, 1082, 0, 50, 0, 0, 0, 0, 1120, 1176,
	461, 0, 186, 0, 0, 0, 0, 0, 0, 186,
	580, 186, 0, 1193, 0, 0, 495, 494, 504, 505,
	497, 498, 499, 500, 501, 502, 503, 496, 0, 0,
	506, 0, 0, 1275, 0, 0, 495, 494, 504, 505,
	497, 498, 499, 500, 501, 502, 503, 496, 0, 0,
	506, 0, 30, 31, 33, 32, 35, 0, 0, 0,
	709, 710, 923, 461, 0, 0, 0, 0, 765, 0,
	0, 1299, 558, 36, 43, 44, 1177, 0, 45, 46,
	34, 582, 1173, 461, 0, 0, 0, 1309, 0, 0,
	0, 0, 38, 39, 0, 40, 41, 0, 0, 495,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 1160, 530, 506, 0, 762, 763, 0, 0, 495,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 0, 186, 506, 186, 0, 0, 186, 0, 0,
	186, 0, 0, 0, 674, 0, 0, 0, 495, 494,
	504, 505, 497, 498, 499, 500, 501, 502, 503, 496,
	0, 0, 506, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 49, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 1060, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 661, 0, 664, 0, 0, 667, 0, 0,
	670, 0, 495, 494, 504, 505, 497, 498, 499, 500,
	501, 502, 503, 496, 1222, 1223, 506, 1224, 1225, 1226,
	0, 0, 0, 0, 236, 689, 0, 0, 0, 236,
	236, 0, 0, 766, 766, 236, 0, 1174, 0, 766,
	0, 0, 0, 0, 708, 0, 0, 0, 0, 236,
	236, 236, 236, 0, 186, 0, 766, 186, 186, 186,
	186, 186, 0, 902, 903, 0, 469, 0, 0, 798,
	0, 0, 186, 0, 0, 490, 580, 493, 0, 0,
	0, 186, 186, 507, 508, 509, 510, 511, 512, 513,
	0, 491, 492, 489, 495, 494, 504, 505, 497, 498,
	499, 500, 501, 502, 503, 496, 0, 0, 506, 495,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 0, 0, 506, 781, 0, 0, 0, 929, 0,
	495, 494, 504, 505, 497, 498, 499, 500, 501, 502,
	503, 496, 0, 946, 506, 0, 0, 0, 924, 186,
	0, 0, 809, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 186, 1328, 495, 494,
	504, 505, 497, 498, 499, 500, 501, 502, 503, 496,
	0, 0, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 494, 504, 505, 497, 498, 499, 500, 501,
	502, 503, 496, 236, 0, 506, 0, 0, 0, 0,
	0, 624, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1101, 1102, 0, 0, 1103, 0, 0, 1105, 0,
	638, 639, 640, 641, 642, 643, 644, 0, 645, 646,
	647, 648, 649, 626, 627, 628, 629, 610, 611, 0,
	0, 613, 0, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 630, 631, 632, 633, 634, 635, 636,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 1050, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 236, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	766, 0, 0, 0, 0, 0, 766, 0, 1181, 0,
	0, 0, 0, 0, 0, 530, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 186, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 1145, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1152, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1291, 530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 391, 0, 363, 403,
	341, 355, 411, 356, 357, 384, 327, 371, 128, 353,
	0, 344, 322, 350, 323, 342, 365, 96, 368, 340,
	393, 374, 110, 409, 112, 379, 0, 145, 121, 0,
	0, 367, 395, 369, 389, 362, 385, 332, 378, 404,
	354, 382, 405, 0, 0, 0, 78, 0, 824, 825,
	0, 0, 0, 0, 0, 89, 0, 381, 400, 352,
	383, 321, 380, 0, 325, 328, 410, 398, 347, 348,
	987, 0, 0, 0, 0, 0, 0, 366, 370, 386,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	0, 377, 0, 0, 0, 329, 326, 0, 364, 0,
	0, 0, 331, 0, 346, 387, 0, 320, 390, 396,
	361, 190, 399, 359, 358, 402, 134, 0, 766, 148,
	101, 100, 109, 394, 343, 351, 92, 349, 140, 130,
	159, 376, 131, 139, 113, 152, 135, 189, 191, 166,
	150, 165, 81, 149, 158, 90, 142, 0, 0, 83,
	156, 147, 119, 105, 106, 82, 0, 138, 95, 99,
	94, 127, 153, 154, 93, 173, 86, 164, 85, 87,
	163, 126, 151, 157, 120, 117, 84, 155, 118, 116,
	108, 97, 102, 132, 115, 133, 103, 123, 122, 124,
	0, 324, 0, 146, 161, 174, 339, 397, 167, 168,
	169, 170, 0, 0, 0, 125, 88, 104, 143, 107,
	114, 137, 172, 129, 141, 91, 160, 144, 335, 338,
	333, 334, 372, 373, 406, 407, 408, 388, 330, 0,
	336, 337, 0, 392, 375, 80, 0, 111, 171, 136,
	98, 0, 0, 0, 0, 0, 0, 401, 391, 162,
	363, 403, 341, 355, 411, 356, 357, 384, 327, 371,
	128, 353, 0, 344, 322, 350, 323, 342, 365, 96,
	368, 340, 393, 374, 110, 409, 112, 379, 0, 145,
	121, 0, 0, 367, 395, 369, 389, 362, 385, 332,
	378, 404, 354, 382, 405, 0, 0, 0, 78, 0,
	824, 825, 0, 0, 0, 0, 0, 89, 0, 381,
	400, 352, 383, 321, 380, 0, 325, 328, 410, 398,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 366,
	370, 386, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 0, 377, 0, 0, 0, 329, 326, 0,
	364, 0, 0, 0, 331, 0, 346, 387, 0, 320,
	390, 396, 361, 190, 399, 359, 358, 402, 134, 0,
	0, 148, 101, 100, 109, 394, 343, 351, 92, 349,
	140, 130, 159, 376, 131, 139, 113, 152, 135, 189,
	191, 166, 150, 165, 81, 149, 158, 90, 142, 0,
	0, 83, 156, 147, 119, 105, 106, 82, 0, 138,
	95, 99, 94, 127, 153, 154, 93, 173, 86, 164,
	85, 87, 163, 126, 151, 157, 120, 117, 84, 155,
	118, 116, 108, 97, 102, 132, 115, 133, 103, 123,
	122, 124, 0, 324, 0, 146, 161, 174, 339, 397,
	167, 168, 169, 170, 0, 0, 0, 125, 88, 104,
	143, 107, 114, 137, 172, 129, 141, 91, 160, 144,
	335, 338, 333, 334, 372, 373, 406, 407, 408, 388,
	330, 0, 336, 337, 0, 392, 375, 80, 0, 111,
	171, 136, 98, 0, 0, 0, 0, 0, 0, 401,
	391, 162, 363, 403, 341, 355, 411, 356, 357, 384,
	327, 371, 128, 353, 0, 344, 322, 350, 323, 342,
	365, 96, 368, 340, 393, 374, 110, 409, 112, 379,
	0, 145, 121, 0, 0, 367, 395, 369, 389, 362,
	385, 332, 378, 404, 354, 382, 405, 50, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 381, 400, 352, 383, 321, 380, 0, 325, 328,
	410, 398, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 366, 370, 386, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 377, 0, 0, 0, 329,
	326, 0, 364, 0, 0, 0, 331, 0, 346, 387,
	0, 320, 390, 396, 361, 190, 399, 359, 358, 402,
	134, 0, 0, 148, 101, 100, 109, 394, 343, 351,
	92, 349, 140, 130, 159, 376, 131, 139, 113, 152,
	135, 189, 191, 166, 150, 165, 81, 149, 158, 90,
	142, 0, 0, 83, 156, 147, 119, 105, 106, 82,
	0, 138, 95, 99, 94, 127, 153, 154, 93, 173,
	86, 164, 85, 87, 163, 126, 151, 157, 120, 117,
	84, 155, 118, 116, 108, 97, 102, 132, 115, 133,
	103, 123, 122, 124, 0, 324, 0, 146, 161, 174,
	339, 397, 167, 168, 169, 170, 0, 0, 0, 125,
	88, 104, 143, 107, 114, 137, 172, 129, 141, 91,
	160, 144, 335, 338, 333, 334, 372, 373, 406, 407,
	408, 388, 330, 0, 336, 337, 0, 392, 375, 80,
	0, 111, 171, 136, 98, 0, 0, 0, 0, 0,
	0, 401, 391, 162, 363, 403, 341, 355, 411, 356,
	357, 384, 327, 371, 128, 353, 0, 344, 322, 350,
	323, 342, 365, 96, 368, 340, 393, 374, 110, 409,
	112, 379, 0, 145, 121, 0, 0, 367, 395, 369,
	389, 362, 385, 332, 378, 404, 354, 382, 405, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 381, 400, 352, 383, 321, 380, 0,
	325, 328, 410, 398, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 366, 370, 386, 360, 0, 0, 0,
	0, 0, 0, 1056, 0, 345, 0, 377, 0, 0,
	0, 329, 326, 0, 364, 0, 0, 0, 331, 0,
	346, 387, 0, 320, 390, 396, 361, 190, 399, 359,
	358, 402, 134, 0, 0, 148, 101, 100, 109, 394,
	343, 351, 92, 349, 140, 130, 159, 376, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 324, 0, 146,
	161, 174, 339, 397, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 335, 338, 333, 334, 372, 373,
	406, 407, 408, 388, 330, 0, 336, 337, 0, 392,
	375, 80, 0, 111, 171, 136, 98, 0, 0, 0,
	0, 0, 0, 401, 391, 162, 363, 403, 341, 355,
	411, 356, 357, 384, 327, 371, 128, 353, 0, 344,
	322, 350, 323, 342, 365, 96, 368, 340, 393, 374,
	110, 409, 112, 379, 0, 145, 121, 0, 0, 367,
	395, 369, 389, 362, 385, 332, 378, 404, 354, 382,
	405, 0, 0, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 381, 400, 352, 383, 321,
	380, 0, 325, 328, 410, 398, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 366, 370, 386, 360, 0,
	0, 0, 0, 0, 0, 717, 0, 345, 0, 377,
	0, 0, 0, 329, 326, 0, 364, 0, 0, 0,
	331, 0, 346, 387, 0, 320, 390, 396, 361, 190,
	399, 359, 358, 402, 134, 0, 0, 148, 101, 100,
	109, 394, 343, 351, 92, 349, 140, 130, 159, 376,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 324,
	0, 146, 161, 174, 339, 397, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 335, 338, 333, 334,
	372, 373, 406, 407, 408, 388, 330, 0, 336, 337,
	0, 392, 375, 80, 0, 111, 171, 136, 98, 0,
	0, 0, 0, 0, 0, 401, 391, 162, 363, 403,
	341, 355, 411, 356, 357, 384, 327, 371, 128, 353,
	0, 344, 322, 350, 323, 342, 365, 96, 368, 340,
	393, 374, 110, 409, 112, 379, 0, 145, 121, 0,
	0, 367, 395, 369, 389, 362, 385, 332, 378, 404,
	354, 382, 405, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 381, 400, 352,
	383, 321, 380, 0, 325, 328, 410, 398, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 366, 370, 386,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	0, 377, 0, 0, 0, 329, 326, 0, 364, 0,
	0, 0, 331, 0, 346, 387, 0, 320, 390, 396,
	361, 190, 399, 359, 358, 402, 134, 0, 0, 148,
	101, 100, 109, 394, 343, 351, 92, 349, 140, 130,
	159, 376, 131, 139, 113, 152, 135, 189, 191, 166,
	150, 165, 81, 149, 158, 90, 142, 0, 0, 83,
	156, 147, 119, 105, 106, 82, 0, 138, 95, 99,
	94, 127, 153, 154, 93, 173, 86, 164, 85, 87,
	163, 126, 151, 157, 120, 117, 84, 155, 118, 116,
	108, 97, 102, 132, 115, 133, 103, 123, 122, 124,
	0, 324, 0, 146, 161, 174, 339, 397, 167, 168,
	169, 170, 0, 0, 0, 125, 88, 104, 143, 107,
	114, 137, 172, 129, 141, 91, 160, 144, 335, 338,
	333, 334, 372, 373, 406, 407, 408, 388, 330, 0,
	336, 337, 0, 392, 375, 80, 0, 111, 171, 136,
	98, 0, 0, 0, 0, 0, 0, 401, 391, 162,
	363, 403, 341, 355, 411, 356, 357, 384, 327, 371,
	128, 353, 0, 344, 322, 350, 323, 342, 365, 96,
	368, 340, 393, 374, 110, 409, 112, 379, 0, 145,
	121, 0, 0, 367, 395, 369, 389, 362, 385, 332,
	378, 404, 354, 382, 405, 0, 0, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 381,
	400, 352, 383, 321, 380, 0, 325, 328, 410, 398,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 366,
	370, 386, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 0, 377, 0, 0, 0, 329, 326, 0,
	364, 0, 0, 0, 331, 0, 346, 387, 0, 320,
	390, 396, 361, 190, 399, 359, 358, 402, 134, 0,
	0, 148, 101, 100, 109, 394, 343, 351, 92, 349,
	140, 130, 159, 376, 131, 139, 113, 152, 135, 189,
	191, 166, 150, 165, 81, 149, 158, 90, 142, 0,
	0, 83, 156, 147, 119, 105, 106, 82, 0, 138,
	95, 99, 94, 127, 153, 154, 93, 173, 86, 164,
	85, 87, 163, 126, 151, 157, 120, 117, 84, 155,
	118, 116, 108, 97, 102, 132, 115, 133, 103, 123,
	122, 124, 0, 324, 0, 146, 161, 174, 339, 397,
	167, 168, 169, 170, 0, 0, 0, 125, 88, 104,
	143, 107, 114, 137, 172, 129, 141, 91, 160, 144,
	335, 338, 333, 334, 372, 373, 406, 407, 408, 388,
	330, 0, 336, 337, 0, 392, 375, 80, 0, 111,
	171, 136, 98, 0, 0, 0, 0, 0, 0, 401,
	391, 162, 363, 403, 341, 355, 411, 356, 357, 384,
	327, 371, 128, 353, 0, 344, 322, 350, 323, 342,
	365, 96, 368, 340, 393, 374, 110, 409, 112, 379,
	0, 145, 121, 0, 0, 367, 395, 369, 389, 362,
	385, 332, 378, 404, 354, 382, 405, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 381, 400, 352, 383, 321, 380, 0, 325, 328,
	410, 398, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 366, 370, 386, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 0, 377, 0, 0, 0, 329,
	326, 0, 364, 0, 0, 0, 331, 0, 346, 387,
	0, 320, 390, 396, 361, 190, 399, 359, 358, 402,
	134, 0, 0, 148, 101, 100, 109, 394, 343, 351,
	92, 349, 140, 130, 159, 376, 131, 139, 113, 152,
	135, 189, 191, 166, 150, 165, 81, 149, 158, 90,
	142, 0, 0, 83, 156, 147, 119, 105, 106, 82,
	0, 138, 95, 99, 94, 127, 153, 154, 93, 173,
	86, 164, 85, 318, 163, 126, 151, 157, 120, 117,
	84, 155, 118, 116, 108, 97, 102, 132, 115, 133,
	103, 123, 122, 124, 0, 324, 0, 146, 161, 174,
	339, 397, 167, 168, 169, 170, 0, 0, 0, 319,
	317, 104, 143, 107, 114, 137, 172, 129, 141, 91,
	160, 144, 335, 338, 333, 334, 372, 373, 406, 407,
	408, 388, 330, 0, 336, 337, 0, 392, 375, 80,
	0, 111, 171, 136, 98, 0, 0, 0, 0, 0,
	0, 401, 391, 162, 363, 403, 341, 355, 411, 356,
	357, 384, 327, 371, 128, 353, 0, 344, 322, 350,
	323, 342, 365, 96, 368, 340, 393, 374, 110, 409,
	112, 379, 0, 145, 121, 0, 0, 367, 395, 369,
	389, 362, 385, 332, 378, 404, 354, 382, 405, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 381, 400, 352, 383, 321, 380, 0,
	325, 328, 410, 398, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 366, 370, 386, 360, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 0, 377, 0, 0,
	0, 329, 326, 0, 364, 0, 0, 0, 331, 0,
	346, 387, 0, 320, 390, 396, 361, 190, 399, 359,
	358, 402, 134, 0, 0, 148, 101, 100, 109, 394,
	343, 351, 92, 349, 140, 130, 159, 376, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 324, 0, 146,
	161, 174, 339, 397, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 335, 338, 333, 334, 372, 373,
	406, 407, 408, 388, 330, 0, 336, 337, 0, 392,
	375, 80, 0, 111, 171, 136, 98, 0, 0, 0,
	0, 0, 0, 401, 391, 162, 363, 403, 341, 355,
	411, 356, 357, 384, 327, 371, 128, 353, 0, 344,
	322, 350, 323, 342, 365, 96, 368, 340, 393, 374,
	110, 409, 112, 379, 0, 145, 121, 0, 0, 367,
	395, 369, 389, 362, 385, 332, 378, 404, 354, 382,
	405, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 381, 400, 352, 383, 321,
	380, 0, 325, 328, 410, 398, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 366, 370, 386, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 0, 377,
	0, 0, 0, 329, 326, 0, 364, 0, 0, 0,
	331, 0, 346, 387, 0, 320, 390, 396, 361, 190,
	399, 359, 358, 402, 134, 0, 0, 148, 101, 100,
	109, 394, 343, 351, 92, 349, 140, 130, 159, 376,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 590, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 318, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 324,
	0, 146, 161, 174, 339, 397, 167, 168, 169, 170,
	0, 0, 0, 319, 317, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 335, 338, 333, 334,
	372, 373, 406, 407, 408, 388, 330, 0, 336, 337,
	0, 392, 375, 80, 0, 111, 171, 136, 98, 0,
	0, 0, 0, 0, 0, 401, 391, 162, 363, 403,
	341, 355, 411, 356, 357, 384, 327, 371, 128, 353,
	0, 344, 322, 350, 323, 342, 365, 96, 368, 340,
	393, 374, 110, 409, 112, 379, 0, 145, 121, 0,
	0, 367, 395, 369, 389, 362, 385, 332, 378, 404,
	354, 382, 405, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 381, 400, 352,
	383, 321, 380, 0, 325, 328, 410, 398, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 366, 370, 386,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	0, 377, 0, 0, 0, 329, 326, 0, 364, 0,
	0, 0, 331, 0, 346, 387, 0, 320, 390, 396,
	361, 190, 399, 359, 358, 402, 134, 0, 0, 148,
	101, 100, 109, 394, 343, 351, 92, 349, 140, 130,
	159, 376, 131, 139, 113, 152, 135, 189, 191, 166,
	150, 165, 81, 149, 309, 90, 142, 0, 0, 83,
	156, 147, 119, 105, 106, 82, 0, 138, 95, 99,
	94, 127, 153, 154, 93, 173, 86, 164, 85, 318,
	163, 126, 151, 157, 120, 117, 84, 155, 118, 116,
	108, 97, 102, 132, 115, 133, 103, 123, 122, 124,
	0, 324, 0, 146, 161, 174, 339, 397, 167, 168,
	169, 170, 0, 0, 0, 319, 317, 312, 311, 107,
	114, 137, 172, 129, 141, 91, 160, 144, 335, 338,
	333, 334, 372, 373, 406, 407, 408, 388, 330, 0,
	336, 337, 0, 392, 375, 80, 0, 111, 171, 136,
	98, 128, 0, 0, 753, 0, 243, 0, 0, 162,
	96, 0, 240, 0, 0, 110, 282, 112, 0, 0,
	145, 121, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 241,
	261, 260, 263, 264, 265, 266, 0, 0, 89, 262,
	267, 268, 269, 0, 0, 238, 254, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	234, 0, 0, 0, 293, 0, 253, 0, 0, 249,
	250, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 291, 0, 134,
	0, 0, 148, 101, 100, 109, 0, 0, 0, 92,
	0, 140, 130, 159, 0, 131, 139, 113, 152, 135,
	189, 191, 166, 150, 165, 81, 149, 158, 90, 142,
	0, 0, 83, 156, 147, 119, 105, 106, 82, 0,
	138, 95, 99, 94, 127, 153, 154, 93, 173, 86,
	164, 85, 87, 163, 126, 151, 157, 120, 117, 84,
	155, 118, 116, 108, 97, 102, 132, 115, 133, 103,
	123, 122, 124, 0, 0, 0, 146, 161, 174, 0,
	0, 167, 168, 169, 170, 0, 0, 0, 125, 88,
	104, 143, 107, 114, 137, 172, 129, 141, 91, 160,
	144, 283, 292, 289, 290, 287, 288, 286, 285, 284,
	294, 275, 276, 277, 278, 280, 0, 279, 80, 128,
	111, 171, 136, 98, 243, 0, 0, 0, 96, 0,
	240, 0, 162, 110, 282, 112, 0, 0, 145, 121,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 461, 241, 261, 260,
	263, 264, 265, 266, 0, 0, 89, 262, 267, 268,
	269, 0, 0, 238, 254, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 0, 0,
	0, 0, 293, 0, 253, 0, 0, 249, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 291, 0, 134, 0, 0,
	148, 101, 100, 109, 0, 0, 0, 92, 0, 140,
	130, 159, 0, 131, 139, 113, 152, 135, 189, 191,
	166, 150, 165, 81, 149, 158, 90, 142, 0, 0,
	83, 156, 147, 119, 105, 106, 82, 0, 138, 95,
	99, 94, 127, 153, 154, 93, 173, 86, 164, 85,
	87, 163, 126, 151, 157, 120, 117, 84, 155, 118,
	116, 108, 97, 102, 132, 115, 133, 103, 123, 122,
	124, 0, 0, 0, 146, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 125, 88, 104, 143,
	107, 114, 137, 172, 129, 141, 91, 160, 144, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 0, 279, 80, 128, 111, 171,
	136, 98, 243, 0, 0, 0, 96, 0, 240, 0,
	162, 110, 282, 112, 0, 0, 145, 121, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 241, 261, 260, 263, 264,
	265, 266, 0, 0, 89, 262, 267, 268, 269, 0,
	0, 238, 254, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 234, 0, 0, 0,
	293, 0, 253, 0, 0, 249, 250, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 291, 0, 134, 0, 0, 148, 101,
	100, 109, 0, 0, 0, 92, 0, 140, 130, 159,
	0, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	0, 0, 146, 161, 174, 0, 0, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 0, 279, 80, 128, 111, 171, 136, 98,
	243, 0, 0, 0, 96, 0, 240, 0, 162, 110,
	282, 112, 0, 0, 145, 121, 0, 0, 0, 0,
	273, 274, 0, 0, 0, 0, 0, 0, 816, 0,
	50, 0, 0, 241, 261, 260, 263, 264, 265, 266,
	0, 0, 89, 262, 267, 268, 269, 0, 0, 238,
	254, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 0, 0, 0, 0, 293, 0,
	253, 0, 0, 249, 250, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 291, 0, 134, 0, 0, 148, 101, 100, 109,
	0, 0, 0, 92, 0, 140, 130, 159, 0, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 0, 0,
	146, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 283, 292, 289, 290, 287,
	288, 286, 285, 284, 294, 275, 276, 277, 278, 280,
	23, 279, 80, 0, 111, 171, 136, 98, 0, 0,
	0, 0, 128, 0, 0, 0, 162, 243, 0, 0,
	0, 96, 0, 240, 0, 0, 110, 282, 112, 0,
	0, 145, 121, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	241, 261, 260, 263, 264, 265, 266, 0, 0, 89,
	262, 267, 268, 269, 0, 0, 238, 254, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 0, 0, 0, 0, 293, 0, 253, 0, 0,
	249, 250, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 291, 0,
	134, 0, 0, 148, 101, 100, 109, 0, 0, 0,
	92, 0, 140, 130, 159, 0, 131, 139, 113, 152,
	135, 189, 191, 166, 150, 165, 81, 149, 158, 90,
	142, 0, 0, 83, 156, 147, 119, 105, 106, 82,
	0, 138, 95, 99, 94, 127, 153, 154, 93, 173,
	86, 164, 85, 87, 163, 126, 151, 157, 120, 117,
	84, 155, 118, 116, 108, 97, 102, 132, 115, 133,
	103, 123, 122, 124, 0, 0, 0, 146, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 125,
	88, 104, 143, 107, 114, 137, 172, 129, 141, 91,
	160, 144, 283, 292, 289, 290, 287, 288, 286, 285,
	284, 294, 275, 276, 277, 278, 280, 0, 279, 80,
	128, 111, 171, 136, 98, 243, 0, 0, 0, 96,
	0, 240, 0, 162, 110, 282, 112, 0, 0, 145,
	121, 0, 0, 0, 0, 273, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 241, 261,
	260, 263, 264, 265, 266, 0, 0, 89, 262, 267,
	268, 269, 0, 0, 238, 254, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 0,
	0, 0, 0, 293, 0, 253, 0, 0, 249, 250,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 291, 0, 134, 0,
	0, 148, 101, 100, 109, 0, 0, 0, 92, 0,
	140, 130, 159, 0, 131, 139, 113, 152, 135, 189,
	191, 166, 150, 165, 81, 149, 158, 90, 142, 0,
	0, 83, 156, 147, 119, 105, 106, 82, 0, 138,
	95, 99, 94, 127, 153, 154, 93, 173, 86, 164,
	85, 87, 163, 126, 151, 157, 120, 117, 84, 155,
	118, 116, 108, 97, 102, 132, 115, 133, 103, 123,
	122, 124, 0, 0, 0, 146, 161, 174, 0, 0,
	167, 168, 169, 170, 0, 0, 0, 125, 88, 104,
	143, 107, 114, 137, 172, 129, 141, 91, 160, 144,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 0, 279, 80, 128, 111,
	171, 136, 98, 0, 0, 0, 0, 96, 0, 0,
	0, 162, 110, 282, 112, 0, 0, 145, 121, 0,
	0, 0, 0, 273, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 241, 261, 260, 263,
	264, 265, 266, 0, 0, 89, 262, 267, 268, 269,
	0, 0, 0, 254, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 0, 0, 0,
	0, 293, 0, 253, 0, 0, 249, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 291, 0, 134, 0, 0, 148,
	101, 100, 109, 0, 0, 0, 92, 0, 140, 130,
	159, 1329, 131, 139, 113, 152, 135, 189, 191, 166,
	150, 165, 81, 149, 158, 90, 142, 0, 0, 83,
	156, 147, 119, 105, 106, 82, 0, 138, 95, 99,
	94, 127, 153, 154, 93, 173, 86, 164, 85, 87,
	163, 126, 151, 157, 120, 117, 84, 155, 118, 116,
	108, 97, 102, 132, 115, 133, 103, 123, 122, 124,
	0, 0, 0, 146, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 125, 88, 104, 143, 107,
	114, 137, 172, 129, 141, 91, 160, 144, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 0, 279, 80, 128, 111, 171, 136,
	98, 0, 0, 0, 0, 96, 0, 0, 0, 162,
	110, 282, 112, 0, 0, 145, 121, 0, 0, 0,
	0, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 241, 261, 260, 263, 264, 265,
	266, 0, 0, 89, 262, 267, 268, 269, 0, 0,
	0, 254, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 0, 0, 0, 0, 293,
	0, 253, 0, 0, 249, 250, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 291, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 283, 292, 289, 290,
	287, 288, 286, 285, 284, 294, 275, 276, 277, 278,
	280, 0, 279, 80, 128, 111, 171, 136, 98, 0,
	0, 0, 0, 96, 0, 0, 0, 162, 110, 0,
	112, 0, 0, 145, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 495, 494, 504,
	505, 497, 498, 499, 500, 501, 502, 503, 496, 0,
	0, 506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 101, 100, 109, 0,
	0, 0, 92, 0, 140, 130, 159, 0, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 0, 0, 146,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 80, 96, 111, 171, 136, 98, 110, 0, 112,
	0, 0, 145, 121, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 73, 0, 67, 0, 0, 0,
	74, 134, 0, 0, 148, 101, 100, 109, 0, 0,
	0, 92, 0, 140, 130, 159, 0, 131, 139, 113,
	152, 135, 76, 69, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 0, 0, 146, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 111, 171, 136, 98, 77, 128, 0, 0,
	0, 483, 0, 0, 162, 0, 96, 0, 0, 0,
	0, 110, 0, 112, 0, 0, 145, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 0, 485, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 480,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 101,
	100, 109, 0, 0, 0, 92, 0, 140, 130, 159,
	0, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	0, 0, 146, 161, 174, 0, 0, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	579, 0, 0, 0, 80, 96, 111, 171, 136, 98,
	110, 0, 112, 0, 0, 145, 121, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 581, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 80, 0, 111, 171, 136, 98, 96,
	0, 0, 0, 0, 110, 0, 112, 162, 0, 145,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 134, 0,
	0, 148, 101, 100, 109, 0, 0, 0, 92, 0,
	140, 130, 159, 0, 131, 139, 113, 152, 135, 189,
	191, 166, 150, 165, 81, 149, 158, 90, 142, 0,
	0, 83, 156, 147, 119, 105, 106, 82, 0, 138,
	95, 99, 94, 127, 153, 154, 93, 173, 86, 164,
	85, 87, 163, 126, 151, 157, 120, 117, 84, 155,
	118, 116, 108, 97, 102, 132, 115, 133, 103, 123,
	122, 124, 0, 0, 0, 146, 161, 174, 0, 0,
	167, 168, 169, 170, 0, 0, 0, 125, 88, 104,
	143, 107, 114, 137, 172, 129, 141, 91, 160, 144,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 80, 0, 111,
	171, 136, 98, 96, 0, 0, 0, 0, 110, 0,
	112, 162, 0, 145, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 101, 100, 109, 0,
	0, 0, 92, 0, 140, 130, 159, 0, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 0, 0, 146,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 80, 96, 111, 171, 136, 98, 110, 0, 112,
	0, 0, 145, 121, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 704, 0, 0, 705, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 101, 100, 109, 0, 0,
	0, 92, 0, 140, 130, 159, 0, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 0, 0, 146, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	80, 0, 111, 171, 136, 98, 96, 0, 599, 0,
	0, 110, 0, 112, 162, 0, 145, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 0, 598, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 101,
	100, 109, 0, 0, 0, 92, 0, 140, 130, 159,
	0, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	0, 0, 146, 161, 174, 0, 0, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	579, 0, 0, 0, 80, 96, 111, 171, 136, 98,
	110, 0, 112, 0, 0, 145, 121, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 581, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	577, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 80, 96, 111, 171, 136, 98, 110,
	0, 112, 0, 0, 145, 121, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 134, 0, 0, 148, 101, 100, 109,
	0, 0, 0, 92, 0, 140, 130, 159, 0, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 0, 0,
	146, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 80, 96, 111, 171, 136, 98, 110, 0,
	112, 0, 0, 145, 121, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 581, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 101, 100, 109, 0,
	0, 0, 92, 0, 140, 130, 159, 0, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 0, 0, 146,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 80, 96, 111, 171, 136, 98, 110, 0, 112,
	0, 0, 145, 121, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 485, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 101, 100, 109, 0, 0,
	0, 92, 0, 140, 130, 159, 0, 131, 139, 113,
	152, 135, 189, 191, 166, 150, 165, 81, 149, 158,
	90, 142, 0, 0, 83, 156, 147, 119, 105, 106,
	82, 0, 138, 95, 99, 94, 127, 153, 154, 93,
	173, 86, 164, 85, 87, 163, 126, 151, 157, 120,
	117, 84, 155, 118, 116, 108, 97, 102, 132, 115,
	133, 103, 123, 122, 124, 0, 0, 0, 146, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	125, 88, 104, 143, 107, 114, 137, 172, 129, 141,
	91, 160, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	80, 0, 111, 171, 136, 98, 0, 557, 96, 0,
	0, 0, 0, 110, 162, 112, 0, 0, 145, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 134, 0, 0,
	148, 101, 100, 109, 0, 0, 0, 92, 0, 140,
	130, 159, 0, 131, 139, 113, 152, 135, 189, 191,
	166, 150, 165, 81, 149, 158, 90, 142, 0, 0,
	83, 156, 147, 119, 105, 106, 82, 0, 138, 95,
	99, 94, 127, 153, 154, 93, 173, 86, 164, 85,
	87, 163, 126, 151, 157, 120, 117, 84, 155, 118,
	116, 108, 97, 102, 132, 115, 133, 103, 123, 122,
	124, 0, 0, 0, 146, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 125, 88, 104, 143,
	107, 114, 137, 172, 129, 141, 91, 160, 144, 0,
	0, 304, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 80, 96, 111, 171,
	136, 98, 110, 0, 112, 0, 0, 145, 121, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	101, 100, 109, 0, 0, 0, 92, 0, 140, 130,
	159, 0, 131, 139, 113, 152, 135, 189, 191, 166,
	150, 165, 81, 149, 158, 90, 142, 0, 0, 83,
	156, 147, 119, 105, 106, 82, 0, 138, 95, 99,
	94, 127, 153, 154, 93, 173, 86, 164, 85, 87,
	163, 126, 151, 157, 120, 117, 84, 155, 118, 116,
	108, 97, 102, 132, 115, 133, 103, 123, 122, 124,
	0, 0, 0, 146, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 125, 88, 104, 143, 107,
	114, 137, 172, 129, 141, 91, 160, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 80, 96, 111, 171, 136,
	98, 110, 0, 112, 0, 0, 145, 121, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 101,
	100, 109, 0, 0, 0, 92, 0, 140, 130, 159,
	0, 131, 139, 113, 152, 135, 189, 191, 166, 150,
	165, 81, 149, 158, 90, 142, 0, 0, 83, 156,
	147, 119, 105, 106, 82, 0, 138, 95, 99, 94,
	127, 153, 154, 93, 173, 86, 164, 85, 87, 163,
	126, 151, 157, 120, 117, 84, 155, 118, 116, 108,
	97, 102, 132, 115, 133, 103, 123, 122, 124, 0,
	0, 0, 146, 161, 174, 0, 0, 167, 168, 169,
	170, 0, 0, 0, 125, 88, 104, 143, 107, 114,
	137, 172, 129, 141, 91, 160, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 80, 96, 111, 171, 136, 98,
	110, 0, 112, 0, 0, 145, 121, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 101, 100,
	109, 0, 0, 0, 92, 0, 140, 130, 159, 0,
	131, 139, 113, 152, 135, 189, 191, 166, 150, 165,
	81, 149, 158, 90, 142, 0, 0, 83, 156, 147,
	119, 105, 106, 82, 0, 138, 95, 99, 94, 127,
	153, 154, 93, 173, 86, 164, 85, 87, 163, 126,
	151, 157, 120, 117, 84, 155, 118, 116, 108, 97,
	102, 132, 115, 133, 103, 123, 122, 124, 0, 0,
	0, 146, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 125, 88, 104, 143, 107, 114, 137,
	172, 129, 141, 91, 160, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 80, 96, 111, 171, 136, 98, 110,
	0, 112, 0, 0, 145, 121, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 134, 0, 0, 148, 101, 100, 109,
	0, 0, 0, 92, 0, 140, 130, 159, 0, 131,
	139, 113, 152, 135, 189, 191, 166, 150, 165, 81,
	149, 158, 90, 142, 0, 0, 83, 156, 147, 119,
	105, 106, 82, 0, 138, 95, 99, 94, 127, 153,
	154, 93, 173, 86, 164, 85, 87, 163, 126, 151,
	157, 120, 117, 84, 155, 118, 116, 108, 97, 102,
	132, 115, 133, 103, 123, 122, 124, 0, 0, 0,
	146, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 125, 88, 104, 143, 107, 114, 137, 172,
	129, 141, 91, 160, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 80, 96, 111, 171, 136, 98, 110, 0,
	112, 0, 0, 145, 121, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 101, 100, 109, 0,
	0, 0, 92, 0, 140, 130, 159, 0, 131, 139,
	113, 152, 135, 189, 191, 166, 150, 165, 81, 149,
	158, 90, 142, 0, 0, 83, 156, 147, 119, 105,
	106, 82, 0, 138, 95, 99, 94, 127, 153, 154,
	93, 173, 86, 164, 85, 87, 163, 126, 151, 157,
	120, 117, 84, 155, 118, 116, 108, 97, 102, 132,
	115, 133, 103, 123, 122, 124, 0, 0, 0, 146,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 125, 88, 104, 143, 107, 114, 137, 172, 129,
	141, 91, 160, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 111, 171, 136, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 162,
}
var yyPact = [...]int{

	1490, -1000, -186, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 806, 831, -1000, -1000, -1000, -1000, -1000, -1000, 649,
	7205, 53, 76, 6, 10089, 75, 216, 10746, -1000, -1,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 621, -1000, -1000,
	-1000, -1000, -1000, 799, 803, 676, 792, 727, -1000, 5609,
	49, 8987, 9870, 4920, -1000, 514, 73, 10746, -136, 10308,
	47, 47, 513, 47, -1000, -1000, -1000, 177, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 68, 10746, -1000, 10746, 44,
	512, 44, 44, 44, 10746, -1000, 111, -1000, -1000, -1000,
	-1000, -1000, 10746, 504, 749, 67, 2904, 2904, 2904, 2904,
	4, 2904, -85, 694, -1000, -1000, -1000, -1000, 2904, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 437,
	764, 6302, 6302, 806, -1000, 621, -1000, -1000, -1000, 761,
	-1000, -1000, 250, 816, -1000, 7439, 110, -1000, 6302, 1763,
	554, -1000, -1000, 554, -1000, -1000, 93, -1000, -1000, 6758,
	6758, 6758, 6758, 6758, 6758, 6758, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	554, -1000, 6074, 554, 554, 554, 554, 554, 554, 554,
	554, 6302, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 9651, 633, 674, -1000, -1000,
	-1000, 784, 8106, 8768, 10746, 566, -1000, 616, 4668, -116,
	-1000, -1000, -1000, 159, 8549, -1000, -1000, -1000, 748, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 503, -1000, 1941, 500, 2904, 52, 662, 498,
	197, 494, 2904, -171, -1000, 10746, 493, 10746, 2904, 62,
	10746, 782, 693, 10746, 450, 447, -1000, 4416, -1000, 2904,
	2904, 2904, 2904, 2904, 2904, 2904, 2904, -1000, -1000, -1000,
	-1000, -1000, -1000, 2904, 2904, -1000, -64, -1000, 10746, -1000,
	-1000, -1000, -1000, 826, 134, 418, 107, 618, -1000, 453,
	799, 437, 727, 8325, 683, -1000, -1000, 10746, -1000, 6302,
	6302, 336, -1000, 9425, -1000, -1000, 3408, 142, 6758, 308,
	263, 6758, 6758, 6758, 6758, 6758, 6758, 6758, 6758, 6758,
	6758, 6758, 6758, 6758, 6758, 6758, 298, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 445, -1000, 621, 646, 646,
	122, 122, 122, 122, 122, 122, 6986, 5153, 437, 487,
	288, 6074, 5609, 5609, 6302, 6302, 10527, 10527, 5609, 786,
	184, 288, 10527, -1000, 437, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5609, 5609, 5609, 5609, 24, 10746, -1000, 10527,
	8987, 8987, 8987, 8987, 8987, -1000, 716, 711, -1000, 708,
	707, 721, 10746, -1000, 484, 8106, 133, 554, -1000, 9206,
	-1000, -1000, 24, 574, 8987, 10746, -1000, -1000, 4164, 616,
	-116, 614, -1000, -98, -81, 5837, 118, -1000, -1000, -1000,
	-1000, 2652, 214, 196, -59, -1000, -1000, -1000, 622, -1000,
	622, 622, 622, 622, -31, -31, -31, -31, -1000, -1000,
	-1000, -1000, -1000, 647, 642, -1000, 622, 622, 622, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 638, 638, 638, 630, 630,
	671, -1000, 10746, -153, 431, 2904, 781, 2904, -1000, 837,
	837, -1000, -182, -1000, 64, -1000, 10746, -1000, -1000, 10746,
	2904, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 217, -1000, -1000, -1000,
	-1000, 734, 6302, 6302, 3912, 6302, -1000, -1000, -1000, 764,
	-1000, 786, 798, -1000, 743, 741, 5609, -1000, -1000, 142,
	255, -1000, -1000, 370, -1000, -1000, -1000, -1000, 106, 554,
	-1000, 1799, -1000, -1000, -1000, -1000, 308, 6758, 6758, 6758,
	1475, 1799, 1837, 1371, 1860, 122, 351, 351, 120, 120,
	120, 120, 120, 363, 363, -1000, -1000, -1000, 437, -1000,
	-1000, -1000, 437, 5609, 615, -1000, -1000, 6302, -1000, 437,
	481, 481, 254, 322, 610, -1000, 103, 608, 481, 5609,
	183, -1000, 6302, 437, -1000, 481, 437, 481, 481, 541,
	554, -1000, 579, -1000, 157, 674, 637, 690, 851, -1000,
	-1000, -1000, -1000, 710, -1000, 686, -1000, -1000, -1000, -1000,
	-1000, 71, 69, 65, 10308, -1000, 813, 8987, 578, -1000,
	-1000, 614, -116, -87, -1000, -1000, -1000, 288, -1000, 427,
	613, 2400, -1000, -1000, -1000, -1000, -1000, -1000, 632, 770,
	162, 193, 425, -1000, -1000, 755, -1000, 234, -61, -1000,
	-1000, 319, -31, -31, -1000, -1000, 118, 747, 118, 118,
	118, 360, 360, -1000, -1000, -1000, -1000, 317, -1000, -1000,
	-1000, 307, -1000, 689, 10308, 2904, -1000, 3660, -1000, -1000,
	-1000, -1000, -1000, 687, -1000, -1000, -1000, 685, 415, -1000,
	271, 190, 189, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 23, -1000, 2904, -1000, 224, 10746,
	10746, 730, 288, 288, 101, -1000, -1000, 10746, -1000, -1000,
	-1000, -1000, 577, -1000, -1000, -1000, 3156, 5609, -1000, 1475,
	1799, 1671, -1000, 6758, 6758, -1000, -1000, 481, 5609, 288,
	-1000, -1000, -1000, 887, 298, 887, 6758, 6758, 3912, 6758,
	6758, -148, 568, 179, -1000, 6302, 303, -1000, -1000, -1000,
	-1000, -1000, 679, 10527, 554, -1000, 7882, 10308, 806, 10527,
	6302, 6302, -1000, -1000, 6302, 631, -1000, 6302, -1000, -1000,
	-1000, 554, 554, 554, 466, -1000, 806, 578, -1000, -1000,
	-1000, -102, -90, -1000, -1000, 2652, -1000, 2652, 10308, -1000,
	413, 411, -1000, -1000, 639, 72, -1000, -1000, -1000, 520,
	118, 118, -1000, 198, -1000, -1000, -1000, 479, -1000, 476,
	611, 473, 10746, -1000, -1000, 588, -1000, 151, 10746, 10746,
	9, -1000, -1000, -1000, 10308, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10308, 10746, -1000,
	-1000, -1000, -1000, -1000, 10308, -1000, -1000, 357, 6302, -1000,
	-1000, -1000, 3660, -1000, 813, 8987, -1000, -1000, 437, -1000,
	6758, 1799, 1799, -1000, -1000, 437, 622, 622, -1000, 622,
	630, -1000, 622, -12, 622, -15, 437, 437, 1578, 1778,
	-1000, 1495, 1607, 554, -143, -1000, 288, 6302, -1000, 775,
	530, 551, -1000, -1000, 5381, 437, 471, 87, 466, 799,
	-1000, 288, 288, 288, 10308, 288, 10308, 10308, 10308, 7658,
	10308, 799, -1000, -1000, -1000, -1000, 2400, -1000, 461, -1000,
	622, -1000, -1000, -55, 822, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -31, 356, -31, 291,
	-1000, 289, 2904, 3660, 2652, 796, 795, -1000, -1000, 620,
	-1000, -1000, -1000, -1000, 777, -1000, 288, 811, 580, -1000,
	1799, -1000, -1000, 119, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6758, 6758, -1000, 6758, 6758, 6758, 437,
	353, 288, 769, -1000, 554, -1000, -1000, 553, 10308, 10308,
	-1000, -1000, 459, -1000, 455, 455, 455, 133, -1000, -1000,
	115, 10308, -1000, 141, -1000, -126, 118, -1000, 118, 467,
	456, -1000, -1000, -1000, -179, -180, 10308, 554, 808, 802,
	-1000, -1000, 1558, 1558, 1558, 1558, 16, -1000, -1000, 820,
	-1000, 554, -1000, 621, 83, -1000, 10308, -1000, -1000, -1000,
	-1000, -1000, 115, -1000, 379, 150, 349, -1000, 240, 766,
	-1000, 757, -1000, -1000, -1000, -1000, -1000, -166, -173, 436,
	22, -1000, 6302, 6302, -1000, -1000, -1000, -1000, 437, 51,
	-157, 10527, 551, 437, 10308, -1000, -1000, -1000, 286, -1000,
	-1000, -1000, 323, -1000, -1000, -172, -172, 662, 377, -1000,
	10308, 288, 548, -1000, 723, -151, -161, 543, -1000, -1000,
	-1000, -1000, -1000, 374, 364, -1000, -153, -1000, 22, 740,
	-1000, 720, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19, -154, 12, -159, 554, -162, 6530, -1000, 1558, 437,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1066, 19, 517, 1064, 1060, 1058, 1055, 1054, 1053,
	1051, 1050, 1048, 1047, 1046, 1045, 1044, 1043, 1040, 1037,
	1034, 1032, 1031, 1030, 133, 1029, 1028, 1027, 63, 1026,
	64, 1025, 1024, 32, 104, 38, 31, 1130, 1016, 24,
	75, 84, 1013, 45, 1012, 1011, 59, 1010, 58, 1008,
	1007, 1326, 1006, 1001, 18, 61, 1000, 999, 998, 997,
	60, 600, 996, 995, 994, 991, 990, 988, 43, 5,
	7, 12, 15, 984, 457, 29, 982, 39, 980, 979,
	977, 971, 26, 970, 46, 965, 41, 47, 963, 14,
	57, 28, 22, 10, 73, 54, 962, 27, 52, 44,
	961, 958, 333, 954, 953, 951, 949, 945, 944, 147,
	412, 943, 942, 941, 940, 42, 170, 346, 357, 68,
	939, 938, 937, 1256, 66, 55, 21, 936, 25, 53,
	33, 934, 933, 30, 932, 931, 926, 924, 923, 922,
	921, 65, 918, 916, 915, 34, 13, 914, 910, 51,
	36, 909, 908, 907, 37, 50, 901, 40, 891, 888,
	887, 886, 23, 17, 885, 11, 882, 9, 881, 880,
	2, 879, 16, 876, 3, 875, 4, 35, 869, 867,
	6, 865, 861, 859, 8, 49, 849, 848, 843, 0,
	151, 842, 838, 98,
}
var yyR1 = [...]int{

	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 191,
	191, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	178, 178, 181, 182, 179, 180, 183, 183, 185, 185,
	185, 184, 184, 184, 11, 11, 11, 11, 11, 11,
	11, 11, 176, 176, 175, 174, 174, 173, 173, 172,
	16, 159, 160, 160, 160, 155, 134, 134, 134, 134,
	137, 137, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 140, 140, 140, 140, 140, 140,
	140, 140, 154, 154, 141, 141, 149, 149, 150, 150,
	150, 147, 147, 148, 148, 151, 151, 151, 142, 142,
	142, 142, 142, 142, 142, 144, 144, 152, 152, 145,
	145, 145, 146, 146, 153, 153, 153, 153, 153, 143,
	143, 156, 156, 168, 168, 167, 167, 167, 158, 158,
	164, 164, 164, 164, 164, 157, 157, 166, 166, 165,
	161, 161, 161, 162, 162, 162, 163, 163, 163, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 171,
	169, 169, 170, 170, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 132, 132,
	132, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 192, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 120, 120, 120, 119, 119, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 127, 127, 126, 126, 126, 125,
	125, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 103, 103,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	193, 193, 66, 66, 66, 66, 31, 31, 31, 31,
	31, 130, 130, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 78, 78, 32, 32,
	76, 76, 77, 79, 79, 75, 75, 75, 60, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 62, 80,
	80, 81, 81, 82, 82, 83, 83, 84, 85, 85,
	85, 86, 86, 86, 86, 87, 87, 87, 59, 59,
	59, 59, 59, 59, 88, 88, 88, 88, 92, 92,
	70, 70, 72, 72, 71, 73, 93, 93, 97, 94,
	94, 98, 98, 98, 96, 96, 96, 122, 122, 122,
	101, 101, 109, 109, 110, 110, 102, 102, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 112, 112,
	112, 113, 113, 114, 114, 114, 121, 121, 117, 117,
	118, 118, 123, 123, 124, 124, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 189, 190, 128, 129,
	129, 129, 186,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 6, 1, 1, 1, 1, 10, 10, 1, 1,
	1, 0, 2, 2, 2, 8, 4, 6, 5, 5,
	5, 4, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 1, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 3, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1, 0,
}
var yyChk = [...]int{

	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -189, 8, 237,
	53, -188, 260, -82, 15, -26, 5, -24, -192, -24,
	-24, -24, -24, -24, -159, 53, -114, 121, 70, 148,
	229, 118, -178, 119, 125, -117, 147, 251, 56, -116,
	245, 152, 165, 159, 186, 178, 176, 179, 216, 65,
	155, 225, 136, 174, 170, 168, 27, 191, 250, 169,
	131, 130, 192, 196, 217, 163, 164, 219, 190, 132,
	32, 247, 34, 144, 220, 194, 189, 185, 188, 162,
	184, 38, 198, 197, 199, 215, 181, 171, 18, 223,
	139, 142, 193, 195, 126, 146, 249, 221, 167, 143,
	138, 224, 156, 218, 227, 37, 203, 161, 129, 153,
	150, 182, 145, 172, 173, 187, 160, 183, 154, 140,
	226, 204, 259, 180, 177, 151, 149, 208, 209, 210,
	211, 248, 222, 175, 205, -102, 121, 123, 119, 119,
	120, 121, 229, 118, 119, -51, -123, 56, -116, 147,
	121, 148, 119, 106, 179, 112, 206, 120, 32, 146,
	-132, 119, -104, 149, 208, 209, 210, 211, 56, 218,
	217, 212, -123, 154, -128, -128, -128, -128, -128, -2,
	-86, 17, 16, -5, -3, -189, 6, 20, 21, -30,
	39, 40, -25, -36, 97, -37, -123, -56, 72, -61,
	29, 56, -116, 23, -60, -57, -75, -73, -74, 106,
	107, 95, 96, 103, 73, 108, -65, -63, -64, -66,
	58, 57, 66, 59, 60, 61, 62, 67, 68, 69,
	-117, -71, -189, 43, 44, 238, 239, 240, 241, 244,
	242, 75, 33, 228, 236, 235, 234, 232, 233, 230,
	231, 124, 229, 101, 237, -102, -39, -40, -41, -42,
	-53, -74, -189, -51, 11, -46, -51, -94, -131, 154,
	-98, 218, 217, -118, -96, -117, -115, 216, 179, 215,
	117, 71, 22, 24, 201, 74, 106, 16, 75, 105,
	238, 112, 47, 230, 231, 228, 240, 241, 229, 206,
	29, 10, 25, 134, 21, 99, 114, 78, 79, 137,
	23, 135, 69, 19, 50, 11, 13, 14, 124, 123,
	90, 120, 45, 8, 108, 26, 87, 41, 28, 43,
	88, 17, 232, 233, 31, 244, 141, 101, 48, 35,
	72, 67, 51, 70, 15, 46, 89, 115, 237, 44,
	118, 6, 243, 30, 133, 42, 119, 207, 77, 122,
	68, 5, 125, 9, 49, 52, 234, 235, 236, 33,
	76, 12, -160, -155, 56, 120, -51, 237, -117, -110,
	124, -110, -183, -179, 56, -110, 80, 119, -51, -51,
	-109, 124, 56, -109, -109, -109, -51, 109, -51, 56,
	30, 229, 56, 146, 119, 147, 121, -129, -189, -118,
	-129, -129, -129, 150, 151, -129, -105, 213, 51, -129,
	-190, 55, -87, 19, 31, -37, -123, -83, -84, -37,
	-82, -2, -24, 35, -28, 21, 64, 11, -120, 71,
	70, 87, -119, 22, -117, 58, 109, -37, -58, 90,
	72, 88, 89, 74, 92, 91, 102, 95, 96, 97,
	98, 99, 100, 101, 93, 94, 105, 80, 81, 82,
	83, 84, 85, 86, -103, -189, -74, -189, 110, 111,
	-61, -61, -61, -61, -61, -61, -61, -189, -2, -69,
	-37, -189, -189, -189, -189, -189, -189, -189, -189, -189,
	-78, -37, -189, -193, -189, -193, -193, -193, -193, -193,
	-193, -193, -189, -189, -189, -189, -52, 26, -51, 30,
	54, -47, -49, -48, -50, 41, 45, 47, 42, 43,
	44, 48, -127, 22, -39, -189, -126, 142, -125, 22,
	-123, 58, -51, -46, -191, 54, 11, 52, 54, -94,
	154, -95, -99, 219, 221, 80, -122, -117, 58, 29,
	30, 55, 54, -134, -137, -139, -138, -140, -135, -136,
	176, 177, 106, 180, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 30, 136, 172, 173, 174, 175,
	192, 193, 194, 195, 196, 197, 198, 199, 159, 160,
	161, 162, 163, 164, 165, 167, 168, 169, 170, 171,
	56, -129, 121, -176, 52, 56, 72, 56, -129, 256,
	252, -51, -181, 56, -51, -129, 122, -51, 23, 51,
	-51, 56, 56, -124, -123, -115, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -107, 207, 214, -51,
	9, 90, 54, 18, 109, 54, -85, 24, 25, -86,
	-190, -30, -62, -117, 59, 62, -29, 42, -51, -37,
	-37, -67, 67, 72, 68, 69, -119, 97, -124, -118,
	-115, -61, -68, -71, -74, 63, 90, 88, 89, 74,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -130, 56, 58, 56, -60,
	-60, -117, -35, 21, -34, -36, -190, 54, -190, -2,
	-34, -34, -37, -37, -75, -117, -123, -75, -34, -28,
	-76, -77, 76, -75, -190, -34, -35, -34, -34, -90,
	142, -51, -93, -97, -75, -40, -41, -41, -40, -41,
	41, 41, 41, 46, 41, 46, 41, -48, -123, -190,
	-54, 49, 123, 50, -189, -125, -90, 52, -39, -51,
	-98, -95, 54, 220, 222, 223, 51, -37, -146, 105,
	-161, -162, -163, -118, 58, 59, -155, -156, -164, 126,
	129, 125, -157, 120, 28, -151, 67, 72, -147, 204,
	-141, 53, -141, -141, -141, -141, -145, 179, -145, -145,
	-145, 53, 53, -141, -141, -141, -149, 53, -149, -149,
	-150, 53, -150, -121, 52, -51, -174, 248, -175, 56,
	-129, 23, -129, -185, 8, 9, 10, -185, 258, -111,
	117, 114, 115, -171, 113, 201, 179, 65, 29, 15,
	238, 142, 259, 56, 143, -51, -51, -129, -106, 11,
	90, 37, -37, -37, -124, -84, -87, -101, 19, 11,
	33, 33, -34, 67, 68, 69, 109, -189, -68, -61,
	-61, -61, -33, 137, 71, -190, -190, -34, 54, -37,
	-190, -190, -190, 54, 52, 22, 54, 11, 109, 54,
	11, -190, -34, -79, -77, 78, -37, -190, -190, -190,
	-190, -190, -59, 30, 33, -2, -189, -189, -55, 54,
	12, 80, -44, -43, 51, 52, -45, 51, -43, 41,
	41, 120, 120, 120, -91, -117, -55, -39, -55, -99,
	-100, 224, 221, 227, 56, 54, -163, 80, 53, 28,
	-157, -157, 56, 56, -142, 29, 67, -148, 205, 59,
	-145, -145, -146, 30, -146, -146, -146, -154, 58, -154,
	59, 59, 51, -117, -129, -173, -172, -118, 51, 51,
	-182, 56, -128, -177, 148, 127, 128, 131, 130, 56,
	120, 28, 126, 129, 142, 125, -177, 148, -112, -113,
	122, 22, 120, 28, 142, -129, -108, 88, 12, -123,
	-123, 38, 109, -51, -38, 11, 97, -118, -35, -33,
	71, -61, -61, -190, -36, -133, 106, 176, 136, 174,
	170, 190, 181, 203, 172, 204, -130, -133, -61, -61,
	-118, -61, -61, 245, -82, 79, -37, 77, -92, 51,
	-93, -70, -72, -71, -189, -2, -88, -117, -91, -82,
	-97, -37, -37, -37, 53, -37, -189, -189, -189, -190,
	54, -82, -55, 221, 225, 226, -162, -163, -166, -165,
	-117, 56, 56, -144, 51, 58, 59, 60, 67, 228,
	66, 55, -146, -146, 56, 106, 55, 54, 55, 54,
	55, 54, -51, 54, 80, -51, -51, 147, -128, -117,
	-128, -117, -51, -128, -117, 58, -37, -55, -39, -190,
	-61, -190, -141, -141, -141, -150, -141, 164, -141, 164,
	-190, -190, -190, 54, 19, -190, 54, 19, -189, -32,
	243, -37, 27, -92, 54, -190, -190, -190, 54, 109,
	-190, -86, -89, -117, -89, -89, -89, -126, -117, -86,
	55, 54, -141, -152, 201, 9, -145, 58, -145, 59,
	59, -129, -172, -163, 19, 19, 53, 26, -80, 13,
	-145, 56, -61, -61, -61, -61, -61, -190, 58, 28,
	-72, 33, -2, -189, -117, -117, 54, 55, -190, -190,
	-190, -54, -168, -167, 52, 132, 65, -165, -153, 126,
	28, 125, 228, -146, -146, 55, 55, 257, 257, -89,
	-189, -81, 14, 16, -190, -190, -190, -190, -31, 90,
	248, 9, -70, -2, 109, -117, -167, 56, -158, 80,
	58, -143, 65, 28, 28, 253, 253, 55, -169, -170,
	142, -37, -69, -190, 246, 48, 249, -93, -190, -117,
	59, 58, -184, 254, 255, -184, -176, -190, 54, -117,
	38, 247, 250, -180, -186, 56, 56, -180, -174, -170,
	33, 38, 144, 248, 145, 249, -189, 250, -61, 141,
	-190, -190,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 523, 0, 292, 292, 292, 292, 292, 292, 0,
	593, 576, 0, 0, 0, 0, -2, 282, 283, 0,
	285, 286, 798, 798, 798, 798, 798, 0, 33, 34,
	796, 1, 3, 531, 0, 0, 296, 299, 294, 0,
	576, 0, 0, 0, 74, 0, 0, 785, 0, 786,
	574, 574, 0, 574, 594, 595, -2, 0, 598, 599,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 778,
	779, 780, 781, 782, 783, 784, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 0, 0, 577, 0, 572,
	0, 572, 572, 572, 0, 241, 363, 602, 603, 777,
	785, 786, 0, 0, 0, 0, 799, 799, 799, 799,
	0, 799, 270, 259, 261, 262, 263, 264, 799, 279,
	280, 269, 281, 284, 287, 288, 289, 290, 291, 27,
	535, 0, 0, 523, 29, 0, 292, 297, 298, 302,
	300, 301, 293, 0, 310, 314, 0, 371, 0, 376,
	378, -2, -2, 0, 413, 414, 415, 416, 417, 0,
	0, 0, 0, 0, 0, 0, 440, 441, 442, 443,
	508, 509, 510, 511, 512, 513, 514, 515, 380, 381,
	505, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 496, 0, 470, 470, 470, 470, 470, 470, 470,
	470, 0, 0, 0, 0, 0, 0, 321, 323, 324,
	325, 344, 0, 346, 0, 0, 41, 45, 0, 776,
	559, -2, -2, 0, 0, 600, 601, -2, 705, -2,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 0, 92, 0, 0, 799, 0, 82, 0,
	0, 0, 799, 0, 64, 0, 0, 0, 799, 0,
	0, 0, 0, 0, 0, 0, 240, 0, 242, 799,
	799, 799, 799, 799, 799, 799, 799, 251, 800, 801,
	252, 253, 254, 799, 799, 256, 0, 271, 0, 265,
	28, 797, 22, 0, 0, 532, 0, 524, 525, 528,
	531, 27, 299, 0, 304, 303, 295, 0, 311, 0,
	0, 0, 315, 0, 317, 318, 0, 374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 399, 400,
	401, 402, 403, 404, 377, 0, 391, 0, 0, 0,
	433, 434, 435, 436, 437, 438, 0, 306, 27, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 497, 0, 462, 0, 463, 464, 465, 466, 467,
	468, 469, 0, 306, 0, 0, 43, 0, 362, 0,
	0, 0, 0, 0, 0, 351, 0, 0, 354, 0,
	0, 0, 0, 345, 0, 0, 365, 749, 347, 0,
	349, 350, -2, 0, 0, 0, 39, 40, 0, 46,
	776, 48, 49, 0, 0, 0, 172, 567, 568, 569,
	565, 200, 0, 155, 151, 97, 98, 99, 144, 101,
	144, 144, 144, 144, 169, 169, 169, 169, 127, 128,
	129, 130, 131, 0, 0, 114, 144, 144, 144, 118,
	134, 135, 136, 137, 138, 139, 140, 141, 102, 103,
	104, 105, 106, 107, 108, 146, 146, 146, 148, 148,
	596, 76, 0, 85, 0, 799, 0, 799, 81, 0,
	0, 90, 0, 62, 0, 216, 0, 235, 573, 0,
	799, 238, 239, 364, 604, 605, 243, 244, 245, 246,
	247, 248, 249, 250, 255, 258, 272, 266, 267, 260,
	536, 0, 0, 0, 0, 0, 527, 529, 530, 535,
	30, 302, 0, 516, 0, 0, 0, 305, 25, 372,
	373, 375, 392, 0, 394, 396, 316, 312, 0, 506,
	-2, 382, 383, 407, 408, 409, 0, 0, 0, 0,
	405, 387, 0, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 427, 428, 429, 432, 481, 482, 0, 430,
	431, 439, 0, 0, 307, 308, 410, 0, 554, 27,
	0, 0, 0, 0, 0, 505, 0, 0, 0, 0,
	503, 500, 0, 0, 471, 0, 0, 0, 0, 0,
	0, 361, 369, 556, 0, 322, 340, 342, 0, 337,
	352, 353, 355, 0, 357, 0, 359, 360, 326, 327,
	328, 0, 0, 0, 0, 348, 369, 0, 369, 42,
	560, 47, 0, 0, 52, 53, 561, 562, 563, 0,
	91, 201, 203, 206, 207, 208, 93, 94, 0, 0,
	0, 0, 0, 195, 196, 158, 156, 0, 153, 152,
	100, 0, 169, 169, 121, 122, 172, 0, 172, 172,
	172, 0, 0, 115, 116, 117, 109, 0, 110, 111,
	112, 0, 113, 0, 0, 799, 78, 0, 83, 84,
	79, 575, 80, 0, 68, 69, 70, 0, 0, 798,
	0, 0, 588, 217, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 0, 234, 799, 237, 275, 0,
	0, 0, 533, 534, 0, 526, 23, 0, 570, 571,
	517, 518, 319, 393, 395, 397, 0, 306, 384, 405,
	388, 0, 385, 0, 0, 379, 444, 0, 0, 412,
	-2, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 523, 0, 501, 0, 0, 461, 472, 473,
	474, 475, 548, 0, 0, -2, 0, 0, 523, 0,
	0, 0, 334, 341, 0, 0, 335, 0, 336, 356,
	358, 0, 0, 0, 0, 332, 523, 369, 38, 50,
	51, 0, 0, 57, 173, 0, 204, 0, 0, 190,
	0, 0, 193, 194, 165, 0, 157, 96, 154, 0,
	172, 172, 123, 0, 124, 125, 126, 0, 142, 0,
	0, 0, 0, 597, 77, 86, 87, 0, 0, 0,
	0, 63, 209, 798, 0, 218, 219, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 798, 0, 0, 798,
	589, 590, 591, 592, 0, 236, 257, 0, 0, 273,
	274, 537, 0, 24, 369, 0, 313, 507, 0, 386,
	0, 406, 389, 445, 309, 0, 144, 144, 486, 144,
	148, 489, 144, 491, 144, 494, 0, 0, 0, 0,
	506, 0, 0, 0, 498, 460, 504, 0, 31, 0,
	548, 538, 550, 552, 0, 27, 0, 544, 0, 531,
	557, 370, 558, 338, 0, 343, 0, 0, 0, 346,
	0, 531, 37, 54, 55, 56, 202, 205, 0, 197,
	144, 191, 192, 167, 0, 159, 160, 161, 162, 163,
	164, 145, 119, 120, 170, 171, 169, 0, 169, 0,
	149, 0, 799, 0, 0, 0, 0, 61, 210, 0,
	211, 213, 214, 215, 0, 276, 277, 519, 320, 446,
	390, 449, 483, 169, 487, 488, 490, 492, 493, 495,
	451, 450, 452, 0, 0, 455, 0, 0, 0, 0,
	0, 502, 0, 32, 0, 553, -2, 0, 0, 0,
	44, 35, 0, 330, 0, 0, 0, 365, 333, 36,
	182, 0, 199, 174, 168, 0, 172, 143, 172, 0,
	0, 75, 88, 89, 0, 0, 0, 0, 521, 0,
	484, 485, 0, 0, 0, 0, 476, 459, 499, 0,
	551, 0, -2, 0, 546, 545, 0, 339, 366, 367,
	368, 329, 181, 183, 0, 188, 0, 198, 179, 0,
	176, 178, 166, 132, 133, 147, 150, 0, 0, 0,
	0, 26, 0, 0, 453, 454, 456, 457, 0, 0,
	0, 0, 541, 27, 0, 331, 184, 185, 0, 189,
	187, 95, 0, 175, 177, 71, 71, 82, 0, 230,
	0, 522, 520, 458, 0, 0, 0, 549, -2, 547,
	186, 180, 802, 0, 0, 802, 85, 229, 0, 0,
	477, 0, 480, 66, 65, 72, 73, 67, 212, 231,
	0, 478, 0, 0, 0, 0, 0, 479, 0, 0,
	232, 233,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 260,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:330
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:335
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:340
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:363
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:381
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:398
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:415
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:477
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:482
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:486
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:510
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:514
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:556
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.definer = &Definer{}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:566
		{
			yyVAL.definer = &Definer{
				User: string(yyDollar[3].str),
				Host: string(yyDollar[5].str),
			}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:589
		{
			yyVAL.trigger = &Trigger{
				Name:      yyDollar[1].str,
				IsBefore:  true,
				Event:     string(yyDollar[3].bytes),
				Table:     yyDollar[5].tableName,
				IsPrecede: yyDollar[9].trigger.IsPrecede,
				Related:   yyDollar[9].trigger.Related,
				Body:      getSkipBytes(yylex),
			}
		}
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:601
		{
			yyVAL.trigger = &Trigger{
				Name:      yyDollar[1].str,
				IsBefore:  false,
				Event:     string(yyDollar[3].bytes),
				Table:     yyDollar[5].tableName,
				IsPrecede: yyDollar[9].trigger.IsPrecede,
				Related:   yyDollar[9].trigger.Related,
				Body:      getSkipBytes(yylex),
			}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:619
		{
			yyVAL.trigger = &Trigger{IsPrecede: false, Related: ""}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			yyVAL.trigger = &Trigger{IsPrecede: false, Related: string(yyDollar[2].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.trigger = &Trigger{IsPrecede: true, Related: string(yyDollar[2].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:630
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:635
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:639
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:643
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:651
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:659
		{
			// trigger
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Definer: yyDollar[2].definer, Trigger: yyDollar[3].trigger}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:665
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:680
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:685
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:696
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:702
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:708
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:715
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:737
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:956
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.optVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:965
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:970
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:974
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:986
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:992
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1032
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1061
		{
			yyVAL.optVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1065
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1079
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1083
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1092
		{
			yyVAL.str = ""
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1101
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.colKeyOpt = colKey
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1117
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1122
		{
			yyVAL.optVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1161
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1193
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1213
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1224
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1232
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = yyDollar[1].str
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1268
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1272
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1276
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1280
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1293
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1303
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1308
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1313
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1336
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1342
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1346
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 232:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1352
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 233:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1356
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1368
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1376
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1381
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1471
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1481
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1521
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1531
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = "extended "
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = "full "
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1565
		{
			yyVAL.showFilter = nil
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1583
		{
			yyVAL.str = SessionStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1587
		{
			yyVAL.str = GlobalStr
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &Begin{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Begin{}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Commit{}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Rollback{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &OtherRead{}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &OtherRead{}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &OtherRead{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1646
		{
			setAllowComments(yylex, true)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1650
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1656
		{
			yyVAL.bytes2 = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = UnionStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.str = UnionAllStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.str = UnionDistinctStr
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = SQLCacheStr
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1692
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = DistinctStr
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1701
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = StraightJoinHint
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1710
		{
			yyVAL.selectExprs = nil
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1730
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1734
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1742
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1747
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1755
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1767
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1781
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1795
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1805
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1809
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1819
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1842
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1846
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1850
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1862
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1866
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1872
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1874
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1877
		{
			yyVAL.empty = struct{}{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.empty = struct{}{}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = JoinStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1907
		{
			yyVAL.str = JoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = JoinStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1917
		{
			yyVAL.str = StraightJoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = LeftJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = LeftJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.str = RightJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = RightJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = NaturalJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1945
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1955
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1969
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1974
		{
			yyVAL.indexHints = nil
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1978
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1982
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1986
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1991
		{
			yyVAL.expr = nil
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1995
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2025
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = ""
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = IsNullStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = IsNotNullStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.str = IsTrueStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2105
		{
			yyVAL.str = IsNotTrueStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.str = IsFalseStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			yyVAL.str = IsNotFalseStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = EqualStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = LessThanStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = GreaterThanStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = LessEqualStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.str = GreaterEqualStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.str = NotEqualStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2148
		{
			yyVAL.expr = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2178
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2374
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 458:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2472
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2476
		{
			yyVAL.str = BooleanModeStr
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2480
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2484
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2488
		{
			yyVAL.str = QueryExpansionStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2512
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2568
		{
			yyVAL.str = string("")
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2588
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = nil
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2603
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2607
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2611
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &NullVal{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2669
		{
			yyVAL.exprs = nil
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2673
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = nil
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2687
		{
			yyVAL.orderBy = nil
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2701
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2712
		{
			yyVAL.str = AscScr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = AscScr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = DescScr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2725
		{
			yyVAL.limit = nil
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2733
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2737
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2742
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.str = ForUpdateStr
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2750
		{
			yyVAL.str = ShareModeStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2763
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2771
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2776
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2780
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2784
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2795
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2803
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2808
		{
			yyVAL.updateExprs = nil
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2812
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2844
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2854
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2864
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2880
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2884
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2888
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.bytes = []byte("charset")
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &Default{}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2919
		{
			yyVAL.byt = 0
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.byt = 1
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2926
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2929
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2931
		{
			yyVAL.str = IgnoreStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2956
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2966
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2969
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2971
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2976
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3010
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			decNesting(yylex)
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3240
		{
			forceEOF(yylex)
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3245
		{
			forceEOF(yylex)
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			forceEOF(yylex)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			forceEOF(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3259
		{
			skipDDLEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
